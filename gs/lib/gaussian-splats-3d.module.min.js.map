{"version":3,"file":"gaussian-splats-3d.module.min.js","sources":["../src/AbortablePromise.js","../src/Util.js","../src/loaders/UncompressedSplatArray.js","../src/Constants.js","../src/loaders/SplatBuffer.js","../src/loaders/ply/PlayCanvasCompressedPlyParser.js","../src/loaders/ply/PlyFormat.js","../src/loaders/ply/PlyParserUtils.js","../src/loaders/ply/INRIAV1PlyParser.js","../src/loaders/ply/INRIAV2PlyParser.js","../src/loaders/ply/PlyParser.js","../src/loaders/SplatPartitioner.js","../src/loaders/SplatBufferGenerator.js","../src/loaders/LoaderStatus.js","../src/loaders/DirectLoadError.js","../src/loaders/InternalLoadType.js","../src/loaders/ply/PlyLoader.js","../src/loaders/splat/SplatParser.js","../src/loaders/splat/SplatLoader.js","../src/loaders/ksplat/KSplatLoader.js","../src/loaders/SceneFormat.js","../src/loaders/Utils.js","../src/OrbitControls.js","../src/ui/LoadingSpinner.js","../src/ui/Util.js","../src/ui/LoadingProgressBar.js","../src/ui/InfoPanel.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/SplatRenderMode.js","../src/raycaster/Raycaster.js","../src/splatmesh/SplatMaterial.js","../src/splatmesh/SplatMaterial3D.js","../src/splatmesh/SplatMaterial2D.js","../src/splatmesh/SplatGeometry.js","../src/splatmesh/SplatScene.js","../src/splattree/SplatTree.js","../src/three-shim/WebGLExtensions.js","../src/three-shim/WebGLCapabilities.js","../src/SceneRevealMode.js","../src/LogLevel.js","../src/splatmesh/SplatMesh.js","../src/worker/sorter.wasm","../src/worker/sorter_no_simd.wasm","../src/worker/SortWorker.js","../src/webxr/WebXRMode.js","../src/webxr/VRButton.js","../src/webxr/ARButton.js","../src/RenderMode.js","../src/Viewer.js","../src/worker/sorter_non_shared.wasm","../src/worker/sorter_no_simd_non_shared.wasm","../src/DropInViewer.js"],"sourcesContent":["/**\r\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\r\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\r\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\r\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\r\n *\r\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\r\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\r\n */\r\nexport class AbortablePromise {\r\n\r\n    static idGen = 0;\r\n\r\n    constructor(promiseFunc, abortHandler) {\r\n\r\n        let resolver;\r\n        let rejecter;\r\n        this.promise = new Promise((resolve, reject) => {\r\n            resolver = resolve;\r\n            rejecter = reject;\r\n        });\r\n\r\n        const promiseResolve = resolver.bind(this);\r\n        const promiseReject = rejecter.bind(this);\r\n\r\n        const resolve = (...args) => {\r\n            promiseResolve(...args);\r\n        };\r\n\r\n        const reject = (error) => {\r\n            promiseReject(error);\r\n        };\r\n\r\n        promiseFunc(resolve.bind(this), reject.bind(this));\r\n        this.abortHandler = abortHandler;\r\n        this.id = AbortablePromise.idGen++;\r\n    }\r\n\r\n    then(onResolve) {\r\n        return new AbortablePromise((resolve, reject) => {\r\n            this.promise = this.promise\r\n            .then((...args) => {\r\n                const onResolveResult = onResolve(...args);\r\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\r\n                    onResolveResult.then((...args2) => {\r\n                        resolve(...args2);\r\n                    });\r\n                } else {\r\n                    resolve(onResolveResult);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            });\r\n        }, this.abortHandler);\r\n    }\r\n\r\n    catch(onFail) {\r\n        return new AbortablePromise((resolve) => {\r\n            this.promise = this.promise.then((...args) => {\r\n                resolve(...args);\r\n            })\r\n            .catch(onFail);\r\n        }, this.abortHandler);\r\n    }\r\n\r\n    abort(reason) {\r\n        if (this.abortHandler) this.abortHandler(reason);\r\n    }\r\n\r\n}\r\n\r\nexport class AbortedPromiseError extends Error {\r\n\r\n    constructor(msg) {\r\n        super(msg);\r\n    }\r\n\r\n}\r\n","import { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\r\n\r\nexport const floatToHalf = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(val) {\r\n        floatView[0] = val;\r\n        const x = int32View[0];\r\n\r\n        let bits = (x >> 16) & 0x8000;\r\n        let m = (x >> 12) & 0x07ff;\r\n        const e = (x >> 23) & 0xff;\r\n\r\n        if (e < 103) return bits;\r\n\r\n        if (e > 142) {\r\n            bits |= 0x7c00;\r\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\r\n            return bits;\r\n        }\r\n\r\n        if (e < 113) {\r\n            m |= 0x0800;\r\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\r\n            return bits;\r\n        }\r\n\r\n        bits |= (( e - 112) << 10) | (m >> 1);\r\n        bits += m & 1;\r\n        return bits;\r\n    };\r\n\r\n}();\r\n\r\nexport const uintEncodedFloat = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(f) {\r\n        floatView[0] = f;\r\n        return int32View[0];\r\n    };\r\n\r\n}();\r\n\r\nexport const rgbaToInteger = function(r, g, b, a) {\r\n    return r + (g << 8) + (b << 16) + (a << 24);\r\n};\r\n\r\nexport const rgbaArrayToInteger = function(arr, offset) {\r\n    return arr[offset] + (arr[offset + 1] << 8) + (arr[offset + 2] << 16) + (arr[offset + 3] << 24);\r\n};\r\n\r\nexport const fetchWithProgress = function(path, onProgress, saveChunks = true, headers) {\r\n\r\n    const abortController = new AbortController();\r\n    const signal = abortController.signal;\r\n    let aborted = false;\r\n    const abortHandler = (reason) => {\r\n        abortController.abort(reason);\r\n        aborted = true;\r\n    };\r\n\r\n    return new AbortablePromise((resolve, reject) => {\r\n        const fetchOptions = { signal };\r\n        if (headers) fetchOptions.headers = headers;\r\n         fetch(path, fetchOptions)\r\n        .then(async (data) => {\r\n            // Handle error conditions where data is still returned\r\n            if (!data.ok) {\r\n                const errorText = await data.text();\r\n                reject(new Error(`Fetch failed: ${data.status} ${data.statusText} ${errorText}`));\r\n                return;\r\n            }\r\n\r\n            const reader = data.body.getReader();\r\n            let bytesDownloaded = 0;\r\n            let _fileSize = data.headers.get('Content-Length');\r\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\r\n\r\n            const chunks = [];\r\n\r\n            while (!aborted) {\r\n                try {\r\n                    const { value: chunk, done } = await reader.read();\r\n                    if (done) {\r\n                        if (onProgress) {\r\n                            onProgress(100, '100%', chunk, fileSize);\r\n                        }\r\n                        if (saveChunks) {\r\n                            const buffer = new Blob(chunks).arrayBuffer();\r\n                            resolve(buffer);\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                        break;\r\n                    }\r\n                    bytesDownloaded += chunk.length;\r\n                    let percent;\r\n                    let percentLabel;\r\n                    if (fileSize !== undefined) {\r\n                        percent = bytesDownloaded / fileSize * 100;\r\n                        percentLabel = `${percent.toFixed(2)}%`;\r\n                    }\r\n                    if (saveChunks) {\r\n                        chunks.push(chunk);\r\n                    }\r\n                    if (onProgress) {\r\n                        onProgress(percent, percentLabel, chunk, fileSize);\r\n                    }\r\n                } catch (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            reject(new AbortedPromiseError(error));\r\n        });\r\n    }, abortHandler);\r\n\r\n};\r\n\r\nexport const clamp = function(val, min, max) {\r\n    return Math.max(Math.min(val, max), min);\r\n};\r\n\r\nexport const getCurrentTime = function() {\r\n    return performance.now() / 1000;\r\n};\r\n\r\nexport const disposeAllMeshes = (object3D) => {\r\n    if (object3D.geometry) {\r\n        object3D.geometry.dispose();\r\n        object3D.geometry = null;\r\n    }\r\n    if (object3D.material) {\r\n        object3D.material.dispose();\r\n        object3D.material = null;\r\n    }\r\n    if (object3D.children) {\r\n        for (let child of object3D.children) {\r\n            disposeAllMeshes(child);\r\n        }\r\n    }\r\n};\r\n\r\nexport const delayedExecute = (func, fast) => {\r\n    return new Promise((resolve) => {\r\n        window.setTimeout(() => {\r\n            resolve(func());\r\n        }, fast ? 1 : 50);\r\n    });\r\n};\r\n\r\n\r\nexport const getSphericalHarmonicsComponentCountForDegree = (sphericalHarmonicsDegree = 0) => {\r\n    switch (sphericalHarmonicsDegree) {\r\n        case 1:\r\n            return 9;\r\n        case 2:\r\n            return 24;\r\n    }\r\n    return 0;\r\n};\r\n\r\nexport const nativePromiseWithExtractedComponents = () => {\r\n    let resolver;\r\n    let rejecter;\r\n    const promise = new Promise((resolve, reject) => {\r\n        resolver = resolve;\r\n        rejecter = reject;\r\n    });\r\n    return {\r\n        'promise': promise,\r\n        'resolve': resolver,\r\n        'reject': rejecter\r\n    };\r\n};\r\n\r\nexport const abortablePromiseWithExtractedComponents = (abortHandler) => {\r\n    let resolver;\r\n    let rejecter;\r\n    if (!abortHandler) {\r\n        abortHandler = () => {};\r\n    }\r\n    const promise = new AbortablePromise((resolve, reject) => {\r\n        resolver = resolve;\r\n        rejecter = reject;\r\n    }, abortHandler);\r\n    return {\r\n        'promise': promise,\r\n        'resolve': resolver,\r\n        'reject': rejecter\r\n    };\r\n};\r\n\r\nclass Semver {\r\n    constructor(major, minor, patch) {\r\n        this.major = major;\r\n        this.minor = minor;\r\n        this.patch = patch;\r\n    }\r\n\r\n    toString() {\r\n        return `${this.major}_${this.minor}_${this.patch}`;\r\n    }\r\n}\r\n\r\nexport function isIOS() {\r\n    const ua = navigator.userAgent;\r\n    return ua.indexOf('iPhone') > 0 || ua.indexOf('iPad') > 0;\r\n}\r\n\r\nexport function getIOSSemever() {\r\n    if (isIOS()) {\r\n        const extract = navigator.userAgent.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\r\n        return new Semver(\r\n            parseInt(extract[1] || 0, 10),\r\n            parseInt(extract[2] || 0, 10),\r\n            parseInt(extract[3] || 0, 10)\r\n        );\r\n    } else {\r\n        return null; // or [0,0,0]\r\n    }\r\n}\r\n","import { getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\r\n\r\nconst BASE_COMPONENT_COUNT = 14;\r\n\r\nexport class UncompressedSplatArray {\r\n\r\n    static OFFSET = {\r\n        X: 0,\r\n        Y: 1,\r\n        Z: 2,\r\n        SCALE0: 3,\r\n        SCALE1: 4,\r\n        SCALE2: 5,\r\n        ROTATION0: 6,\r\n        ROTATION1: 7,\r\n        ROTATION2: 8,\r\n        ROTATION3: 9,\r\n        FDC0: 10,\r\n        FDC1: 11,\r\n        FDC2: 12,\r\n        OPACITY: 13,\r\n        FRC0: 14,\r\n        FRC1: 15,\r\n        FRC2: 16,\r\n        FRC3: 17,\r\n        FRC4: 18,\r\n        FRC5: 19,\r\n        FRC6: 20,\r\n        FRC7: 21,\r\n        FRC8: 22,\r\n        FRC9: 23,\r\n        FRC10: 24,\r\n        FRC11: 25,\r\n        FRC12: 26,\r\n        FRC13: 27,\r\n        FRC14: 28,\r\n        FRC15: 29,\r\n        FRC16: 30,\r\n        FRC17: 31,\r\n        FRC18: 32,\r\n        FRC19: 33,\r\n        FRC20: 34,\r\n        FRC21: 35,\r\n        FRC22: 36,\r\n        FRC23: 37\r\n    };\r\n\r\n    constructor(sphericalHarmonicsDegree = 0) {\r\n        this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\r\n        this.sphericalHarmonicsCount = getSphericalHarmonicsComponentCountForDegree(this.sphericalHarmonicsDegree);\r\n        this.componentCount = this.sphericalHarmonicsCount + BASE_COMPONENT_COUNT;\r\n        this.defaultSphericalHarmonics = new Array(this.sphericalHarmonicsCount).fill(0);\r\n        this.splats = [];\r\n        this.splatCount = 0;\r\n    }\r\n\r\n    static createSplat(sphericalHarmonicsDegree = 0) {\r\n        const baseSplat = [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\r\n        let shEntries = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\r\n        for (let i = 0; i < shEntries; i++) baseSplat.push(0);\r\n        return baseSplat;\r\n    }\r\n\r\n    addSplat(splat) {\r\n        this.splats.push(splat);\r\n        this.splatCount++;\r\n    }\r\n\r\n    getSplat(index) {\r\n        return this.splats[index];\r\n    }\r\n\r\n    addDefaultSplat() {\r\n        const newSplat = UncompressedSplatArray.createSplat(this.sphericalHarmonicsDegree);\r\n        this.addSplat(newSplat);\r\n        return newSplat;\r\n    }\r\n\r\n    addSplatFromComonents(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity, ...rest) {\r\n        const newSplat = [x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity, ...this.defaultSphericalHarmonics];\r\n        for (let i = 0; i < rest.length && i < this.sphericalHarmonicsCount; i++) {\r\n            newSplat[i] = rest[i];\r\n        }\r\n        this.addSplat(newSplat);\r\n        return newSplat;\r\n    }\r\n\r\n    addSplatFromArray(src, srcIndex) {\r\n        const srcSplat = src.splats[srcIndex];\r\n        const newSplat = UncompressedSplatArray.createSplat(this.sphericalHarmonicsDegree);\r\n        for (let i = 0; i < this.componentCount && i < srcSplat.length; i++) {\r\n            newSplat[i] = srcSplat[i];\r\n        }\r\n        this.addSplat(newSplat);\r\n    }\r\n}\r\n","export class Constants {\r\n\r\n    static DefaultSplatSortDistanceMapPrecision = 16;\r\n    static MemoryPageSize = 65536;\r\n    static BytesPerFloat = 4;\r\n    static BytesPerInt = 4;\r\n    static MaxScenes = 32;\r\n    static ProgressiveLoadSectionSize = 262144;\r\n    static ProgressiveLoadSectionDelayDuration = 15;\r\n    static SphericalHarmonics8BitCompressionRange = 3;\r\n}\r\n","import * as THREE from 'three';\r\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\r\nimport { clamp, getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\r\nimport { Constants } from '../Constants.js';\r\n\r\nconst DefaultSphericalHarmonics8BitCompressionRange = Constants.SphericalHarmonics8BitCompressionRange;\r\nconst DefaultSphericalHarmonics8BitCompressionHalfRange = DefaultSphericalHarmonics8BitCompressionRange / 2.0;\r\n\r\nconst toHalfFloat = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\r\nconst fromHalfFloat = THREE.DataUtils.fromHalfFloat.bind(THREE.DataUtils);\r\n\r\nconst toUncompressedFloat = (f, compressionLevel, isSH = false, range8BitMin, range8BitMax) => {\r\n    if (compressionLevel === 0) {\r\n        return f;\r\n    } else if (compressionLevel === 1 || compressionLevel === 2 && !isSH) {\r\n        return THREE.DataUtils.fromHalfFloat(f);\r\n    } else if (compressionLevel === 2) {\r\n        return fromUint8(f, range8BitMin, range8BitMax);\r\n    }\r\n};\r\n\r\nconst toUint8 = (v, rangeMin, rangeMax) => {\r\n    v = clamp(v, rangeMin, rangeMax);\r\n    const range = (rangeMax - rangeMin);\r\n    return clamp(Math.floor((v - rangeMin) / range * 255), 0, 255);\r\n};\r\n\r\nconst fromUint8 = (v, rangeMin, rangeMax) => {\r\n    const range = (rangeMax - rangeMin);\r\n    return (v / 255 * range + rangeMin);\r\n};\r\n\r\nconst fromHalfFloatToUint8 = (v, rangeMin, rangeMax) => {\r\n    return toUint8(fromHalfFloat(v, rangeMin, rangeMax));\r\n};\r\n\r\nconst fromUint8ToHalfFloat = (v, rangeMin, rangeMax) => {\r\n    return toHalfFloat(fromUint8(v, rangeMin, rangeMax));\r\n};\r\n\r\nconst dataViewFloatForCompressionLevel = (dataView, floatIndex, compressionLevel, isSH = false) => {\r\n    if (compressionLevel === 0) {\r\n        return dataView.getFloat32(floatIndex * 4, true);\r\n    } else if (compressionLevel === 1 || compressionLevel === 2 && !isSH) {\r\n        return dataView.getUint16(floatIndex * 2, true);\r\n    } else {\r\n        return dataView.getUint8(floatIndex, true);\r\n    }\r\n};\r\n\r\nconst convertBetweenCompressionLevels = function() {\r\n\r\n    const noop = (v) => v;\r\n\r\n    return function(val, fromLevel, toLevel, isSH = false) {\r\n        if (fromLevel === toLevel) return val;\r\n        let outputConversionFunc = noop;\r\n\r\n        if (fromLevel === 2 && isSH) {\r\n            if (toLevel === 1) outputConversionFunc = fromUint8ToHalfFloat;\r\n            else if (toLevel == 0) {\r\n                outputConversionFunc = fromUint8;\r\n            }\r\n        } else if (fromLevel === 2 || fromLevel === 1) {\r\n            if (toLevel === 0) outputConversionFunc = fromHalfFloat;\r\n            else if (toLevel == 2) {\r\n                if (!isSH) outputConversionFunc = noop;\r\n                else outputConversionFunc = fromHalfFloatToUint8;\r\n            }\r\n        } else if (fromLevel === 0) {\r\n            if (toLevel === 1) outputConversionFunc = toHalfFloat;\r\n            else if (toLevel == 2) {\r\n                if (!isSH) outputConversionFunc = toHalfFloat;\r\n                else outputConversionFunc = toUint8;\r\n            }\r\n        }\r\n\r\n        return outputConversionFunc(val);\r\n    };\r\n\r\n}();\r\n\r\nconst copyBetweenBuffers = (srcBuffer, srcOffset, destBuffer, destOffset, byteCount = 0) => {\r\n    const src = new Uint8Array(srcBuffer, srcOffset);\r\n    const dest = new Uint8Array(destBuffer, destOffset);\r\n    for (let i = 0; i < byteCount; i++) {\r\n        dest[i] = src[i];\r\n    }\r\n};\r\n\r\n/**\r\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\r\n */\r\nexport class SplatBuffer {\r\n\r\n    static CurrentMajorVersion = 0;\r\n    static CurrentMinorVersion = 1;\r\n\r\n    static CenterComponentCount = 3;\r\n    static ScaleComponentCount = 3;\r\n    static RotationComponentCount = 4;\r\n    static ColorComponentCount = 4;\r\n    static CovarianceComponentCount = 6;\r\n\r\n    static SplatScaleOffsetFloat = 3;\r\n    static SplatRotationOffsetFloat = 6;\r\n\r\n    static CompressionLevels = {\r\n        0: {\r\n            BytesPerCenter: 12,\r\n            BytesPerScale: 12,\r\n            BytesPerRotation: 16,\r\n            BytesPerColor: 4,\r\n            ScaleOffsetBytes: 12,\r\n            RotationffsetBytes: 24,\r\n            ColorOffsetBytes: 40,\r\n            SphericalHarmonicsOffsetBytes: 44,\r\n            ScaleRange: 1,\r\n            BytesPerSphericalHarmonicsComponent: 4,\r\n            SphericalHarmonicsOffsetFloat: 11,\r\n            SphericalHarmonicsDegrees: {\r\n                0: { BytesPerSplat: 44 },\r\n                1: { BytesPerSplat: 80 },\r\n                2: { BytesPerSplat: 140 }\r\n            },\r\n        },\r\n        1: {\r\n            BytesPerCenter: 6,\r\n            BytesPerScale: 6,\r\n            BytesPerRotation: 8,\r\n            BytesPerColor: 4,\r\n            ScaleOffsetBytes: 6,\r\n            RotationffsetBytes: 12,\r\n            ColorOffsetBytes: 20,\r\n            SphericalHarmonicsOffsetBytes: 24,\r\n            ScaleRange: 32767,\r\n            BytesPerSphericalHarmonicsComponent: 2,\r\n            SphericalHarmonicsOffsetFloat: 12,\r\n            SphericalHarmonicsDegrees: {\r\n                0: { BytesPerSplat: 24 },\r\n                1: { BytesPerSplat: 42 },\r\n                2: { BytesPerSplat: 72 }\r\n            },\r\n        },\r\n        2: {\r\n            BytesPerCenter: 6,\r\n            BytesPerScale: 6,\r\n            BytesPerRotation: 8,\r\n            BytesPerColor: 4,\r\n            ScaleOffsetBytes: 6,\r\n            RotationffsetBytes: 12,\r\n            ColorOffsetBytes: 20,\r\n            SphericalHarmonicsOffsetBytes: 24,\r\n            ScaleRange: 32767,\r\n            BytesPerSphericalHarmonicsComponent: 1,\r\n            SphericalHarmonicsOffsetFloat: 12,\r\n            SphericalHarmonicsDegrees: {\r\n                0: { BytesPerSplat: 24 },\r\n                1: { BytesPerSplat: 33 },\r\n                2: { BytesPerSplat: 48 }\r\n            },\r\n        }\r\n    };\r\n\r\n    static CovarianceSizeFloats = 6;\r\n\r\n    static HeaderSizeBytes = 4096;\r\n    static SectionHeaderSizeBytes = 1024;\r\n\r\n    static BucketStorageSizeBytes = 12;\r\n    static BucketStorageSizeFloats = 3;\r\n\r\n    static BucketBlockSize = 5.0;\r\n    static BucketSize = 256;\r\n\r\n    constructor(bufferData, secLoadedCountsToMax = true) {\r\n        this.constructFromBuffer(bufferData, secLoadedCountsToMax);\r\n    }\r\n\r\n    getSplatCount() {\r\n        return this.splatCount;\r\n    }\r\n\r\n    getMaxSplatCount() {\r\n        return this.maxSplatCount;\r\n    }\r\n\r\n    getMinSphericalHarmonicsDegree() {\r\n        let minSphericalHarmonicsDegree = 0;\r\n        for (let i = 0; i < this.sections.length; i++) {\r\n            const section = this.sections[i];\r\n            if (i === 0 || section.sphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\r\n                minSphericalHarmonicsDegree = section.sphericalHarmonicsDegree;\r\n            }\r\n        }\r\n        return minSphericalHarmonicsDegree;\r\n    }\r\n\r\n    getBucketIndex(section, localSplatIndex) {\r\n        let bucketIndex;\r\n        const maxSplatIndexInFullBuckets = section.fullBucketCount * section.bucketSize;\r\n        if (localSplatIndex < maxSplatIndexInFullBuckets) {\r\n            bucketIndex = Math.floor(localSplatIndex / section.bucketSize);\r\n        } else {\r\n            let bucketSplatIndex = maxSplatIndexInFullBuckets;\r\n            bucketIndex = section.fullBucketCount;\r\n            let partiallyFullBucketIndex = 0;\r\n            while (bucketSplatIndex < section.splatCount) {\r\n                let currentPartiallyFilledBucketSize = section.partiallyFilledBucketLengths[partiallyFullBucketIndex];\r\n                if (localSplatIndex >= bucketSplatIndex && localSplatIndex < bucketSplatIndex + currentPartiallyFilledBucketSize) {\r\n                    break;\r\n                }\r\n                bucketSplatIndex += currentPartiallyFilledBucketSize;\r\n                bucketIndex++;\r\n                partiallyFullBucketIndex++;\r\n            }\r\n        }\r\n        return bucketIndex;\r\n    }\r\n\r\n    getSplatCenter(globalSplatIndex, outCenter, transform) {\r\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\r\n        const section = this.sections[sectionIndex];\r\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\r\n\r\n        const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\r\n        const dataView = new DataView(this.bufferData, section.dataBase + srcSplatCentersBase);\r\n\r\n        const x = dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\r\n        const y = dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\r\n        const z = dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\r\n        if (this.compressionLevel >= 1) {\r\n            const bucketIndex = this.getBucketIndex(section, localSplatIndex);\r\n            const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\r\n            const sf = section.compressionScaleFactor;\r\n            const sr = section.compressionScaleRange;\r\n            outCenter.x = (x - sr) * sf + section.bucketArray[bucketBase];\r\n            outCenter.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\r\n            outCenter.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\r\n        } else {\r\n            outCenter.x = x;\r\n            outCenter.y = y;\r\n            outCenter.z = z;\r\n        }\r\n        if (transform) outCenter.applyMatrix4(transform);\r\n    }\r\n\r\n    getSplatScaleAndRotation = function() {\r\n\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const tempPosition = new THREE.Vector3();\r\n        const scale = new THREE.Vector3();\r\n        const rotation = new THREE.Quaternion();\r\n\r\n        return function(index, outScale, outRotation, transform, scaleOverride) {\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[index];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = index - section.splatCountOffset;\r\n\r\n            const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\r\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\r\n\r\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\r\n\r\n            scale.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel), this.compressionLevel),\r\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel), this.compressionLevel),\r\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel), this.compressionLevel));\r\n            if (scaleOverride) {\r\n                if (scaleOverride.x !== undefined) scale.x = scaleOverride.x;\r\n                if (scaleOverride.y !== undefined) scale.y = scaleOverride.y;\r\n                if (scaleOverride.z !== undefined) scale.z = scaleOverride.z;\r\n            }\r\n\r\n            rotation.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel), this.compressionLevel));\r\n\r\n            if (transform) {\r\n                scaleMatrix.makeScale(scale.x, scale.y, scale.z);\r\n                rotationMatrix.makeRotationFromQuaternion(rotation);\r\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\r\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\r\n            } else {\r\n                outScale.copy(scale);\r\n                outRotation.copy(rotation);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatColor(globalSplatIndex, outColor) {\r\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\r\n        const section = this.sections[sectionIndex];\r\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\r\n\r\n        const srcSplatColorsBase = section.bytesPerSplat * localSplatIndex +\r\n                                   SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\r\n        const splatColorsArray = new Uint8Array(this.bufferData, section.dataBase + srcSplatColorsBase, 4);\r\n\r\n        outColor.set(splatColorsArray[0], splatColorsArray[1],\r\n                     splatColorsArray[2], splatColorsArray[3]);\r\n    }\r\n\r\n    fillSplatCenterArray(outCenterArray, transform, srcFrom, srcTo, destFrom) {\r\n        const splatCount = this.splatCount;\r\n\r\n        srcFrom = srcFrom || 0;\r\n        srcTo = srcTo || splatCount - 1;\r\n        if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n        const center = new THREE.Vector3();\r\n        for (let i = srcFrom; i <= srcTo; i++) {\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = i - section.splatCountOffset;\r\n            const centerDestBase = (i - srcFrom + destFrom) * SplatBuffer.CenterComponentCount;\r\n\r\n            const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\r\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatCentersBase);\r\n\r\n            const x = dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\r\n            const y = dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\r\n            const z = dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\r\n            if (this.compressionLevel >= 1) {\r\n                const bucketIndex = this.getBucketIndex(section, localSplatIndex);\r\n                const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\r\n                const sf = section.compressionScaleFactor;\r\n                const sr = section.compressionScaleRange;\r\n                center.x = (x - sr) * sf + section.bucketArray[bucketBase];\r\n                center.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\r\n                center.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\r\n            } else {\r\n                center.x = x;\r\n                center.y = y;\r\n                center.z = z;\r\n            }\r\n            if (transform) {\r\n                center.applyMatrix4(transform);\r\n            }\r\n            outCenterArray[centerDestBase] = center.x;\r\n            outCenterArray[centerDestBase + 1] = center.y;\r\n            outCenterArray[centerDestBase + 2] = center.z;\r\n        }\r\n    }\r\n\r\n    fillSplatScaleRotationArray = function() {\r\n\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const scale = new THREE.Vector3();\r\n        const rotation = new THREE.Quaternion();\r\n        const tempPosition = new THREE.Vector3();\r\n\r\n        const ensurePositiveW = (quaternion) => {\r\n            const flip = quaternion.w < 0 ? -1 : 1;\r\n            quaternion.x *= flip;\r\n            quaternion.y *= flip;\r\n            quaternion.z *= flip;\r\n            quaternion.w *= flip;\r\n        };\r\n\r\n        return function(outScaleArray, outRotationArray, transform, srcFrom, srcTo, destFrom,\r\n                        desiredOutputCompressionLevel, scaleOverride) {\r\n            const splatCount = this.splatCount;\r\n\r\n            srcFrom = srcFrom || 0;\r\n            srcTo = srcTo || splatCount - 1;\r\n            if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n            const outputConversion = (value, srcCompressionLevel) => {\r\n                if (srcCompressionLevel === undefined) srcCompressionLevel = this.compressionLevel;\r\n                return convertBetweenCompressionLevels(value, srcCompressionLevel, desiredOutputCompressionLevel);\r\n            };\r\n\r\n            for (let i = srcFrom; i <= srcTo; i++) {\r\n                const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n                const section = this.sections[sectionIndex];\r\n                const localSplatIndex = i - section.splatCountOffset;\r\n\r\n                const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\r\n                                        SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\r\n\r\n                const scaleDestBase = (i - srcFrom + destFrom) * SplatBuffer.ScaleComponentCount;\r\n                const rotationDestBase = (i - srcFrom + destFrom) * SplatBuffer.RotationComponentCount;\r\n                const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\r\n\r\n                const srcScaleX = (scaleOverride && scaleOverride.x !== undefined) ? scaleOverride.x :\r\n                                   dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\r\n                const srcScaleY = (scaleOverride && scaleOverride.y !== undefined) ? scaleOverride.y :\r\n                                   dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\r\n                const srcScaleZ = (scaleOverride && scaleOverride.z !== undefined) ? scaleOverride.z :\r\n                                   dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\r\n\r\n                const srcRotationW = dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel);\r\n                const srcRotationX = dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel);\r\n                const srcRotationY = dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel);\r\n                const srcRotationZ = dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel);\r\n\r\n                scale.set(toUncompressedFloat(srcScaleX, this.compressionLevel),\r\n                          toUncompressedFloat(srcScaleY, this.compressionLevel),\r\n                          toUncompressedFloat(srcScaleZ, this.compressionLevel));\r\n\r\n                rotation.set(toUncompressedFloat(srcRotationX, this.compressionLevel),\r\n                             toUncompressedFloat(srcRotationY, this.compressionLevel),\r\n                             toUncompressedFloat(srcRotationZ, this.compressionLevel),\r\n                             toUncompressedFloat(srcRotationW, this.compressionLevel)).normalize();\r\n\r\n                if (transform) {\r\n                    tempPosition.set(0, 0, 0);\r\n                    scaleMatrix.makeScale(scale.x, scale.y, scale.z);\r\n                    rotationMatrix.makeRotationFromQuaternion(rotation);\r\n                    tempMatrix.identity().premultiply(scaleMatrix).premultiply(rotationMatrix);\r\n                    tempMatrix.premultiply(transform);\r\n                    tempMatrix.decompose(tempPosition, rotation, scale);\r\n                    rotation.normalize();\r\n                }\r\n\r\n                ensurePositiveW(rotation);\r\n\r\n                if (outScaleArray) {\r\n                    outScaleArray[scaleDestBase] = outputConversion(scale.x, 0);\r\n                    outScaleArray[scaleDestBase + 1] = outputConversion(scale.y, 0);\r\n                    outScaleArray[scaleDestBase + 2] = outputConversion(scale.z, 0);\r\n                }\r\n\r\n                if (outRotationArray) {\r\n                    outRotationArray[rotationDestBase] = outputConversion(rotation.x, 0);\r\n                    outRotationArray[rotationDestBase + 1] = outputConversion(rotation.y, 0);\r\n                    outRotationArray[rotationDestBase + 2] = outputConversion(rotation.z, 0);\r\n                    outRotationArray[rotationDestBase + 3] = outputConversion(rotation.w, 0);\r\n                }\r\n            }\r\n        };\r\n    }();\r\n\r\n    static computeCovariance = function() {\r\n\r\n        const tempMatrix4 = new THREE.Matrix4();\r\n        const scaleMatrix = new THREE.Matrix3();\r\n        const rotationMatrix = new THREE.Matrix3();\r\n        const covarianceMatrix = new THREE.Matrix3();\r\n        const transformedCovariance = new THREE.Matrix3();\r\n        const transform3x3 = new THREE.Matrix3();\r\n        const transform3x3Transpose = new THREE.Matrix3();\r\n\r\n        return function(scale, rotation, transform, outCovariance, outOffset = 0, desiredOutputCompressionLevel) {\r\n\r\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\r\n            scaleMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            tempMatrix4.makeRotationFromQuaternion(rotation);\r\n            rotationMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\r\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\r\n\r\n            if (transform) {\r\n                transform3x3.setFromMatrix4(transform);\r\n                transform3x3Transpose.copy(transform3x3).transpose();\r\n                transformedCovariance.multiply(transform3x3Transpose);\r\n                transformedCovariance.premultiply(transform3x3);\r\n            }\r\n\r\n            if (desiredOutputCompressionLevel >= 1) {\r\n                outCovariance[outOffset] = toHalfFloat(transformedCovariance.elements[0]);\r\n                outCovariance[outOffset + 1] = toHalfFloat(transformedCovariance.elements[3]);\r\n                outCovariance[outOffset + 2] = toHalfFloat(transformedCovariance.elements[6]);\r\n                outCovariance[outOffset + 3] = toHalfFloat(transformedCovariance.elements[4]);\r\n                outCovariance[outOffset + 4] = toHalfFloat(transformedCovariance.elements[7]);\r\n                outCovariance[outOffset + 5] = toHalfFloat(transformedCovariance.elements[8]);\r\n            } else {\r\n                outCovariance[outOffset] = transformedCovariance.elements[0];\r\n                outCovariance[outOffset + 1] = transformedCovariance.elements[3];\r\n                outCovariance[outOffset + 2] = transformedCovariance.elements[6];\r\n                outCovariance[outOffset + 3] = transformedCovariance.elements[4];\r\n                outCovariance[outOffset + 4] = transformedCovariance.elements[7];\r\n                outCovariance[outOffset + 5] = transformedCovariance.elements[8];\r\n            }\r\n\r\n        };\r\n\r\n    }();\r\n\r\n    fillSplatCovarianceArray(covarianceArray, transform, srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\r\n        const splatCount = this.splatCount;\r\n\r\n        const scale = new THREE.Vector3();\r\n        const rotation = new THREE.Quaternion();\r\n\r\n        srcFrom = srcFrom || 0;\r\n        srcTo = srcTo || splatCount - 1;\r\n        if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n        for (let i = srcFrom; i <= srcTo; i++) {\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = i - section.splatCountOffset;\r\n\r\n            const covarianceDestBase = (i - srcFrom + destFrom) * SplatBuffer.CovarianceComponentCount;\r\n            const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\r\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\r\n\r\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\r\n\r\n            scale.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel), this.compressionLevel),\r\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel), this.compressionLevel),\r\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel), this.compressionLevel));\r\n\r\n            rotation.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel), this.compressionLevel));\r\n\r\n            SplatBuffer.computeCovariance(scale, rotation, transform, covarianceArray, covarianceDestBase, desiredOutputCompressionLevel);\r\n        }\r\n    }\r\n\r\n    fillSplatColorArray(outColorArray, minimumAlpha, srcFrom, srcTo, destFrom) {\r\n        const splatCount = this.splatCount;\r\n\r\n        srcFrom = srcFrom || 0;\r\n        srcTo = srcTo || splatCount - 1;\r\n        if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n        for (let i = srcFrom; i <= srcTo; i++) {\r\n\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = i - section.splatCountOffset;\r\n\r\n            const colorDestBase = (i - srcFrom + destFrom) * SplatBuffer.ColorComponentCount;\r\n            const srcSplatColorsBase = section.bytesPerSplat * localSplatIndex +\r\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\r\n\r\n            const dataView = new Uint8Array(this.bufferData, section.dataBase + srcSplatColorsBase);\r\n\r\n            let alpha = dataView[3];\r\n            alpha = (alpha >= minimumAlpha) ? alpha : 0;\r\n\r\n            outColorArray[colorDestBase] = dataView[0];\r\n            outColorArray[colorDestBase + 1] = dataView[1];\r\n            outColorArray[colorDestBase + 2] = dataView[2];\r\n            outColorArray[colorDestBase + 3] = alpha;\r\n        }\r\n    }\r\n\r\n    fillSphericalHarmonicsArray = function() {\r\n\r\n        const sphericalHarmonicVectors = [];\r\n        for (let i = 0; i < 15; i++) {\r\n            sphericalHarmonicVectors[i] = new THREE.Vector3();\r\n        }\r\n\r\n        const tempMatrix3 = new THREE.Matrix3();\r\n        const tempMatrix4 = new THREE.Matrix4();\r\n\r\n        const tempTranslation = new THREE.Vector3();\r\n        const tempScale = new THREE.Vector3();\r\n        const tempRotation = new THREE.Quaternion();\r\n\r\n        const sh11 = [];\r\n        const sh12 = [];\r\n        const sh13 = [];\r\n\r\n        const sh21 = [];\r\n        const sh22 = [];\r\n        const sh23 = [];\r\n        const sh24 = [];\r\n        const sh25 = [];\r\n\r\n        const shIn1 = [];\r\n        const shIn2 = [];\r\n        const shIn3 = [];\r\n        const shIn4 = [];\r\n        const shIn5 = [];\r\n\r\n        const shOut1 = [];\r\n        const shOut2 = [];\r\n        const shOut3 = [];\r\n        const shOut4 = [];\r\n        const shOut5 = [];\r\n\r\n        const noop = (v) => v;\r\n\r\n        const set3 = (array, val1, val2, val3) => {\r\n            array[0] = val1;\r\n            array[1] = val2;\r\n            array[2] = val3;\r\n        };\r\n\r\n        const set3FromArray = (array, srcDestView, stride, srcBase, compressionLevel) => {\r\n            array[0] = dataViewFloatForCompressionLevel(srcDestView, srcBase, compressionLevel, true);\r\n            array[1] = dataViewFloatForCompressionLevel(srcDestView, srcBase + stride, compressionLevel, true);\r\n            array[2] = dataViewFloatForCompressionLevel(srcDestView, srcBase + stride + stride, compressionLevel, true);\r\n        };\r\n\r\n        const copy3 = (srcArray, destArray) => {\r\n            destArray[0] = srcArray[0];\r\n            destArray[1] = srcArray[1];\r\n            destArray[2] = srcArray[2];\r\n        };\r\n\r\n        const setOutput3 = (srcArray, destArray, destBase, conversionFunc) => {\r\n            destArray[destBase] = conversionFunc(srcArray[0]);\r\n            destArray[destBase + 1] = conversionFunc(srcArray[1]);\r\n            destArray[destBase + 2] = conversionFunc(srcArray[2]);\r\n        };\r\n\r\n        const toUncompressedFloatArray3 = (src, dest, compressionLevel, range8BitMin, range8BitMax) => {\r\n            dest[0] = toUncompressedFloat(src[0], compressionLevel, true, range8BitMin, range8BitMax);\r\n            dest[1] = toUncompressedFloat(src[1], compressionLevel, true, range8BitMin, range8BitMax);\r\n            dest[2] = toUncompressedFloat(src[2], compressionLevel, true, range8BitMin, range8BitMax);\r\n            return dest;\r\n        };\r\n\r\n        return function(outSphericalHarmonicsArray, outSphericalHarmonicsDegree, transform,\r\n                        srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\r\n            const splatCount = this.splatCount;\r\n\r\n            srcFrom = srcFrom || 0;\r\n            srcTo = srcTo || splatCount - 1;\r\n            if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n            if (transform && outSphericalHarmonicsDegree >= 1) {\r\n                tempMatrix4.copy(transform);\r\n                tempMatrix4.decompose(tempTranslation, tempRotation, tempScale);\r\n                tempRotation.normalize();\r\n                tempMatrix4.makeRotationFromQuaternion(tempRotation);\r\n                tempMatrix3.setFromMatrix4(tempMatrix4);\r\n                set3(sh11, tempMatrix3.elements[4], -tempMatrix3.elements[7], tempMatrix3.elements[1]);\r\n                set3(sh12, -tempMatrix3.elements[5], tempMatrix3.elements[8], -tempMatrix3.elements[2]);\r\n                set3(sh13, tempMatrix3.elements[3], -tempMatrix3.elements[6], tempMatrix3.elements[0]);\r\n            }\r\n\r\n            const localFromHalfFloatToUint8 = (v) => {\r\n                return fromHalfFloatToUint8(v, this.minSphericalHarmonicsCoeff, this.maxSphericalHarmonicsCoeff);\r\n            };\r\n\r\n            const localToUint8 = (v) => {\r\n                return toUint8(v, this.minSphericalHarmonicsCoeff, this.maxSphericalHarmonicsCoeff);\r\n            };\r\n\r\n            for (let i = srcFrom; i <= srcTo; i++) {\r\n\r\n                const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n                const section = this.sections[sectionIndex];\r\n                outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, section.sphericalHarmonicsDegree);\r\n                const outSphericalHarmonicsComponentsCount = getSphericalHarmonicsComponentCountForDegree(outSphericalHarmonicsDegree);\r\n\r\n                const localSplatIndex = i - section.splatCountOffset;\r\n\r\n                const srcSplatSHBase = section.bytesPerSplat * localSplatIndex +\r\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].SphericalHarmonicsOffsetBytes;\r\n\r\n                const dataView = new DataView(this.bufferData, section.dataBase + srcSplatSHBase);\r\n\r\n                const shDestBase = (i - srcFrom + destFrom) * outSphericalHarmonicsComponentsCount;\r\n\r\n                let compressionLevelForOutputConversion = transform ? 0 : this.compressionLevel;\r\n                let outputConversionFunc = noop;\r\n                if (compressionLevelForOutputConversion !== desiredOutputCompressionLevel) {\r\n                    if (compressionLevelForOutputConversion === 1) {\r\n                        if (desiredOutputCompressionLevel === 0) outputConversionFunc = fromHalfFloat;\r\n                        else if (desiredOutputCompressionLevel == 2) outputConversionFunc = localFromHalfFloatToUint8;\r\n                    } else if (compressionLevelForOutputConversion === 0) {\r\n                        if (desiredOutputCompressionLevel === 1) outputConversionFunc = toHalfFloat;\r\n                        else if (desiredOutputCompressionLevel == 2) outputConversionFunc = localToUint8;\r\n                    }\r\n                }\r\n\r\n                const minShCoeff = this.minSphericalHarmonicsCoeff;\r\n                const maxShCoeff = this.maxSphericalHarmonicsCoeff;\r\n\r\n                if (outSphericalHarmonicsDegree >= 1) {\r\n\r\n                    set3FromArray(shIn1, dataView, 3, 0, this.compressionLevel);\r\n                    set3FromArray(shIn2, dataView, 3, 1, this.compressionLevel);\r\n                    set3FromArray(shIn3, dataView, 3, 2, this.compressionLevel);\r\n\r\n                    if (transform) {\r\n                        toUncompressedFloatArray3(shIn1, shIn1, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                        toUncompressedFloatArray3(shIn2, shIn2, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                        toUncompressedFloatArray3(shIn3, shIn3, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                        SplatBuffer.rotateSphericalHarmonics3(shIn1, shIn2, shIn3, sh11, sh12, sh13, shOut1, shOut2, shOut3);\r\n                    } else {\r\n                        copy3(shIn1, shOut1);\r\n                        copy3(shIn2, shOut2);\r\n                        copy3(shIn3, shOut3);\r\n                    }\r\n\r\n                    setOutput3(shOut1, outSphericalHarmonicsArray, shDestBase, outputConversionFunc);\r\n                    setOutput3(shOut2, outSphericalHarmonicsArray, shDestBase + 3, outputConversionFunc);\r\n                    setOutput3(shOut3, outSphericalHarmonicsArray, shDestBase + 6, outputConversionFunc);\r\n\r\n                    if (outSphericalHarmonicsDegree >= 2) {\r\n\r\n                        set3FromArray(shIn1, dataView, 5, 9, this.compressionLevel);\r\n                        set3FromArray(shIn2, dataView, 5, 10, this.compressionLevel);\r\n                        set3FromArray(shIn3, dataView, 5, 11, this.compressionLevel);\r\n                        set3FromArray(shIn4, dataView, 5, 12, this.compressionLevel);\r\n                        set3FromArray(shIn5, dataView, 5, 13, this.compressionLevel);\r\n\r\n                        if (transform) {\r\n                            toUncompressedFloatArray3(shIn1, shIn1, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                            toUncompressedFloatArray3(shIn2, shIn2, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                            toUncompressedFloatArray3(shIn3, shIn3, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                            toUncompressedFloatArray3(shIn4, shIn4, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                            toUncompressedFloatArray3(shIn5, shIn5, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                            SplatBuffer.rotateSphericalHarmonics5(shIn1, shIn2, shIn3, shIn4, shIn5,\r\n                                                                  sh11, sh12, sh13, sh21, sh22, sh23, sh24, sh25,\r\n                                                                  shOut1, shOut2, shOut3, shOut4, shOut5);\r\n                        } else {\r\n                            copy3(shIn1, shOut1);\r\n                            copy3(shIn2, shOut2);\r\n                            copy3(shIn3, shOut3);\r\n                            copy3(shIn4, shOut4);\r\n                            copy3(shIn5, shOut5);\r\n                        }\r\n\r\n                        setOutput3(shOut1, outSphericalHarmonicsArray, shDestBase + 9, outputConversionFunc);\r\n                        setOutput3(shOut2, outSphericalHarmonicsArray, shDestBase + 12, outputConversionFunc);\r\n                        setOutput3(shOut3, outSphericalHarmonicsArray, shDestBase + 15, outputConversionFunc);\r\n                        setOutput3(shOut4, outSphericalHarmonicsArray, shDestBase + 18, outputConversionFunc);\r\n                        setOutput3(shOut5, outSphericalHarmonicsArray, shDestBase + 21, outputConversionFunc);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    static dot3 = (v1, v2, v3, transformRow, outArray) => {\r\n        outArray[0] = outArray[1] = outArray[2] = 0;\r\n        const t0 = transformRow[0];\r\n        const t1 = transformRow[1];\r\n        const t2 = transformRow[2];\r\n        SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\r\n        SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\r\n        SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\r\n    };\r\n\r\n    static addInto3 = (val1, val2, val3, destArray) => {\r\n        destArray[0] = destArray[0] + val1;\r\n        destArray[1] = destArray[1] + val2;\r\n        destArray[2] = destArray[2] + val3;\r\n    };\r\n\r\n    static dot5 = (v1, v2, v3, v4, v5, transformRow, outArray) => {\r\n        outArray[0] = outArray[1] = outArray[2] = 0;\r\n        const t0 = transformRow[0];\r\n        const t1 = transformRow[1];\r\n        const t2 = transformRow[2];\r\n        const t3 = transformRow[3];\r\n        const t4 = transformRow[4];\r\n        SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\r\n        SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\r\n        SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\r\n        SplatBuffer.addInto3(v4[0] * t3, v4[1] * t3, v4[2] * t3, outArray);\r\n        SplatBuffer.addInto3(v5[0] * t4, v5[1] * t4, v5[2] * t4, outArray);\r\n    };\r\n\r\n    static rotateSphericalHarmonics3 = (in1, in2, in3, tsh11, tsh12, tsh13, out1, out2, out3) => {\r\n        SplatBuffer.dot3(in1, in2, in3, tsh11, out1);\r\n        SplatBuffer.dot3(in1, in2, in3, tsh12, out2);\r\n        SplatBuffer.dot3(in1, in2, in3, tsh13, out3);\r\n    };\r\n\r\n    static rotateSphericalHarmonics5 = (in1, in2, in3, in4, in5, tsh11, tsh12, tsh13,\r\n                                        tsh21, tsh22, tsh23, tsh24, tsh25, out1, out2, out3, out4, out5) => {\r\n\r\n        const kSqrt0104 = Math.sqrt(1.0 / 4.0);\r\n        const kSqrt0304 = Math.sqrt(3.0 / 4.0);\r\n        const kSqrt0103 = Math.sqrt(1.0 / 3.0);\r\n        const kSqrt0403 = Math.sqrt(4.0 / 3.0);\r\n        const kSqrt0112 = Math.sqrt(1.0 / 12.0);\r\n\r\n        tsh21[0] = kSqrt0104 * ((tsh13[2] * tsh11[0] + tsh13[0] * tsh11[2]) + (tsh11[2] * tsh13[0] + tsh11[0] * tsh13[2]));\r\n        tsh21[1] = (tsh13[1] * tsh11[0] + tsh11[1] * tsh13[0]);\r\n        tsh21[2] = kSqrt0304 * (tsh13[1] * tsh11[1] + tsh11[1] * tsh13[1]);\r\n        tsh21[3] = (tsh13[1] * tsh11[2] + tsh11[1] * tsh13[2]);\r\n        tsh21[4] = kSqrt0104 * ((tsh13[2] * tsh11[2] - tsh13[0] * tsh11[0]) + (tsh11[2] * tsh13[2] - tsh11[0] * tsh13[0]));\r\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh21, out1);\r\n\r\n        tsh22[0] = kSqrt0104 * ((tsh12[2] * tsh11[0] + tsh12[0] * tsh11[2]) + (tsh11[2] * tsh12[0] + tsh11[0] * tsh12[2]));\r\n        tsh22[1] = tsh12[1] * tsh11[0] + tsh11[1] * tsh12[0];\r\n        tsh22[2] = kSqrt0304 * (tsh12[1] * tsh11[1] + tsh11[1] * tsh12[1]);\r\n        tsh22[3] = tsh12[1] * tsh11[2] + tsh11[1] * tsh12[2];\r\n        tsh22[4] = kSqrt0104 * ((tsh12[2] * tsh11[2] - tsh12[0] * tsh11[0]) + (tsh11[2] * tsh12[2] - tsh11[0] * tsh12[0]));\r\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh22, out2);\r\n\r\n        tsh23[0] = kSqrt0103 * (tsh12[2] * tsh12[0] + tsh12[0] * tsh12[2]) + -kSqrt0112 *\r\n                   ((tsh13[2] * tsh13[0] + tsh13[0] * tsh13[2]) + (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\r\n        tsh23[1] = kSqrt0403 * tsh12[1] * tsh12[0] + -kSqrt0103 * (tsh13[1] * tsh13[0] + tsh11[1] * tsh11[0]);\r\n        tsh23[2] = tsh12[1] * tsh12[1] + -kSqrt0104 * (tsh13[1] * tsh13[1] + tsh11[1] * tsh11[1]);\r\n        tsh23[3] = kSqrt0403 * tsh12[1] * tsh12[2] + -kSqrt0103 * (tsh13[1] * tsh13[2] + tsh11[1] * tsh11[2]);\r\n        tsh23[4] = kSqrt0103 * (tsh12[2] * tsh12[2] - tsh12[0] * tsh12[0]) + -kSqrt0112 *\r\n                   ((tsh13[2] * tsh13[2] - tsh13[0] * tsh13[0]) + (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\r\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh23, out3);\r\n\r\n        tsh24[0] = kSqrt0104 * ((tsh12[2] * tsh13[0] + tsh12[0] * tsh13[2]) + (tsh13[2] * tsh12[0] + tsh13[0] * tsh12[2]));\r\n        tsh24[1] = tsh12[1] * tsh13[0] + tsh13[1] * tsh12[0];\r\n        tsh24[2] = kSqrt0304 * (tsh12[1] * tsh13[1] + tsh13[1] * tsh12[1]);\r\n        tsh24[3] = tsh12[1] * tsh13[2] + tsh13[1] * tsh12[2];\r\n        tsh24[4] = kSqrt0104 * ((tsh12[2] * tsh13[2] - tsh12[0] * tsh13[0]) + (tsh13[2] * tsh12[2] - tsh13[0] * tsh12[0]));\r\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh24, out4);\r\n\r\n        tsh25[0] = kSqrt0104 * ((tsh13[2] * tsh13[0] + tsh13[0] * tsh13[2]) - (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\r\n        tsh25[1] = (tsh13[1] * tsh13[0] - tsh11[1] * tsh11[0]);\r\n        tsh25[2] = kSqrt0304 * (tsh13[1] * tsh13[1] - tsh11[1] * tsh11[1]);\r\n        tsh25[3] = (tsh13[1] * tsh13[2] - tsh11[1] * tsh11[2]);\r\n        tsh25[4] = kSqrt0104 * ((tsh13[2] * tsh13[2] - tsh13[0] * tsh13[0]) - (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\r\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh25, out5);\r\n    };\r\n\r\n    static parseHeader(buffer) {\r\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\r\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\r\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        const versionMajor = headerArrayUint8[0];\r\n        const versionMinor = headerArrayUint8[1];\r\n        const maxSectionCount = headerArrayUint32[1];\r\n        const sectionCount = headerArrayUint32[2];\r\n        const maxSplatCount = headerArrayUint32[3];\r\n        const splatCount = headerArrayUint32[4];\r\n        const compressionLevel = headerArrayUint16[10];\r\n        const sceneCenter = new THREE.Vector3(headerArrayFloat32[6], headerArrayFloat32[7], headerArrayFloat32[8]);\r\n\r\n        const minSphericalHarmonicsCoeff = headerArrayFloat32[9] || -DefaultSphericalHarmonics8BitCompressionHalfRange;\r\n        const maxSphericalHarmonicsCoeff = headerArrayFloat32[10] || DefaultSphericalHarmonics8BitCompressionHalfRange;\r\n\r\n        return {\r\n            versionMajor,\r\n            versionMinor,\r\n            maxSectionCount,\r\n            sectionCount,\r\n            maxSplatCount,\r\n            splatCount,\r\n            compressionLevel,\r\n            sceneCenter,\r\n            minSphericalHarmonicsCoeff,\r\n            maxSphericalHarmonicsCoeff\r\n        };\r\n    }\r\n\r\n    static writeHeaderCountsToBuffer(sectionCount, splatCount, buffer) {\r\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        headerArrayUint32[2] = sectionCount;\r\n        headerArrayUint32[4] = splatCount;\r\n    }\r\n\r\n    static writeHeaderToBuffer(header, buffer) {\r\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\r\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\r\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        headerArrayUint8[0] = header.versionMajor;\r\n        headerArrayUint8[1] = header.versionMinor;\r\n        headerArrayUint8[2] = 0; // unused for now\r\n        headerArrayUint8[3] = 0; // unused for now\r\n        headerArrayUint32[1] = header.maxSectionCount;\r\n        headerArrayUint32[2] = header.sectionCount;\r\n        headerArrayUint32[3] = header.maxSplatCount;\r\n        headerArrayUint32[4] = header.splatCount;\r\n        headerArrayUint16[10] = header.compressionLevel;\r\n        headerArrayFloat32[6] = header.sceneCenter.x;\r\n        headerArrayFloat32[7] = header.sceneCenter.y;\r\n        headerArrayFloat32[8] = header.sceneCenter.z;\r\n        headerArrayFloat32[9] = header.minSphericalHarmonicsCoeff || -DefaultSphericalHarmonics8BitCompressionHalfRange;\r\n        headerArrayFloat32[10] = header.maxSphericalHarmonicsCoeff || DefaultSphericalHarmonics8BitCompressionHalfRange;\r\n    }\r\n\r\n    static parseSectionHeaders(header, buffer, offset = 0, secLoadedCountsToMax) {\r\n        const compressionLevel = header.compressionLevel;\r\n\r\n        const maxSectionCount = header.maxSectionCount;\r\n        const sectionHeaderArrayUint16 = new Uint16Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 2);\r\n        const sectionHeaderArrayUint32 = new Uint32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\r\n        const sectionHeaderArrayFloat32 = new Float32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\r\n\r\n        const sectionHeaders = [];\r\n        let sectionHeaderBase = 0;\r\n        let sectionHeaderBaseUint16 = sectionHeaderBase / 2;\r\n        let sectionHeaderBaseUint32 = sectionHeaderBase / 4;\r\n        let sectionBase = SplatBuffer.HeaderSizeBytes + header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes;\r\n        let splatCountOffset = 0;\r\n        for (let i = 0; i < maxSectionCount; i++) {\r\n            const maxSplatCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 1];\r\n            const bucketSize = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 2];\r\n            const bucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 3];\r\n            const bucketBlockSize = sectionHeaderArrayFloat32[sectionHeaderBaseUint32 + 4];\r\n            const halfBucketBlockSize = bucketBlockSize / 2.0;\r\n            const bucketStorageSizeBytes = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 10];\r\n            const compressionScaleRange = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 6] ||\r\n                                          SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\r\n            const fullBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 8];\r\n            const partiallyFilledBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 9];\r\n            const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\r\n            const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\r\n\r\n            const sphericalHarmonicsDegree = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 20];\r\n            const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree);\r\n\r\n            const splatDataStorageSizeBytes = bytesPerSplat * maxSplatCount;\r\n            const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;\r\n            const sectionHeader = {\r\n                bytesPerSplat: bytesPerSplat,\r\n                splatCountOffset: splatCountOffset,\r\n                splatCount: secLoadedCountsToMax ? maxSplatCount : 0,\r\n                maxSplatCount: maxSplatCount,\r\n                bucketSize: bucketSize,\r\n                bucketCount: bucketCount,\r\n                bucketBlockSize: bucketBlockSize,\r\n                halfBucketBlockSize: halfBucketBlockSize,\r\n                bucketStorageSizeBytes: bucketStorageSizeBytes,\r\n                bucketsStorageSizeBytes: bucketsStorageSizeBytes,\r\n                splatDataStorageSizeBytes: splatDataStorageSizeBytes,\r\n                storageSizeBytes: storageSizeBytes,\r\n                compressionScaleRange: compressionScaleRange,\r\n                compressionScaleFactor: halfBucketBlockSize / compressionScaleRange,\r\n                base: sectionBase,\r\n                bucketsBase: sectionBase + bucketsMetaDataSizeBytes,\r\n                dataBase: sectionBase + bucketsStorageSizeBytes,\r\n                fullBucketCount: fullBucketCount,\r\n                partiallyFilledBucketCount: partiallyFilledBucketCount,\r\n                sphericalHarmonicsDegree: sphericalHarmonicsDegree\r\n            };\r\n            sectionHeaders[i] = sectionHeader;\r\n            sectionBase += storageSizeBytes;\r\n            sectionHeaderBase += SplatBuffer.SectionHeaderSizeBytes;\r\n            sectionHeaderBaseUint16 = sectionHeaderBase / 2;\r\n            sectionHeaderBaseUint32 = sectionHeaderBase / 4;\r\n            splatCountOffset += maxSplatCount;\r\n        }\r\n\r\n        return sectionHeaders;\r\n    }\r\n\r\n\r\n    static writeSectionHeaderToBuffer(sectionHeader, compressionLevel, buffer, offset = 0) {\r\n        const sectionHeadeArrayUint16 = new Uint16Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 2);\r\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\r\n        const sectionHeadeArrayFloat32 = new Float32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\r\n\r\n        sectionHeadeArrayUint32[0] = sectionHeader.splatCount;\r\n        sectionHeadeArrayUint32[1] = sectionHeader.maxSplatCount;\r\n        sectionHeadeArrayUint32[2] = compressionLevel >= 1 ? sectionHeader.bucketSize : 0;\r\n        sectionHeadeArrayUint32[3] = compressionLevel >= 1 ? sectionHeader.bucketCount : 0;\r\n        sectionHeadeArrayFloat32[4] = compressionLevel >= 1 ? sectionHeader.bucketBlockSize : 0.0;\r\n        sectionHeadeArrayUint16[10] = compressionLevel >= 1 ? SplatBuffer.BucketStorageSizeBytes : 0;\r\n        sectionHeadeArrayUint32[6] = compressionLevel >= 1 ? sectionHeader.compressionScaleRange : 0;\r\n        sectionHeadeArrayUint32[7] = sectionHeader.storageSizeBytes;\r\n        sectionHeadeArrayUint32[8] = compressionLevel >= 1 ? sectionHeader.fullBucketCount : 0;\r\n        sectionHeadeArrayUint32[9] = compressionLevel >= 1 ? sectionHeader.partiallyFilledBucketCount : 0;\r\n        sectionHeadeArrayUint16[20] = sectionHeader.sphericalHarmonicsDegree;\r\n\r\n    }\r\n\r\n    static writeSectionHeaderSplatCountToBuffer(splatCount, buffer, offset = 0) {\r\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\r\n        sectionHeadeArrayUint32[0] = splatCount;\r\n    }\r\n\r\n    constructFromBuffer(bufferData, secLoadedCountsToMax) {\r\n        this.bufferData = bufferData;\r\n\r\n        this.globalSplatIndexToLocalSplatIndexMap = [];\r\n        this.globalSplatIndexToSectionMap = [];\r\n\r\n        const header = SplatBuffer.parseHeader(this.bufferData);\r\n        this.versionMajor = header.versionMajor;\r\n        this.versionMinor = header.versionMinor;\r\n        this.maxSectionCount = header.maxSectionCount;\r\n        this.sectionCount = secLoadedCountsToMax ? header.maxSectionCount : 0;\r\n        this.maxSplatCount = header.maxSplatCount;\r\n        this.splatCount = secLoadedCountsToMax ? header.maxSplatCount : 0;\r\n        this.compressionLevel = header.compressionLevel;\r\n        this.sceneCenter = new THREE.Vector3().copy(header.sceneCenter);\r\n        this.minSphericalHarmonicsCoeff = header.minSphericalHarmonicsCoeff;\r\n        this.maxSphericalHarmonicsCoeff = header.maxSphericalHarmonicsCoeff;\r\n\r\n        this.sections = SplatBuffer.parseSectionHeaders(header, this.bufferData, SplatBuffer.HeaderSizeBytes, secLoadedCountsToMax);\r\n\r\n        this.linkBufferArrays();\r\n        this.buildMaps();\r\n    }\r\n\r\n    static calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree) {\r\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\r\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\r\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\r\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\r\n        const sphericalHarmonicsComponentsPerSplat = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\r\n        const sphericalHarmonicsBytesPerSplat = SplatBuffer.CompressionLevels[compressionLevel].BytesPerSphericalHarmonicsComponent *\r\n                                                sphericalHarmonicsComponentsPerSplat;\r\n        const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation +\r\n                              bytesPerColor + sphericalHarmonicsBytesPerSplat;\r\n        return {\r\n            bytesPerCenter,\r\n            bytesPerScale,\r\n            bytesPerRotation,\r\n            bytesPerColor,\r\n            sphericalHarmonicsComponentsPerSplat,\r\n            sphericalHarmonicsBytesPerSplat,\r\n            bytesPerSplat\r\n        };\r\n    }\r\n\r\n    linkBufferArrays() {\r\n        for (let i = 0; i < this.maxSectionCount; i++) {\r\n            const section = this.sections[i];\r\n            section.bucketArray = new Float32Array(this.bufferData, section.bucketsBase,\r\n                                                   section.bucketCount * SplatBuffer.BucketStorageSizeFloats);\r\n            if (section.partiallyFilledBucketCount > 0) {\r\n                section.partiallyFilledBucketLengths = new Uint32Array(this.bufferData, section.base,\r\n                                                                       section.partiallyFilledBucketCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    buildMaps() {\r\n        let cumulativeSplatCount = 0;\r\n        for (let i = 0; i < this.maxSectionCount; i++) {\r\n            const section = this.sections[i];\r\n            for (let j = 0; j < section.maxSplatCount; j++) {\r\n                const globalSplatIndex = cumulativeSplatCount + j;\r\n                this.globalSplatIndexToLocalSplatIndexMap[globalSplatIndex] = j;\r\n                this.globalSplatIndexToSectionMap[globalSplatIndex] = i;\r\n            }\r\n            cumulativeSplatCount += section.maxSplatCount;\r\n        }\r\n    }\r\n\r\n    updateLoadedCounts(newSectionCount, newSplatCount) {\r\n        SplatBuffer.writeHeaderCountsToBuffer(newSectionCount, newSplatCount, this.bufferData);\r\n        this.sectionCount = newSectionCount;\r\n        this.splatCount = newSplatCount;\r\n    }\r\n\r\n    updateSectionLoadedCounts(sectionIndex, newSplatCount) {\r\n        const sectionHeaderOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * sectionIndex;\r\n        SplatBuffer.writeSectionHeaderSplatCountToBuffer(newSplatCount, this.bufferData, sectionHeaderOffset);\r\n        this.sections[sectionIndex].splatCount = newSplatCount;\r\n    }\r\n\r\n    static writeSplatDataToSectionBuffer = function() {\r\n\r\n        const tempCenterBuffer = new ArrayBuffer(12);\r\n        const tempScaleBuffer = new ArrayBuffer(12);\r\n        const tempRotationBuffer = new ArrayBuffer(16);\r\n        const tempColorBuffer = new ArrayBuffer(4);\r\n        const tempSHBuffer = new ArrayBuffer(256);\r\n        const tempRot = new THREE.Quaternion();\r\n        const tempScale = new THREE.Vector3();\r\n        const bucketCenterDelta = new THREE.Vector3();\r\n\r\n        const {\r\n            X: OFFSET_X, Y: OFFSET_Y, Z: OFFSET_Z,\r\n            SCALE0: OFFSET_SCALE0, SCALE1: OFFSET_SCALE1, SCALE2: OFFSET_SCALE2,\r\n            ROTATION0: OFFSET_ROT0, ROTATION1: OFFSET_ROT1, ROTATION2: OFFSET_ROT2, ROTATION3: OFFSET_ROT3,\r\n            FDC0: OFFSET_FDC0, FDC1: OFFSET_FDC1, FDC2: OFFSET_FDC2, OPACITY: OFFSET_OPACITY,\r\n            FRC0: OFFSET_FRC0, FRC9: OFFSET_FRC9,\r\n        } = UncompressedSplatArray.OFFSET;\r\n\r\n        const compressPositionOffset = (v, compressionScaleFactor, compressionScaleRange) => {\r\n            const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\r\n            v = Math.round(v * compressionScaleFactor) + compressionScaleRange;\r\n            return clamp(v, 0, doubleCompressionScaleRange);\r\n        };\r\n\r\n        return function(targetSplat, sectionBuffer, bufferOffset, compressionLevel, sphericalHarmonicsDegree,\r\n                        bucketCenter, compressionScaleFactor, compressionScaleRange,\r\n                        minSphericalHarmonicsCoeff = -DefaultSphericalHarmonics8BitCompressionHalfRange,\r\n                        maxSphericalHarmonicsCoeff = DefaultSphericalHarmonics8BitCompressionHalfRange) {\r\n\r\n            const sphericalHarmonicsComponentsPerSplat = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\r\n            const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\r\n            const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\r\n            const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\r\n            const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\r\n\r\n            const centerBase = bufferOffset;\r\n            const scaleBase = centerBase + bytesPerCenter;\r\n            const rotationBase = scaleBase + bytesPerScale;\r\n            const colorBase = rotationBase + bytesPerRotation;\r\n            const sphericalHarmonicsBase = colorBase + bytesPerColor;\r\n\r\n            if (targetSplat[OFFSET_ROT0] !== undefined) {\r\n                tempRot.set(targetSplat[OFFSET_ROT0], targetSplat[OFFSET_ROT1], targetSplat[OFFSET_ROT2], targetSplat[OFFSET_ROT3]);\r\n                tempRot.normalize();\r\n            } else {\r\n                tempRot.set(1.0, 0.0, 0.0, 0.0);\r\n            }\r\n\r\n            if (targetSplat[OFFSET_SCALE0] !== undefined) {\r\n                tempScale.set(targetSplat[OFFSET_SCALE0] || 0,\r\n                              targetSplat[OFFSET_SCALE1] || 0,\r\n                              targetSplat[OFFSET_SCALE2] || 0);\r\n            } else {\r\n                tempScale.set(0, 0, 0);\r\n            }\r\n\r\n            if (compressionLevel === 0) {\r\n                const center = new Float32Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\r\n                const rot = new Float32Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\r\n                const scale = new Float32Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\r\n\r\n                rot.set([tempRot.x, tempRot.y, tempRot.z, tempRot.w]);\r\n                scale.set([tempScale.x, tempScale.y, tempScale.z]);\r\n                center.set([targetSplat[OFFSET_X], targetSplat[OFFSET_Y], targetSplat[OFFSET_Z]]);\r\n\r\n                if (sphericalHarmonicsDegree > 0) {\r\n                    const shOut = new Float32Array(sectionBuffer, sphericalHarmonicsBase, sphericalHarmonicsComponentsPerSplat);\r\n                    if (sphericalHarmonicsDegree >= 1) {\r\n                            for (let s = 0; s < 9; s++) shOut[s] = targetSplat[OFFSET_FRC0 + s] || 0;\r\n                            if (sphericalHarmonicsDegree >= 2) {\r\n                                for (let s = 0; s < 15; s++) shOut[s + 9] = targetSplat[OFFSET_FRC9 + s] || 0;\r\n                            }\r\n                    }\r\n                }\r\n            } else {\r\n                const center = new Uint16Array(tempCenterBuffer, 0, SplatBuffer.CenterComponentCount);\r\n                const rot = new Uint16Array(tempRotationBuffer, 0, SplatBuffer.RotationComponentCount);\r\n                const scale = new Uint16Array(tempScaleBuffer, 0, SplatBuffer.ScaleComponentCount);\r\n\r\n                rot.set([toHalfFloat(tempRot.x), toHalfFloat(tempRot.y), toHalfFloat(tempRot.z), toHalfFloat(tempRot.w)]);\r\n                scale.set([toHalfFloat(tempScale.x), toHalfFloat(tempScale.y), toHalfFloat(tempScale.z)]);\r\n\r\n                bucketCenterDelta.set(targetSplat[OFFSET_X], targetSplat[OFFSET_Y], targetSplat[OFFSET_Z]).sub(bucketCenter);\r\n                bucketCenterDelta.x = compressPositionOffset(bucketCenterDelta.x, compressionScaleFactor, compressionScaleRange);\r\n                bucketCenterDelta.y = compressPositionOffset(bucketCenterDelta.y, compressionScaleFactor, compressionScaleRange);\r\n                bucketCenterDelta.z = compressPositionOffset(bucketCenterDelta.z, compressionScaleFactor, compressionScaleRange);\r\n                center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\r\n\r\n                if (sphericalHarmonicsDegree > 0) {\r\n                    const SHArrayType = compressionLevel === 1 ? Uint16Array : Uint8Array;\r\n                    const bytesPerSHComponent = compressionLevel === 1 ? 2 : 1;\r\n                    const shOut = new SHArrayType(tempSHBuffer, 0, sphericalHarmonicsComponentsPerSplat);\r\n                    if (sphericalHarmonicsDegree >= 1) {\r\n                        for (let s = 0; s < 9; s++) {\r\n                            const srcVal = targetSplat[OFFSET_FRC0 + s] || 0;\r\n                            shOut[s] = compressionLevel === 1 ? toHalfFloat(srcVal) :\r\n                                       toUint8(srcVal, minSphericalHarmonicsCoeff, maxSphericalHarmonicsCoeff);\r\n                        }\r\n                        const degree1ByteCount = 9 * bytesPerSHComponent;\r\n                        copyBetweenBuffers(shOut.buffer, 0, sectionBuffer, sphericalHarmonicsBase, degree1ByteCount);\r\n                        if (sphericalHarmonicsDegree >= 2) {\r\n                            for (let s = 0; s < 15; s++) {\r\n                                const srcVal = targetSplat[OFFSET_FRC9 + s] || 0;\r\n                                shOut[s + 9] = compressionLevel === 1 ? toHalfFloat(srcVal) :\r\n                                               toUint8(srcVal, minSphericalHarmonicsCoeff, maxSphericalHarmonicsCoeff);\r\n                            }\r\n                            copyBetweenBuffers(shOut.buffer, degree1ByteCount, sectionBuffer,\r\n                                               sphericalHarmonicsBase + degree1ByteCount, 15 * bytesPerSHComponent);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                copyBetweenBuffers(center.buffer, 0, sectionBuffer, centerBase, 6);\r\n                copyBetweenBuffers(scale.buffer, 0, sectionBuffer, scaleBase, 6);\r\n                copyBetweenBuffers(rot.buffer, 0, sectionBuffer, rotationBase, 8);\r\n            }\r\n\r\n            const rgba = new Uint8ClampedArray(tempColorBuffer, 0, 4);\r\n            rgba.set([targetSplat[OFFSET_FDC0] || 0, targetSplat[OFFSET_FDC1] || 0, targetSplat[OFFSET_FDC2] || 0]);\r\n            rgba[3] = targetSplat[OFFSET_OPACITY] || 0;\r\n\r\n            copyBetweenBuffers(rgba.buffer, 0, sectionBuffer, colorBase, 4);\r\n        };\r\n\r\n    }();\r\n\r\n    static generateFromUncompressedSplatArrays(splatArrays, minimumAlpha, compressionLevel,\r\n                                               sceneCenter, blockSize, bucketSize, options = []) {\r\n\r\n        let shDegree = 0;\r\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\r\n            const splatArray = splatArrays[sa];\r\n            shDegree = Math.max(splatArray.sphericalHarmonicsDegree, shDegree);\r\n        }\r\n\r\n        let minSphericalHarmonicsCoeff;\r\n        let maxSphericalHarmonicsCoeff;\r\n\r\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\r\n            const splatArray = splatArrays[sa];\r\n            for (let i = 0; i < splatArray.splats.length; i++) {\r\n                const splat = splatArray.splats[i];\r\n                for (let sc = UncompressedSplatArray.OFFSET.FRC0; sc < UncompressedSplatArray.OFFSET.FRC23 && sc < splat.length; sc++) {\r\n                    if (!minSphericalHarmonicsCoeff || splat[sc] < minSphericalHarmonicsCoeff) {\r\n                        minSphericalHarmonicsCoeff = splat[sc];\r\n                    }\r\n                    if (!maxSphericalHarmonicsCoeff || splat[sc] > maxSphericalHarmonicsCoeff) {\r\n                        maxSphericalHarmonicsCoeff = splat[sc];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        minSphericalHarmonicsCoeff = minSphericalHarmonicsCoeff || -DefaultSphericalHarmonics8BitCompressionHalfRange;\r\n        maxSphericalHarmonicsCoeff = maxSphericalHarmonicsCoeff || DefaultSphericalHarmonics8BitCompressionHalfRange;\r\n\r\n        const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(compressionLevel, shDegree);\r\n        const compressionScaleRange = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\r\n\r\n        const sectionBuffers = [];\r\n        const sectionHeaderBuffers = [];\r\n        let totalSplatCount = 0;\r\n\r\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\r\n            const splatArray = splatArrays[sa];\r\n            const validSplats = new UncompressedSplatArray(shDegree);\r\n            for (let i = 0; i < splatArray.splatCount; i++) {\r\n                const targetSplat = splatArray.splats[i];\r\n                if ((targetSplat[UncompressedSplatArray.OFFSET.OPACITY] || 0) >= minimumAlpha) {\r\n                    validSplats.addSplat(targetSplat);\r\n                }\r\n            }\r\n\r\n            const sectionOptions = options[sa] || {};\r\n            const sectionBlockSize = (sectionOptions.blockSizeFactor || 1) * (blockSize || SplatBuffer.BucketBlockSize);\r\n            const sectionBucketSize = Math.ceil((sectionOptions.bucketSizeFactor || 1) * (bucketSize || SplatBuffer.BucketSize));\r\n\r\n            const bucketInfo = SplatBuffer.computeBucketsForUncompressedSplatArray(validSplats, sectionBlockSize, sectionBucketSize);\r\n            const fullBucketCount = bucketInfo.fullBuckets.length;\r\n            const partiallyFullBucketLengths = bucketInfo.partiallyFullBuckets.map((bucket) => bucket.splats.length);\r\n            const partiallyFilledBucketCount = partiallyFullBucketLengths.length;\r\n            const buckets = [...bucketInfo.fullBuckets, ...bucketInfo.partiallyFullBuckets];\r\n\r\n            const sectionDataSizeBytes = validSplats.splats.length * bytesPerSplat;\r\n            const bucketMetaDataSizeBytes = partiallyFilledBucketCount * 4;\r\n            const bucketDataBytes = compressionLevel >= 1 ? buckets.length *\r\n                                                            SplatBuffer.BucketStorageSizeBytes + bucketMetaDataSizeBytes : 0;\r\n            const sectionSizeBytes = sectionDataSizeBytes + bucketDataBytes;\r\n            const sectionBuffer = new ArrayBuffer(sectionSizeBytes);\r\n\r\n            const compressionScaleFactor = compressionScaleRange / (sectionBlockSize * 0.5);\r\n            const bucketCenter = new THREE.Vector3();\r\n\r\n            let outSplatCount = 0;\r\n            for (let b = 0; b < buckets.length; b++) {\r\n                const bucket = buckets[b];\r\n                bucketCenter.fromArray(bucket.center);\r\n                for (let i = 0; i < bucket.splats.length; i++) {\r\n                    let row = bucket.splats[i];\r\n                    const targetSplat = validSplats.splats[row];\r\n                    const bufferOffset = bucketDataBytes + outSplatCount * bytesPerSplat;\r\n                    SplatBuffer.writeSplatDataToSectionBuffer(targetSplat, sectionBuffer, bufferOffset, compressionLevel, shDegree,\r\n                                                              bucketCenter, compressionScaleFactor, compressionScaleRange,\r\n                                                              minSphericalHarmonicsCoeff, maxSphericalHarmonicsCoeff);\r\n                    outSplatCount++;\r\n                }\r\n            }\r\n            totalSplatCount += outSplatCount;\r\n\r\n            if (compressionLevel >= 1) {\r\n                const bucketMetaDataArray = new Uint32Array(sectionBuffer, 0, partiallyFullBucketLengths.length * 4);\r\n                for (let pfb = 0; pfb < partiallyFullBucketLengths.length; pfb ++) {\r\n                    bucketMetaDataArray[pfb] = partiallyFullBucketLengths[pfb];\r\n                }\r\n                const bucketArray = new Float32Array(sectionBuffer, bucketMetaDataSizeBytes,\r\n                                                     buckets.length * SplatBuffer.BucketStorageSizeFloats);\r\n                for (let b = 0; b < buckets.length; b++) {\r\n                    const bucket = buckets[b];\r\n                    const base = b * 3;\r\n                    bucketArray[base] = bucket.center[0];\r\n                    bucketArray[base + 1] = bucket.center[1];\r\n                    bucketArray[base + 2] = bucket.center[2];\r\n                }\r\n            }\r\n            sectionBuffers.push(sectionBuffer);\r\n\r\n            const sectionHeaderBuffer = new ArrayBuffer(SplatBuffer.SectionHeaderSizeBytes);\r\n            SplatBuffer.writeSectionHeaderToBuffer({\r\n                maxSplatCount: outSplatCount,\r\n                splatCount: outSplatCount,\r\n                bucketSize: sectionBucketSize,\r\n                bucketCount: buckets.length,\r\n                bucketBlockSize: sectionBlockSize,\r\n                compressionScaleRange: compressionScaleRange,\r\n                storageSizeBytes: sectionSizeBytes,\r\n                fullBucketCount: fullBucketCount,\r\n                partiallyFilledBucketCount: partiallyFilledBucketCount,\r\n                sphericalHarmonicsDegree: shDegree\r\n            }, compressionLevel, sectionHeaderBuffer, 0);\r\n            sectionHeaderBuffers.push(sectionHeaderBuffer);\r\n\r\n        }\r\n\r\n        let sectionsCumulativeSizeBytes = 0;\r\n        for (let sectionBuffer of sectionBuffers) sectionsCumulativeSizeBytes += sectionBuffer.byteLength;\r\n        const unifiedBufferSize = SplatBuffer.HeaderSizeBytes +\r\n                                  SplatBuffer.SectionHeaderSizeBytes * sectionBuffers.length + sectionsCumulativeSizeBytes;\r\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\r\n\r\n        SplatBuffer.writeHeaderToBuffer({\r\n            versionMajor: 0,\r\n            versionMinor: 1,\r\n            maxSectionCount: sectionBuffers.length,\r\n            sectionCount: sectionBuffers.length,\r\n            maxSplatCount: totalSplatCount,\r\n            splatCount: totalSplatCount,\r\n            compressionLevel: compressionLevel,\r\n            sceneCenter: sceneCenter,\r\n            minSphericalHarmonicsCoeff: minSphericalHarmonicsCoeff,\r\n            maxSphericalHarmonicsCoeff: maxSphericalHarmonicsCoeff\r\n        }, unifiedBuffer);\r\n\r\n        let currentUnifiedBase = SplatBuffer.HeaderSizeBytes;\r\n        for (let sectionHeaderBuffer of sectionHeaderBuffers) {\r\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, SplatBuffer.SectionHeaderSizeBytes).set(new Uint8Array(sectionHeaderBuffer));\r\n            currentUnifiedBase += SplatBuffer.SectionHeaderSizeBytes;\r\n        }\r\n\r\n        for (let sectionBuffer of sectionBuffers) {\r\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, sectionBuffer.byteLength).set(new Uint8Array(sectionBuffer));\r\n            currentUnifiedBase += sectionBuffer.byteLength;\r\n        }\r\n\r\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\r\n        return splatBuffer;\r\n    }\r\n\r\n    static computeBucketsForUncompressedSplatArray(splatArray, blockSize, bucketSize) {\r\n        let splatCount = splatArray.splatCount;\r\n        const halfBlockSize = blockSize / 2.0;\r\n\r\n        const min = new THREE.Vector3();\r\n        const max = new THREE.Vector3();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const targetSplat = splatArray.splats[i];\r\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\r\n            if (i === 0 || center[0] < min.x) min.x = center[0];\r\n            if (i === 0 || center[0] > max.x) max.x = center[0];\r\n            if (i === 0 || center[1] < min.y) min.y = center[1];\r\n            if (i === 0 || center[1] > max.y) max.y = center[1];\r\n            if (i === 0 || center[2] < min.z) min.z = center[2];\r\n            if (i === 0 || center[2] > max.z) max.z = center[2];\r\n        }\r\n\r\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\r\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\r\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\r\n\r\n        const blockCenter = new THREE.Vector3();\r\n        const fullBuckets = [];\r\n        const partiallyFullBuckets = {};\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const targetSplat = splatArray.splats[i];\r\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\r\n            const xBlock = Math.floor((center[0] - min.x) / blockSize);\r\n            const yBlock = Math.floor((center[1] - min.y) / blockSize);\r\n            const zBlock = Math.floor((center[2] - min.z) / blockSize);\r\n\r\n            blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\r\n            blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\r\n            blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\r\n\r\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\r\n            let bucket = partiallyFullBuckets[bucketId];\r\n            if (!bucket) {\r\n                partiallyFullBuckets[bucketId] = bucket = {\r\n                    'splats': [],\r\n                    'center': blockCenter.toArray()\r\n                };\r\n            }\r\n\r\n            bucket.splats.push(i);\r\n            if (bucket.splats.length >= bucketSize) {\r\n                fullBuckets.push(bucket);\r\n                partiallyFullBuckets[bucketId] = null;\r\n            }\r\n        }\r\n\r\n        const partiallyFullBucketArray = [];\r\n        for (let bucketId in partiallyFullBuckets) {\r\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\r\n                const bucket = partiallyFullBuckets[bucketId];\r\n                if (bucket) {\r\n                    partiallyFullBucketArray.push(bucket);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            'fullBuckets': fullBuckets,\r\n            'partiallyFullBuckets': partiallyFullBucketArray,\r\n        };\r\n    }\r\n\r\n}\r\n","import { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { clamp } from '../../Util.js';\r\nimport * as THREE from 'three';\r\n\r\nconst HeaderMagicBytes = new Uint8Array([112, 108, 121, 10]);\r\nconst HeaderEndTokenBytes = new Uint8Array([10, 101, 110, 100, 95, 104, 101, 97, 100, 101, 114, 10]);\r\nconst HeaderEndToken = 'end_header';\r\n\r\nconst DataTypeMap = new Map([\r\n  ['char', Int8Array],\r\n  ['uchar', Uint8Array],\r\n  ['short', Int16Array],\r\n  ['ushort', Uint16Array],\r\n  ['int', Int32Array],\r\n  ['uint', Uint32Array],\r\n  ['float', Float32Array],\r\n  ['double', Float64Array],\r\n]);\r\n\r\nconst unpackUnorm = (value, bits) => {\r\n  const t = (1 << bits) - 1;\r\n  return (value & t) / t;\r\n};\r\n\r\nconst unpack111011 = (result, value) => {\r\n  result.x = unpackUnorm(value >>> 21, 11);\r\n  result.y = unpackUnorm(value >>> 11, 10);\r\n  result.z = unpackUnorm(value, 11);\r\n};\r\n\r\nconst unpack8888 = (result, value) => {\r\n  result.x = unpackUnorm(value >>> 24, 8);\r\n  result.y = unpackUnorm(value >>> 16, 8);\r\n  result.z = unpackUnorm(value >>> 8, 8);\r\n  result.w = unpackUnorm(value, 8);\r\n};\r\n\r\n// unpack quaternion with 2,10,10,10 format (largest element, 3x10bit element)\r\nconst unpackRot = (result, value) => {\r\n  const norm = 1.0 / (Math.sqrt(2) * 0.5);\r\n  const a = (unpackUnorm(value >>> 20, 10) - 0.5) * norm;\r\n  const b = (unpackUnorm(value >>> 10, 10) - 0.5) * norm;\r\n  const c = (unpackUnorm(value, 10) - 0.5) * norm;\r\n  const m = Math.sqrt(1.0 - (a * a + b * b + c * c));\r\n\r\n  switch (value >>> 30) {\r\n    case 0:\r\n      result.set(m, a, b, c);\r\n      break;\r\n    case 1:\r\n      result.set(a, m, b, c);\r\n      break;\r\n    case 2:\r\n      result.set(a, b, m, c);\r\n      break;\r\n    case 3:\r\n      result.set(a, b, c, m);\r\n      break;\r\n  }\r\n};\r\n\r\nconst lerp = (a, b, t) => {\r\n  return a * (1 - t) + b * t;\r\n};\r\n\r\nconst getElementPropStorage = (element, name) => {\r\n  return element.properties.find((p) => p.name === name && p.storage)\r\n    ?.storage;\r\n};\r\n\r\nexport class PlayCanvasCompressedPlyParser {\r\n\r\n  static decodeHeaderText(headerText) {\r\n\r\n    let element;\r\n    let chunkElement;\r\n    let vertexElement;\r\n\r\n    const headerLines = headerText.split('\\n').filter((line) => !line.startsWith('comment '));\r\n\r\n    let bytesPerSplat = 0;\r\n    let done = false;\r\n    for (let i = 1; i < headerLines.length; ++i) {\r\n      const words = headerLines[i].split(' ');\r\n\r\n      switch (words[0]) {\r\n        case 'format':\r\n          if (words[1] !== 'binary_little_endian') {\r\n            throw new Error('Unsupported ply format');\r\n          }\r\n          break;\r\n        case 'element':\r\n          element = {\r\n            name: words[1],\r\n            count: parseInt(words[2], 10),\r\n            properties: [],\r\n            storageSizeBytes: 0\r\n          };\r\n          if (element.name === 'chunk') chunkElement = element;\r\n          else if (element.name === 'vertex') vertexElement = element;\r\n          break;\r\n        case 'property': {\r\n          if (!DataTypeMap.has(words[1])) {\r\n            throw new Error(\r\n              `Unrecognized property data type '${words[1]}' in ply header`\r\n            );\r\n          }\r\n          const StorageType = DataTypeMap.get(words[1]);\r\n          const storageSizeByes = StorageType.BYTES_PER_ELEMENT * element.count;\r\n          if (element.name === 'vertex') bytesPerSplat += StorageType.BYTES_PER_ELEMENT;\r\n          element.properties.push({\r\n            type: words[1],\r\n            name: words[2],\r\n            storage: null,\r\n            byteSize: StorageType.BYTES_PER_ELEMENT,\r\n            storageSizeByes: storageSizeByes\r\n          });\r\n          element.storageSizeBytes += storageSizeByes;\r\n          break;\r\n        }\r\n        case HeaderEndToken:\r\n          done = true;\r\n        break;\r\n        default:\r\n          throw new Error(\r\n            `Unrecognized header value '${words[0]}' in ply header`\r\n          );\r\n      }\r\n      if (done) break;\r\n    }\r\n\r\n    return {\r\n      'chunkElement': chunkElement,\r\n      'vertexElement': vertexElement,\r\n      'bytesPerSplat': bytesPerSplat,\r\n      'headerSizeBytes': headerText.indexOf(HeaderEndToken) + HeaderEndToken.length + 1,\r\n      'sphericalHarmonicsDegree': 0\r\n    };\r\n  }\r\n\r\n  static decodeHeader(plyBuffer) {\r\n\r\n    /**\r\n     * Searches for the first occurrence of a sequence within a buffer.\r\n     * @example\r\n     * find(new Uint8Array([1, 2, 3, 4]), new Uint8Array([3, 4])); // 2\r\n     * @param {Uint8Array} buf - The buffer in which to search.\r\n     * @param {Uint8Array} search - The sequence to search for.\r\n     * @return {number} The index of the first occurrence of the search sequence in the buffer, or -1 if not found.\r\n     */\r\n    const find = (buf, search) => {\r\n      const endIndex = buf.length - search.length;\r\n      let i;\r\n      let j;\r\n      for (i = 0; i <= endIndex; ++i) {\r\n        for (j = 0; j < search.length; ++j) {\r\n          if (buf[i + j] !== search[j]) {\r\n            break;\r\n          }\r\n        }\r\n        if (j === search.length) {\r\n          return i;\r\n        }\r\n      }\r\n      return -1;\r\n    };\r\n\r\n    /**\r\n     * Checks if array 'a' starts with the same elements as array 'b'.\r\n     * @example\r\n     * startsWith(new Uint8Array([1, 2, 3, 4]), new Uint8Array([1, 2])); // true\r\n     * @param {Uint8Array} a - The array to check against.\r\n     * @param {Uint8Array} b - The array of elements to look for at the start of 'a'.\r\n     * @return {boolean} - True if 'a' starts with all elements of 'b', otherwise false.\r\n     */\r\n    const startsWith = (a, b) => {\r\n      if (a.length < b.length) {\r\n        return false;\r\n      }\r\n\r\n      for (let i = 0; i < b.length; ++i) {\r\n        if (a[i] !== b[i]) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    };\r\n\r\n    let buf = new Uint8Array(plyBuffer);\r\n    let endHeaderTokenOffset;\r\n\r\n    if (buf.length >= HeaderMagicBytes.length && !startsWith(buf, HeaderMagicBytes)) {\r\n      throw new Error('Invalid PLY header');\r\n    }\r\n\r\n    endHeaderTokenOffset = find(buf, HeaderEndTokenBytes);\r\n    if (endHeaderTokenOffset === -1) {\r\n      throw new Error('End of PLY header not found');\r\n    }\r\n\r\n    const headerText = new TextDecoder('ascii').decode(\r\n      buf.slice(0, endHeaderTokenOffset)\r\n    );\r\n\r\n    const {chunkElement, vertexElement, bytesPerSplat} = PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\r\n\r\n    return {\r\n      'headerSizeBytes': endHeaderTokenOffset + HeaderEndTokenBytes.length,\r\n      'bytesPerSplat': bytesPerSplat,\r\n      'chunkElement': chunkElement,\r\n      'vertexElement': vertexElement\r\n    };\r\n  }\r\n\r\n  static readElementData(element, readBuffer, readOffset, fromIndex, toIndex, propertyFilter = null) {\r\n\r\n    let dataView = readBuffer instanceof DataView ? readBuffer : new DataView(readBuffer);\r\n\r\n    fromIndex = fromIndex || 0;\r\n    toIndex = toIndex || element.count - 1;\r\n    for (let e = fromIndex; e <= toIndex; ++e) {\r\n      for (let j = 0; j < element.properties.length; ++j) {\r\n        const property = element.properties[j];\r\n\r\n        const StorageType = DataTypeMap.get(property.type);\r\n        const requiredStorageSizeBytes = StorageType.BYTES_PER_ELEMENT * element.count;\r\n        if ((!property.storage || property.storage.byteLength < requiredStorageSizeBytes) &&\r\n            (!propertyFilter || propertyFilter(property.name))) {\r\n          property.storage = new StorageType(element.count);\r\n        }\r\n\r\n        if (property.storage) {\r\n          switch (property.type) {\r\n            case 'char':\r\n              property.storage[e] = dataView.getInt8(readOffset);\r\n              break;\r\n            case 'uchar':\r\n              property.storage[e] = dataView.getUint8(readOffset);\r\n              break;\r\n            case 'short':\r\n              property.storage[e] = dataView.getInt16(readOffset, true);\r\n              break;\r\n            case 'ushort':\r\n              property.storage[e] = dataView.getUint16(readOffset, true);\r\n              break;\r\n            case 'int':\r\n              property.storage[e] = dataView.getInt32(readOffset, true);\r\n              break;\r\n            case 'uint':\r\n              property.storage[e] = dataView.getUint32(readOffset, true);\r\n              break;\r\n            case 'float':\r\n              property.storage[e] = dataView.getFloat32(readOffset, true);\r\n              break;\r\n            case 'double':\r\n              property.storage[e] = dataView.getFloat64(readOffset, true);\r\n              break;\r\n          }\r\n        }\r\n\r\n        readOffset += property.byteSize;\r\n      }\r\n    }\r\n\r\n    return readOffset;\r\n  }\r\n\r\n  static readPly(plyBuffer, propertyFilter = null) {\r\n\r\n    const header = PlayCanvasCompressedPlyParser.decodeHeader(plyBuffer);\r\n\r\n    let readIndex = PlayCanvasCompressedPlyParser.readElementData(header.chunkElement, plyBuffer,\r\n                                                                  header.headerSizeBytes, null, null, propertyFilter);\r\n    PlayCanvasCompressedPlyParser.readElementData(header.vertexElement, plyBuffer, readIndex, null, null, propertyFilter);\r\n\r\n    return {\r\n      'chunkElement': header.chunkElement,\r\n      'vertexElement': header.vertexElement\r\n    };\r\n  }\r\n\r\n  static getElementStorageArrays(chunkElement, vertexElement) {\r\n    const minX = getElementPropStorage(chunkElement, 'min_x');\r\n    const minY = getElementPropStorage(chunkElement, 'min_y');\r\n    const minZ = getElementPropStorage(chunkElement, 'min_z');\r\n    const maxX = getElementPropStorage(chunkElement, 'max_x');\r\n    const maxY = getElementPropStorage(chunkElement, 'max_y');\r\n    const maxZ = getElementPropStorage(chunkElement, 'max_z');\r\n    const minScaleX = getElementPropStorage(chunkElement, 'min_scale_x');\r\n    const minScaleY = getElementPropStorage(chunkElement, 'min_scale_y');\r\n    const minScaleZ = getElementPropStorage(chunkElement, 'min_scale_z');\r\n    const maxScaleX = getElementPropStorage(chunkElement, 'max_scale_x');\r\n    const maxScaleY = getElementPropStorage(chunkElement, 'max_scale_y');\r\n    const maxScaleZ = getElementPropStorage(chunkElement, 'max_scale_z');\r\n    const position = getElementPropStorage(vertexElement, 'packed_position');\r\n    const rotation = getElementPropStorage(vertexElement, 'packed_rotation');\r\n    const scale = getElementPropStorage(vertexElement, 'packed_scale');\r\n    const color = getElementPropStorage(vertexElement, 'packed_color');\r\n    return {\r\n      positionExtremes: {\r\n        minX, maxX,\r\n        minY, maxY,\r\n        minZ, maxZ\r\n      },\r\n      scaleExtremes: {\r\n        minScaleX, maxScaleX, minScaleY,\r\n        maxScaleY, minScaleZ, maxScaleZ\r\n      },\r\n      position,\r\n      rotation,\r\n      scale,\r\n      color\r\n    };\r\n  }\r\n\r\n  static decompressSplat = function() {\r\n\r\n    const p = new THREE.Vector3();\r\n    const r = new THREE.Quaternion();\r\n    const s = new THREE.Vector3();\r\n    const c = new THREE.Vector4();\r\n\r\n    const OFFSET = UncompressedSplatArray.OFFSET;\r\n\r\n    return function(index, chunkSplatIndexOffset, positionArray, positionExtremes, scaleArray, scaleExtremes,\r\n                    rotationArray, colorArray, outSplat) {\r\n      outSplat = outSplat || UncompressedSplatArray.createSplat();\r\n\r\n      const chunkIndex = Math.floor((chunkSplatIndexOffset + index) / 256);\r\n\r\n      unpack111011(p, positionArray[index]);\r\n      unpackRot(r, rotationArray[index]);\r\n      unpack111011(s, scaleArray[index]);\r\n      unpack8888(c, colorArray[index]);\r\n\r\n      outSplat[OFFSET.X] = lerp(positionExtremes.minX[chunkIndex], positionExtremes.maxX[chunkIndex], p.x);\r\n      outSplat[OFFSET.Y] = lerp(positionExtremes.minY[chunkIndex], positionExtremes.maxY[chunkIndex], p.y);\r\n      outSplat[OFFSET.Z] = lerp(positionExtremes.minZ[chunkIndex], positionExtremes.maxZ[chunkIndex], p.z);\r\n\r\n      outSplat[OFFSET.ROTATION0] = r.x;\r\n      outSplat[OFFSET.ROTATION1] = r.y;\r\n      outSplat[OFFSET.ROTATION2] = r.z;\r\n      outSplat[OFFSET.ROTATION3] = r.w;\r\n\r\n      outSplat[OFFSET.SCALE0] = Math.exp(lerp(scaleExtremes.minScaleX[chunkIndex], scaleExtremes.maxScaleX[chunkIndex], s.x));\r\n      outSplat[OFFSET.SCALE1] = Math.exp(lerp(scaleExtremes.minScaleY[chunkIndex], scaleExtremes.maxScaleY[chunkIndex], s.y));\r\n      outSplat[OFFSET.SCALE2] = Math.exp(lerp(scaleExtremes.minScaleZ[chunkIndex], scaleExtremes.maxScaleZ[chunkIndex], s.z));\r\n\r\n      outSplat[OFFSET.FDC0] = clamp(Math.floor(c.x * 255), 0, 255);\r\n      outSplat[OFFSET.FDC1] = clamp(Math.floor(c.y * 255), 0, 255);\r\n      outSplat[OFFSET.FDC2] = clamp(Math.floor(c.z * 255), 0, 255);\r\n      outSplat[OFFSET.OPACITY] = clamp(Math.floor(c.w * 255), 0, 255);\r\n\r\n      return outSplat;\r\n    };\r\n\r\n  }();\r\n\r\n  static parseToUncompressedSplatBufferSection(chunkElement, vertexElement, fromIndex, toIndex, chunkSplatIndexOffset,\r\n                                               vertexDataBuffer, veretxReadOffset, outBuffer, outOffset, propertyFilter = null) {\r\n\r\n    PlayCanvasCompressedPlyParser.readElementData(vertexElement, vertexDataBuffer, veretxReadOffset, fromIndex, toIndex, propertyFilter);\r\n\r\n    const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\r\n\r\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\r\n      PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\r\n\r\n    const tempSplat = UncompressedSplatArray.createSplat();\r\n\r\n    for (let i = fromIndex; i <= toIndex; ++i) {\r\n      PlayCanvasCompressedPlyParser.decompressSplat(i, chunkSplatIndexOffset, position, positionExtremes,\r\n                                                    scale, scaleExtremes, rotation, color, tempSplat);\r\n      const outBase = i * outBytesPerSplat + outOffset;\r\n      SplatBuffer.writeSplatDataToSectionBuffer(tempSplat, outBuffer, outBase, 0, 0);\r\n    }\r\n  }\r\n\r\n  static parseToUncompressedSplatArraySection(chunkElement, vertexElement, fromIndex, toIndex, chunkSplatIndexOffset,\r\n                                              vertexDataBuffer, veretxReadOffset, splatArray, propertyFilter = null) {\r\n\r\n    PlayCanvasCompressedPlyParser.readElementData(vertexElement, vertexDataBuffer, veretxReadOffset, fromIndex, toIndex, propertyFilter);\r\n\r\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\r\n      PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\r\n\r\n    for (let i = fromIndex; i <= toIndex; ++i) {\r\n      const tempSplat = UncompressedSplatArray.createSplat();\r\n      PlayCanvasCompressedPlyParser.decompressSplat(i, chunkSplatIndexOffset, position, positionExtremes,\r\n                                                    scale, scaleExtremes, rotation, color, tempSplat);\r\n      splatArray.addSplat(tempSplat);\r\n    }\r\n  }\r\n\r\n  static parseToUncompressedSplatArray(plyBuffer) {\r\n    const { chunkElement, vertexElement } = PlayCanvasCompressedPlyParser.readPly(plyBuffer);\r\n\r\n    const splatArray = new UncompressedSplatArray();\r\n\r\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\r\n      PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\r\n\r\n    for (let i = 0; i < vertexElement.count; ++i) {\r\n\r\n      splatArray.addDefaultSplat();\r\n      const newSplat = splatArray.getSplat(splatArray.splatCount - 1);\r\n\r\n      PlayCanvasCompressedPlyParser.decompressSplat(i, 0, position, positionExtremes, scale, scaleExtremes, rotation, color, newSplat);\r\n    }\r\n\r\n    const mat = new THREE.Matrix4();\r\n    mat.identity();\r\n\r\n    return splatArray;\r\n  }\r\n\r\n}\r\n","export const PlyFormat = {\r\n    'INRIAV1': 0,\r\n    'INRIAV2': 1,\r\n    'PlayCanvasCompressed': 2\r\n};\r\n","import { PlyFormat } from './PlyFormat.js';\r\n\r\nconst [\r\n        FieldSizeIdDouble, FieldSizeIdInt, FieldSizeIdUInt, FieldSizeIdFloat, FieldSizeIdShort, FieldSizeIdUShort, FieldSizeIdUChar\r\n      ] = [0, 1, 2, 3, 4, 5, 6];\r\n\r\nconst FieldSizeStringMap = {\r\n    'double': FieldSizeIdDouble,\r\n    'int': FieldSizeIdInt,\r\n    'uint': FieldSizeIdUInt,\r\n    'float': FieldSizeIdFloat,\r\n    'short': FieldSizeIdShort,\r\n    'ushort': FieldSizeIdUShort,\r\n    'uchar': FieldSizeIdUChar,\r\n};\r\n\r\nconst FieldSize = {\r\n    [FieldSizeIdDouble]: 8,\r\n    [FieldSizeIdInt]: 4,\r\n    [FieldSizeIdUInt]: 4,\r\n    [FieldSizeIdFloat]: 4,\r\n    [FieldSizeIdShort]: 2,\r\n    [FieldSizeIdUShort]: 2,\r\n    [FieldSizeIdUChar]: 1,\r\n};\r\n\r\nexport class PlyParserUtils {\r\n\r\n    static HeaderEndToken = 'end_header';\r\n\r\n    constructor() {\r\n    }\r\n\r\n    decodeSectionHeader(headerLines, fieldNameIdMap, headerStartLine = 0) {\r\n\r\n        const extractedLines = [];\r\n\r\n        let processingSection = false;\r\n        let headerEndLine = -1;\r\n        let vertexCount = 0;\r\n        let endOfHeader = false;\r\n        let sectionName = null;\r\n\r\n        const fieldIds = [];\r\n        const fieldTypes = [];\r\n        const allFieldNames = [];\r\n        const usedFieldNames = [];\r\n        const fieldTypesByName = {};\r\n\r\n        for (let i = headerStartLine; i < headerLines.length; i++) {\r\n            const line = headerLines[i].trim();\r\n            if (line.startsWith('element')) {\r\n                if (processingSection) {\r\n                    headerEndLine--;\r\n                    break;\r\n                } else {\r\n                    processingSection = true;\r\n                    headerStartLine = i;\r\n                    headerEndLine = i;\r\n                    const lineComponents = line.split(' ');\r\n                    let validComponents = 0;\r\n                    for (let lineComponent of lineComponents) {\r\n                        const trimmedComponent = lineComponent.trim();\r\n                        if (trimmedComponent.length > 0) {\r\n                            validComponents++;\r\n                            if (validComponents === 2) {\r\n                                sectionName = trimmedComponent;\r\n                            } else if (validComponents === 3) {\r\n                                vertexCount = parseInt(trimmedComponent);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else if (line.startsWith('property')) {\r\n                const fieldMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\r\n                if (fieldMatch) {\r\n                    const fieldTypeStr = fieldMatch[2];\r\n                    const fieldName = fieldMatch[3];\r\n                    allFieldNames.push(fieldName);\r\n                    const fieldId = fieldNameIdMap[fieldName];\r\n                    fieldTypesByName[fieldName] = fieldTypeStr;\r\n                    const fieldType = FieldSizeStringMap[fieldTypeStr];\r\n                    if (fieldId !== undefined) {\r\n                        usedFieldNames.push(fieldName);\r\n                        fieldIds.push(fieldId);\r\n                        fieldTypes[fieldId] = fieldType;\r\n                    }\r\n                }\r\n            }\r\n            if (line === PlyParserUtils.HeaderEndToken) {\r\n                endOfHeader = true;\r\n                break;\r\n            }\r\n            if (processingSection) {\r\n                extractedLines.push(line);\r\n                headerEndLine++;\r\n            }\r\n        }\r\n\r\n        const fieldOffsets = [];\r\n        let bytesPerVertex = 0;\r\n        for (let fieldName of allFieldNames) {\r\n            const fieldType = fieldTypesByName[fieldName];\r\n            if (fieldTypesByName.hasOwnProperty(fieldName)) {\r\n                const fieldId = fieldNameIdMap[fieldName];\r\n                if (fieldId !== undefined) {\r\n                    fieldOffsets[fieldId] = bytesPerVertex;\r\n                }\r\n            }\r\n            bytesPerVertex += FieldSize[FieldSizeStringMap[fieldType]];\r\n        }\r\n\r\n        const sphericalHarmonics = this.decodeSphericalHarmonicsFromSectionHeader(allFieldNames, fieldNameIdMap);\r\n\r\n        return {\r\n            'headerLines': extractedLines,\r\n            'headerStartLine': headerStartLine,\r\n            'headerEndLine': headerEndLine,\r\n            'fieldTypes': fieldTypes,\r\n            'fieldIds': fieldIds,\r\n            'fieldOffsets': fieldOffsets,\r\n            'bytesPerVertex': bytesPerVertex,\r\n            'vertexCount': vertexCount,\r\n            'dataSizeBytes': bytesPerVertex * vertexCount,\r\n            'endOfHeader': endOfHeader,\r\n            'sectionName': sectionName,\r\n            'sphericalHarmonicsDegree': sphericalHarmonics.degree,\r\n            'sphericalHarmonicsCoefficientsPerChannel': sphericalHarmonics.coefficientsPerChannel,\r\n            'sphericalHarmonicsDegree1Fields': sphericalHarmonics.degree1Fields,\r\n            'sphericalHarmonicsDegree2Fields': sphericalHarmonics.degree2Fields\r\n        };\r\n\r\n    }\r\n\r\n    decodeSphericalHarmonicsFromSectionHeader(fieldNames, fieldNameIdMap) {\r\n        let sphericalHarmonicsFieldCount = 0;\r\n        let coefficientsPerChannel = 0;\r\n        for (let fieldName of fieldNames) {\r\n            if (fieldName.startsWith('f_rest')) sphericalHarmonicsFieldCount++;\r\n        }\r\n        coefficientsPerChannel = sphericalHarmonicsFieldCount / 3;\r\n        let degree = 0;\r\n        if (coefficientsPerChannel >= 3) degree = 1;\r\n        if (coefficientsPerChannel >= 8) degree = 2;\r\n\r\n        let degree1Fields = [];\r\n        let degree2Fields = [];\r\n\r\n        for (let rgb = 0; rgb < 3; rgb++) {\r\n            if (degree >= 1) {\r\n                for (let i = 0; i < 3; i++) {\r\n                    degree1Fields.push(fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb)]);\r\n                }\r\n            }\r\n            if (degree >= 2) {\r\n                for (let i = 0; i < 5; i++) {\r\n                    degree2Fields.push(fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb + 3)]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            'degree': degree,\r\n            'coefficientsPerChannel': coefficientsPerChannel,\r\n            'degree1Fields': degree1Fields,\r\n            'degree2Fields': degree2Fields\r\n        };\r\n    }\r\n\r\n    static getHeaderSectionNames(headerLines) {\r\n        const sectionNames = [];\r\n        for (let headerLine of headerLines) {\r\n            if (headerLine.startsWith('element')) {\r\n                const lineComponents = headerLine.split(' ');\r\n                let validComponents = 0;\r\n                for (let lineComponent of lineComponents) {\r\n                    const trimmedComponent = lineComponent.trim();\r\n                    if (trimmedComponent.length > 0) {\r\n                        validComponents++;\r\n                        if (validComponents === 2) {\r\n                            sectionNames.push(trimmedComponent);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return sectionNames;\r\n    }\r\n\r\n    static checkTextForEndHeader(endHeaderTestText) {\r\n        if (endHeaderTestText.includes(PlyParserUtils.HeaderEndToken)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static checkBufferForEndHeader(buffer, searchOfset, chunkSize, decoder) {\r\n        const endHeaderTestChunk = new Uint8Array(buffer, Math.max(0, searchOfset - chunkSize), chunkSize);\r\n        const endHeaderTestText = decoder.decode(endHeaderTestChunk);\r\n        return PlyParserUtils.checkTextForEndHeader(endHeaderTestText);\r\n    }\r\n\r\n    static extractHeaderFromBufferToText(plyBuffer) {\r\n        const decoder = new TextDecoder();\r\n        let headerOffset = 0;\r\n        let headerText = '';\r\n        const readChunkSize = 100;\r\n\r\n        while (true) {\r\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\r\n                throw new Error('End of file reached while searching for end of header');\r\n            }\r\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\r\n            headerText += decoder.decode(headerChunk);\r\n            headerOffset += readChunkSize;\r\n\r\n            if (PlyParserUtils.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return headerText;\r\n    }\r\n\r\n    readHeaderFromBuffer(plyBuffer) {\r\n        const decoder = new TextDecoder();\r\n        let headerOffset = 0;\r\n        let headerText = '';\r\n        const readChunkSize = 100;\r\n\r\n        while (true) {\r\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\r\n                throw new Error('End of file reached while searching for end of header');\r\n            }\r\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\r\n            headerText += decoder.decode(headerChunk);\r\n            headerOffset += readChunkSize;\r\n\r\n            if (PlyParserUtils.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return headerText;\r\n    }\r\n\r\n    static convertHeaderTextToLines(headerText) {\r\n        const headerLines = headerText.split('\\n');\r\n        const prunedLines = [];\r\n        for (let i = 0; i < headerLines.length; i++) {\r\n            const line = headerLines[i].trim();\r\n            prunedLines.push(line);\r\n            if (line === PlyParserUtils.HeaderEndToken) {\r\n                break;\r\n            }\r\n        }\r\n        return prunedLines;\r\n    }\r\n\r\n    static determineHeaderFormatFromHeaderText(headertText) {\r\n        const headerLines = PlyParserUtils.convertHeaderTextToLines(headertText);\r\n        let format = PlyFormat.INRIAV1;\r\n        for (let i = 0; i < headerLines.length; i++) {\r\n            const line = headerLines[i].trim();\r\n            if (line.startsWith('element chunk') || line.match(/[A-Za-z]*packed_[A-Za-z]*/)) {\r\n                format = PlyFormat.PlayCanvasCompressed;\r\n            } else if (line.startsWith('element codebook_centers')) {\r\n                format = PlyFormat.INRIAV2;\r\n            } else if (line === PlyParserUtils.HeaderEndToken) {\r\n                break;\r\n            }\r\n        }\r\n        return format;\r\n    }\r\n\r\n    static determineHeaderFormatFromPlyBuffer(plyBuffer) {\r\n        const headertText = PlyParserUtils.extractHeaderFromBufferToText(plyBuffer);\r\n        return PlyParserUtils.determineHeaderFormatFromHeaderText(headertText);\r\n    }\r\n\r\n    static readVertex(vertexData, header, row, dataOffset, fieldsToRead, rawVertex, normalize = true) {\r\n        const offset = row * header.bytesPerVertex + dataOffset;\r\n        const fieldOffsets = header.fieldOffsets;\r\n        const fieldTypes = header.fieldTypes;\r\n        for (let fieldId of fieldsToRead) {\r\n            const fieldType = fieldTypes[fieldId];\r\n            if (fieldType === FieldSizeIdFloat) {\r\n                rawVertex[fieldId] = vertexData.getFloat32(offset + fieldOffsets[fieldId], true);\r\n            } else if (fieldType === FieldSizeIdShort) {\r\n                rawVertex[fieldId] = vertexData.getInt16(offset + fieldOffsets[fieldId], true);\r\n            } else if (fieldType === FieldSizeIdUShort) {\r\n                rawVertex[fieldId] = vertexData.getUint16(offset + fieldOffsets[fieldId], true);\r\n            } else if (fieldType === FieldSizeIdInt) {\r\n                rawVertex[fieldId] = vertexData.getInt32(offset + fieldOffsets[fieldId], true);\r\n            } else if (fieldType === FieldSizeIdUInt) {\r\n                rawVertex[fieldId] = vertexData.getUint32(offset + fieldOffsets[fieldId], true);\r\n            } else if (fieldType === FieldSizeIdUChar) {\r\n                if (normalize) {\r\n                    rawVertex[fieldId] = vertexData.getUint8(offset + fieldOffsets[fieldId]) / 255.0;\r\n                } else {\r\n                    rawVertex[fieldId] = vertexData.getUint8(offset + fieldOffsets[fieldId]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { clamp } from '../../Util.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { PlyParserUtils } from './PlyParserUtils.js';\r\n\r\nconst BaseFieldNamesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3', 'x', 'y', 'z',\r\n                              'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity', 'red', 'green', 'blue', 'f_rest_0'];\r\n\r\nconst BaseFieldsToReadIndexes = BaseFieldNamesToRead.map((e, i) => i);\r\n\r\nconst [\r\n        SCALE_0, SCALE_1, SCALE_2, ROT_0, ROT_1, ROT_2, ROT_3, X, Y, Z, F_DC_0, F_DC_1, F_DC_2, OPACITY, RED, GREEN, BLUE, F_REST_0\r\n      ] = BaseFieldsToReadIndexes;\r\n\r\nexport class INRIAV1PlyParser {\r\n\r\n    constructor() {\r\n        this.plyParserutils = new PlyParserUtils();\r\n    }\r\n\r\n    decodeHeaderLines(headerLines) {\r\n\r\n        let shLineCount = 0;\r\n        headerLines.forEach((line) => {\r\n            if (line.includes('f_rest_')) shLineCount++;\r\n        });\r\n\r\n        let shFieldsToReadCount = 0;\r\n        if (shLineCount >= 45) {\r\n            shFieldsToReadCount = 45;\r\n        } else if (shLineCount >= 24) {\r\n            shFieldsToReadCount = 24;\r\n        } else if (shLineCount >= 9) {\r\n            shFieldsToReadCount = 9;\r\n        }\r\n\r\n        const shFieldIndexesToMap = Array.from(Array(Math.max(shFieldsToReadCount - 1, 0)));\r\n        let shRemainingFieldNamesToRead = shFieldIndexesToMap.map((element, index) => `f_rest_${index + 1}`);\r\n\r\n        const fieldNamesToRead = [...BaseFieldNamesToRead, ...shRemainingFieldNamesToRead];\r\n        const fieldsToReadIndexes = fieldNamesToRead.map((e, i) => i);\r\n\r\n        const fieldNameIdMap = fieldsToReadIndexes.reduce((acc, element) => {\r\n            acc[fieldNamesToRead[element]] = element;\r\n            return acc;\r\n        }, {});\r\n        const header = this.plyParserutils.decodeSectionHeader(headerLines, fieldNameIdMap, 0);\r\n        header.splatCount = header.vertexCount;\r\n        header.bytesPerSplat = header.bytesPerVertex;\r\n        header.fieldsToReadIndexes = fieldsToReadIndexes;\r\n        return header;\r\n    }\r\n\r\n    decodeHeaderText(headerText) {\r\n        const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\r\n        const header = this.decodeHeaderLines(headerLines);\r\n        header.headerText = headerText;\r\n        header.headerSizeBytes = headerText.indexOf(PlyParserUtils.HeaderEndToken) + PlyParserUtils.HeaderEndToken.length + 1;\r\n        return header;\r\n    }\r\n\r\n    decodeHeaderFromBuffer(plyBuffer) {\r\n        const headerText = this.plyParserutils.readHeaderFromBuffer(plyBuffer);\r\n        return this.decodeHeaderText(headerText);\r\n    }\r\n\r\n    findSplatData(plyBuffer, header) {\r\n        return new DataView(plyBuffer, header.headerSizeBytes);\r\n    }\r\n\r\n    parseToUncompressedSplatBufferSection(header, fromSplat, toSplat, splatData, splatDataOffset,\r\n                                          toBuffer, toOffset, outSphericalHarmonicsDegree = 0) {\r\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\r\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree].BytesPerSplat;\r\n\r\n        for (let i = fromSplat; i <= toSplat; i++) {\r\n            const parsedSplat = INRIAV1PlyParser.parseToUncompressedSplat(splatData, i, header,\r\n                                                                          splatDataOffset, outSphericalHarmonicsDegree);\r\n            const outBase = i * outBytesPerSplat + toOffset;\r\n            SplatBuffer.writeSplatDataToSectionBuffer(parsedSplat, toBuffer, outBase, 0, outSphericalHarmonicsDegree);\r\n        }\r\n    }\r\n\r\n    parseToUncompressedSplatArraySection(header, fromSplat, toSplat, splatData, splatDataOffset,\r\n                                         splatArray, outSphericalHarmonicsDegree = 0) {\r\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\r\n        for (let i = fromSplat; i <= toSplat; i++) {\r\n            const parsedSplat = INRIAV1PlyParser.parseToUncompressedSplat(splatData, i, header,\r\n                                                                          splatDataOffset, outSphericalHarmonicsDegree);\r\n            splatArray.addSplat(parsedSplat);\r\n        }\r\n    }\r\n\r\n    decodeSectionSplatData(sectionSplatData, splatCount, sectionHeader, outSphericalHarmonicsDegree) {\r\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, sectionHeader.sphericalHarmonicsDegree);\r\n        const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\r\n        for (let row = 0; row < splatCount; row++) {\r\n            const newSplat = INRIAV1PlyParser.parseToUncompressedSplat(sectionSplatData, row, sectionHeader,\r\n                                                                       0, outSphericalHarmonicsDegree);\r\n            splatArray.addSplat(newSplat);\r\n        }\r\n        return splatArray;\r\n    }\r\n\r\n    static parseToUncompressedSplat = function() {\r\n\r\n        let rawSplat = [];\r\n        const tempRotation = new THREE.Quaternion();\r\n\r\n        const OFFSET_X = UncompressedSplatArray.OFFSET.X;\r\n        const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\r\n        const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\r\n\r\n        const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\r\n        const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\r\n        const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\r\n\r\n        const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\r\n        const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\r\n        const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\r\n        const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\r\n\r\n        const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\r\n        const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\r\n        const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\r\n        const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\r\n\r\n        const OFFSET_FRC = [];\r\n\r\n        for (let i = 0; i < 45; i++) {\r\n            OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\r\n        }\r\n\r\n        return function(splatData, row, header, splatDataOffset = 0, outSphericalHarmonicsDegree = 0) {\r\n            outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\r\n            INRIAV1PlyParser.readSplat(splatData, header, row, splatDataOffset, rawSplat);\r\n            const newSplat = UncompressedSplatArray.createSplat(outSphericalHarmonicsDegree);\r\n            if (rawSplat[SCALE_0] !== undefined) {\r\n                newSplat[OFFSET_SCALE0] = Math.exp(rawSplat[SCALE_0]);\r\n                newSplat[OFFSET_SCALE1] = Math.exp(rawSplat[SCALE_1]);\r\n                newSplat[OFFSET_SCALE2] = Math.exp(rawSplat[SCALE_2]);\r\n            } else {\r\n                newSplat[OFFSET_SCALE0] = 0.01;\r\n                newSplat[OFFSET_SCALE1] = 0.01;\r\n                newSplat[OFFSET_SCALE2] = 0.01;\r\n            }\r\n\r\n            if (rawSplat[F_DC_0] !== undefined) {\r\n                const SH_C0 = 0.28209479177387814;\r\n                newSplat[OFFSET_FDC0] = (0.5 + SH_C0 * rawSplat[F_DC_0]) * 255;\r\n                newSplat[OFFSET_FDC1] = (0.5 + SH_C0 * rawSplat[F_DC_1]) * 255;\r\n                newSplat[OFFSET_FDC2] = (0.5 + SH_C0 * rawSplat[F_DC_2]) * 255;\r\n            } else if (rawSplat[RED] !== undefined) {\r\n                newSplat[OFFSET_FDC0] = rawSplat[RED] * 255;\r\n                newSplat[OFFSET_FDC1] = rawSplat[GREEN] * 255;\r\n                newSplat[OFFSET_FDC2] = rawSplat[BLUE] * 255;\r\n            } else {\r\n                newSplat[OFFSET_FDC0] = 0;\r\n                newSplat[OFFSET_FDC1] = 0;\r\n                newSplat[OFFSET_FDC2] = 0;\r\n            }\r\n\r\n            if (rawSplat[OPACITY] !== undefined) {\r\n                newSplat[OFFSET_OPACITY] = (1 / (1 + Math.exp(-rawSplat[OPACITY]))) * 255;\r\n            }\r\n\r\n            newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\r\n            newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\r\n            newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\r\n            newSplat[OFFSET_OPACITY] = clamp(Math.floor(newSplat[OFFSET_OPACITY]), 0, 255);\r\n\r\n            if (outSphericalHarmonicsDegree >= 1) {\r\n                if (rawSplat[F_REST_0] !== undefined) {\r\n                    for (let i = 0; i < 9; i++) {\r\n                        newSplat[OFFSET_FRC[i]] = rawSplat[header.sphericalHarmonicsDegree1Fields[i]];\r\n                    }\r\n                    if (outSphericalHarmonicsDegree >= 2) {\r\n                        for (let i = 0; i < 15; i++) {\r\n                            newSplat[OFFSET_FRC[9 + i]] = rawSplat[header.sphericalHarmonicsDegree2Fields[i]];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            tempRotation.set(rawSplat[ROT_0], rawSplat[ROT_1], rawSplat[ROT_2], rawSplat[ROT_3]);\r\n            tempRotation.normalize();\r\n\r\n            newSplat[OFFSET_ROTATION0] = tempRotation.x;\r\n            newSplat[OFFSET_ROTATION1] = tempRotation.y;\r\n            newSplat[OFFSET_ROTATION2] = tempRotation.z;\r\n            newSplat[OFFSET_ROTATION3] = tempRotation.w;\r\n\r\n            newSplat[OFFSET_X] = rawSplat[X];\r\n            newSplat[OFFSET_Y] = rawSplat[Y];\r\n            newSplat[OFFSET_Z] = rawSplat[Z];\r\n\r\n            return newSplat;\r\n        };\r\n\r\n    }();\r\n\r\n    static readSplat(splatData, header, row, dataOffset, rawSplat) {\r\n        return PlyParserUtils.readVertex(splatData, header, row, dataOffset, header.fieldsToReadIndexes, rawSplat, true);\r\n    }\r\n\r\n    parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\r\n        const header = this.decodeHeaderFromBuffer(plyBuffer);\r\n        const splatCount = header.splatCount;\r\n        const splatData = this.findSplatData(plyBuffer, header);\r\n        const splatArray = this.decodeSectionSplatData(splatData, splatCount, header, outSphericalHarmonicsDegree);\r\n        return splatArray;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { PlyParserUtils } from './PlyParserUtils.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { clamp } from '../../Util.js';\r\n\r\nconst CodeBookEntryNamesToRead = [\r\n    'features_dc', 'features_rest_0', 'features_rest_1', 'features_rest_2', 'features_rest_3', 'features_rest_4', 'features_rest_5',\r\n    'features_rest_6', 'features_rest_7', 'features_rest_8', 'features_rest_9', 'features_rest_10', 'features_rest_11', 'features_rest_12',\r\n    'features_rest_13', 'features_rest_14', 'opacity', 'scaling', 'rotation_re', 'rotation_im'\r\n];\r\nconst CodeBookEntriesToReadIndexes = CodeBookEntryNamesToRead.map((e, i) => i);\r\n\r\nconst [\r\n        CB_FEATURES_DC, CB_FEATURES_REST_0, CB_FEATURES_REST_3, CB_OPACITY, CB_SCALING, CB_ROTATION_RE, CB_ROTATION_IM\r\n      ] = [0, 1, 4, 16, 17, 18, 19];\r\n\r\nconst FieldNamesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\r\n                          'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity', 'red', 'green', 'blue',\r\n                          'f_rest_0', 'f_rest_1', 'f_rest_2', 'f_rest_3', 'f_rest_4', 'f_rest_5', 'f_rest_6', 'f_rest_7', 'f_rest_8',\r\n                          'f_rest_9', 'f_rest_10', 'f_rest_11', 'f_rest_12', 'f_rest_13', 'f_rest_14', 'f_rest_15', 'f_rest_16',\r\n                          'f_rest_17', 'f_rest_18', 'f_rest_19', 'f_rest_20', 'f_rest_21', 'f_rest_22', 'f_rest_23', 'f_rest_24',\r\n                          'f_rest_25', 'f_rest_26', 'f_rest_27', 'f_rest_28', 'f_rest_29', 'f_rest_30', 'f_rest_31', 'f_rest_32',\r\n                          'f_rest_33', 'f_rest_34', 'f_rest_35', 'f_rest_36', 'f_rest_37', 'f_rest_38', 'f_rest_39', 'f_rest_40',\r\n                          'f_rest_41', 'f_rest_42', 'f_rest_43', 'f_rest_44', 'f_rest_45'\r\n                         ];\r\nconst FieldsToReadIndexes = FieldNamesToRead.map((e, i) => i);\r\n\r\nconst [\r\n        PLY_SCALE_0, PLY_SCALE_1, PLY_SCALE_2, PLY_ROT_0, PLY_ROT_1, PLY_ROT_2, PLY_ROT_3, PLY_X, PLY_Y, PLY_Z,\r\n        PLY_F_DC_0, PLY_F_DC_1, PLY_F_DC_2, PLY_OPACITY,\r\n      ] = FieldsToReadIndexes;\r\n\r\nconst PLY_RED = PLY_F_DC_0;\r\nconst PLY_GREEN = PLY_F_DC_1;\r\nconst PLY_BLUE = PLY_F_DC_2;\r\n\r\nconst fromHalfFloat = (hf) =>{\r\n    const t = (31744 & hf) >> 10;\r\n    const a = 1023 & hf;\r\n    return (hf >> 15 ? -1 : 1)*(t ? t === 31 ? a ? NaN : 1/0 : Math.pow(2, t - 15) *( 1 + a / 1024) : a / 1024*6103515625e-14);\r\n};\r\n\r\nexport class INRIAV2PlyParser {\r\n\r\n    constructor() {\r\n        this.plyParserutils = new PlyParserUtils();\r\n    }\r\n\r\n    decodeSectionHeadersFromHeaderLines(headerLines) {\r\n        const fieldNameIdMap = FieldsToReadIndexes.reduce((acc, element) => {\r\n            acc[FieldNamesToRead[element]] = element;\r\n            return acc;\r\n        }, {});\r\n\r\n        const codeBookEntriesToReadIdMap = CodeBookEntriesToReadIndexes.reduce((acc, element) => {\r\n            acc[CodeBookEntryNamesToRead[element]] = element;\r\n            return acc;\r\n        }, {});\r\n\r\n        const sectionNames = PlyParserUtils.getHeaderSectionNames(headerLines);\r\n        let codeBookSectionIndex;\r\n        for (let s = 0; s < sectionNames.length; s++) {\r\n            const sectionName = sectionNames[s];\r\n            if (sectionName === 'codebook_centers') {\r\n                codeBookSectionIndex = s;\r\n            }\r\n        }\r\n\r\n        let currentStartLine = 0;\r\n        let lastSectionFound = false;\r\n        const sectionHeaders = [];\r\n        let sectionIndex = 0;\r\n        while (!lastSectionFound) {\r\n            let sectionHeader;\r\n            if (sectionIndex === codeBookSectionIndex) {\r\n                sectionHeader = this.plyParserutils.decodeSectionHeader(headerLines, codeBookEntriesToReadIdMap, currentStartLine);\r\n            } else {\r\n                sectionHeader = this.plyParserutils.decodeSectionHeader(headerLines, fieldNameIdMap, currentStartLine);\r\n            }\r\n            lastSectionFound = sectionHeader.endOfHeader;\r\n            currentStartLine = sectionHeader.headerEndLine + 1;\r\n            if (!lastSectionFound) {\r\n                sectionHeader.splatCount = sectionHeader.vertexCount;\r\n                sectionHeader.bytesPerSplat = sectionHeader.bytesPerVertex;\r\n            }\r\n            sectionHeaders.push(sectionHeader);\r\n            sectionIndex++;\r\n        }\r\n        return sectionHeaders;\r\n    }\r\n\r\n    decodeSectionHeadersFromHeaderText(headerText) {\r\n        const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\r\n        return this.decodeSectionHeadersFromHeaderLines(headerLines);\r\n    }\r\n\r\n    getSplatCountFromSectionHeaders(sectionHeaders) {\r\n        let splatCount = 0;\r\n        for (let sectionHeader of sectionHeaders) {\r\n            if (sectionHeader.sectionName !== 'codebook_centers') {\r\n                splatCount += sectionHeader.vertexCount;\r\n            }\r\n        }\r\n        return splatCount;\r\n    }\r\n\r\n    decodeHeaderFromHeaderText(headerText) {\r\n        const headerSizeBytes = headerText.indexOf(PlyParserUtils.HeaderEndToken) + PlyParserUtils.HeaderEndToken.length + 1;\r\n        const sectionHeaders = this.decodeSectionHeadersFromHeaderText(headerText);\r\n        const splatCount = this.getSplatCountFromSectionHeaders(sectionHeaders);\r\n        return {\r\n            'headerSizeBytes': headerSizeBytes,\r\n            'sectionHeaders': sectionHeaders,\r\n            'splatCount': splatCount\r\n        };\r\n    }\r\n\r\n    decodeHeaderFromBuffer(plyBuffer) {\r\n        const headerText = this.plyParserutils.readHeaderFromBuffer(plyBuffer);\r\n        return this.decodeHeaderFromHeaderText(headerText);\r\n    }\r\n\r\n    findVertexData(plyBuffer, header, targetSection) {\r\n        let byteOffset = header.headerSizeBytes;\r\n        for (let s = 0; s < targetSection && s < header.sectionHeaders.length; s++) {\r\n            const sectionHeader = header.sectionHeaders[s];\r\n            byteOffset += sectionHeader.dataSizeBytes;\r\n        }\r\n        return new DataView(plyBuffer, byteOffset, header.sectionHeaders[targetSection].dataSizeBytes);\r\n    }\r\n\r\n    decodeCodeBook(codeBookData, sectionHeader) {\r\n\r\n        const rawVertex = [];\r\n        const codeBook = [];\r\n        for (let row = 0; row < sectionHeader.vertexCount; row++) {\r\n            PlyParserUtils.readVertex(codeBookData, sectionHeader, row, 0, CodeBookEntriesToReadIndexes, rawVertex);\r\n            for (let index of CodeBookEntriesToReadIndexes) {\r\n                const codeBookElementOffset = CodeBookEntriesToReadIndexes[index];\r\n                let codeBookPage = codeBook[codeBookElementOffset];\r\n                if (!codeBookPage) {\r\n                    codeBook[codeBookElementOffset] = codeBookPage = [];\r\n                }\r\n                codeBookPage.push(rawVertex[index]);\r\n            }\r\n        }\r\n        for (let page = 0; page < codeBook.length; page++) {\r\n            const codeBookPage = codeBook[page];\r\n            const SH_C0 = 0.28209479177387814;\r\n            for (let i = 0; i < codeBookPage.length; i++) {\r\n               const baseValue = fromHalfFloat(codeBookPage[i]);\r\n                if (page === CB_OPACITY) {\r\n                    codeBookPage[i] = Math.round((1 / (1 + Math.exp(-baseValue))) * 255);\r\n                } else if (page === CB_FEATURES_DC) {\r\n                    codeBookPage[i] = Math.round((0.5 + SH_C0 * baseValue) * 255);\r\n                } else if (page === CB_SCALING) {\r\n                    codeBookPage[i] = Math.exp(baseValue);\r\n                } else {\r\n                    codeBookPage[i] = baseValue;\r\n                }\r\n            }\r\n        }\r\n        return codeBook;\r\n    }\r\n\r\n    decodeSectionSplatData(sectionSplatData, splatCount, sectionHeader, codeBook, outSphericalHarmonicsDegree) {\r\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, sectionHeader.sphericalHarmonicsDegree);\r\n        const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\r\n        for (let row = 0; row < splatCount; row++) {\r\n            const newSplat = INRIAV2PlyParser.parseToUncompressedSplat(sectionSplatData, row, sectionHeader, codeBook,\r\n                                                                       0, outSphericalHarmonicsDegree);\r\n            splatArray.addSplat(newSplat);\r\n        }\r\n        return splatArray;\r\n    }\r\n\r\n    static parseToUncompressedSplat = function() {\r\n\r\n        let rawSplat = [];\r\n        const tempRotation = new THREE.Quaternion();\r\n\r\n        const OFFSET_X = UncompressedSplatArray.OFFSET.X;\r\n        const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\r\n        const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\r\n\r\n        const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\r\n        const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\r\n        const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\r\n\r\n        const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\r\n        const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\r\n        const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\r\n        const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\r\n\r\n        const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\r\n        const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\r\n        const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\r\n        const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\r\n\r\n        const OFFSET_FRC = [];\r\n\r\n        for (let i = 0; i < 45; i++) {\r\n            OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\r\n        }\r\n\r\n        return function(splatData, row, header, codeBook, splatDataOffset = 0, outSphericalHarmonicsDegree = 0) {\r\n            outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\r\n            INRIAV2PlyParser.readSplat(splatData, header, row, splatDataOffset, rawSplat);\r\n            const newSplat = UncompressedSplatArray.createSplat(outSphericalHarmonicsDegree);\r\n            if (rawSplat[PLY_SCALE_0] !== undefined) {\r\n                newSplat[OFFSET_SCALE0] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_0]];\r\n                newSplat[OFFSET_SCALE1] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_1]];\r\n                newSplat[OFFSET_SCALE2] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_2]];\r\n            } else {\r\n                newSplat[OFFSET_SCALE0] = 0.01;\r\n                newSplat[OFFSET_SCALE1] = 0.01;\r\n                newSplat[OFFSET_SCALE2] = 0.01;\r\n            }\r\n\r\n            if (rawSplat[PLY_F_DC_0] !== undefined) {\r\n                newSplat[OFFSET_FDC0] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_0]];\r\n                newSplat[OFFSET_FDC1] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_1]];\r\n                newSplat[OFFSET_FDC2] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_2]];\r\n            } else if (rawSplat[PLY_RED] !== undefined) {\r\n                newSplat[OFFSET_FDC0] = rawSplat[PLY_RED] * 255;\r\n                newSplat[OFFSET_FDC1] = rawSplat[PLY_GREEN] * 255;\r\n                newSplat[OFFSET_FDC2] = rawSplat[PLY_BLUE] * 255;\r\n            } else {\r\n                newSplat[OFFSET_FDC0] = 0;\r\n                newSplat[OFFSET_FDC1] = 0;\r\n                newSplat[OFFSET_FDC2] = 0;\r\n            }\r\n\r\n            if (rawSplat[PLY_OPACITY] !== undefined) {\r\n                newSplat[OFFSET_OPACITY] = codeBook[CB_OPACITY][rawSplat[PLY_OPACITY]];\r\n            }\r\n\r\n            newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\r\n            newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\r\n            newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\r\n            newSplat[OFFSET_OPACITY] = clamp(Math.floor(newSplat[OFFSET_OPACITY]), 0, 255);\r\n\r\n            if (outSphericalHarmonicsDegree >= 1 && header.sphericalHarmonicsDegree >= 1) {\r\n                for (let i = 0; i < 9; i++) {\r\n                    const codeBookPage = codeBook[CB_FEATURES_REST_0 + i % 3];\r\n                    newSplat[OFFSET_FRC[i]] = codeBookPage[rawSplat[header.sphericalHarmonicsDegree1Fields[i]]];\r\n                }\r\n                if (outSphericalHarmonicsDegree >= 2 && header.sphericalHarmonicsDegree >= 2) {\r\n                    for (let i = 0; i < 15; i++) {\r\n                        const codeBookPage = codeBook[CB_FEATURES_REST_3 + i % 5];\r\n                        newSplat[OFFSET_FRC[9 + i]] = codeBookPage[rawSplat[header.sphericalHarmonicsDegree2Fields[i]]];\r\n                    }\r\n                }\r\n            }\r\n\r\n            const rot0 = codeBook[CB_ROTATION_RE][rawSplat[PLY_ROT_0]];\r\n            const rot1 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_1]];\r\n            const rot2 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_2]];\r\n            const rot3 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_3]];\r\n            tempRotation.set(rot0, rot1, rot2, rot3);\r\n            tempRotation.normalize();\r\n\r\n            newSplat[OFFSET_ROTATION0] = tempRotation.x;\r\n            newSplat[OFFSET_ROTATION1] = tempRotation.y;\r\n            newSplat[OFFSET_ROTATION2] = tempRotation.z;\r\n            newSplat[OFFSET_ROTATION3] = tempRotation.w;\r\n\r\n            newSplat[OFFSET_X] = fromHalfFloat(rawSplat[PLY_X]);\r\n            newSplat[OFFSET_Y] = fromHalfFloat(rawSplat[PLY_Y]);\r\n            newSplat[OFFSET_Z] = fromHalfFloat(rawSplat[PLY_Z]);\r\n\r\n            return newSplat;\r\n        };\r\n\r\n    }();\r\n\r\n    static readSplat(splatData, header, row, dataOffset, rawSplat) {\r\n        return PlyParserUtils.readVertex(splatData, header, row, dataOffset, FieldsToReadIndexes, rawSplat, false);\r\n    }\r\n\r\n    parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\r\n        const splatArrays = [];\r\n        const header = this.decodeHeaderFromBuffer(plyBuffer, outSphericalHarmonicsDegree);\r\n        let codeBook;\r\n\r\n        for (let s = 0; s < header.sectionHeaders.length; s++) {\r\n            const sectionHeader = header.sectionHeaders[s];\r\n            if (sectionHeader.sectionName === 'codebook_centers') {\r\n                const codeBookData = this.findVertexData(plyBuffer, header, s);\r\n                codeBook = this.decodeCodeBook(codeBookData, sectionHeader);\r\n            }\r\n        }\r\n        for (let s = 0; s < header.sectionHeaders.length; s++) {\r\n            const sectionHeader = header.sectionHeaders[s];\r\n            if (sectionHeader.sectionName !== 'codebook_centers') {\r\n                const splatCount = sectionHeader.vertexCount;\r\n                const vertexData = this.findVertexData(plyBuffer, header, s);\r\n                const splatArray = this.decodeSectionSplatData(vertexData, splatCount, sectionHeader,\r\n                                                               codeBook, outSphericalHarmonicsDegree);\r\n                splatArrays.push(splatArray);\r\n            }\r\n        }\r\n\r\n        const unified = new UncompressedSplatArray(outSphericalHarmonicsDegree);\r\n        for (let splatArray of splatArrays) {\r\n            for (let splat of splatArray.splats) {\r\n                unified.addSplat(splat);\r\n            }\r\n        }\r\n\r\n        return unified;\r\n    }\r\n}\r\n","import { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\r\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\r\nimport { INRIAV2PlyParser } from './INRIAV2PlyParser.js';\r\nimport { PlyParserUtils } from './PlyParserUtils.js';\r\nimport { PlyFormat } from './PlyFormat.js';\r\n\r\nexport class PlyParser {\r\n\r\n    static parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\r\n\r\n        const plyFormat = PlyParserUtils.determineHeaderFormatFromPlyBuffer(plyBuffer);\r\n\r\n        if (plyFormat === PlyFormat.PlayCanvasCompressed) {\r\n            return PlayCanvasCompressedPlyParser.parseToUncompressedSplatArray(plyBuffer);\r\n        } else if (plyFormat === PlyFormat.INRIAV1) {\r\n            return new INRIAV1PlyParser().parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree);\r\n        } else if (plyFormat === PlyFormat.INRIAV2) {\r\n            return new INRIAV2PlyParser().parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree);\r\n        }\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\n\r\nexport class SplatPartitioner {\r\n\r\n    constructor(sectionCount, sectionFilters, groupingParameters, partitionGenerator) {\r\n        this.sectionCount = sectionCount;\r\n        this.sectionFilters = sectionFilters;\r\n        this.groupingParameters = groupingParameters;\r\n        this.partitionGenerator = partitionGenerator;\r\n    }\r\n\r\n    partitionUncompressedSplatArray(splatArray) {\r\n        let groupingParameters;\r\n        let sectionCount;\r\n        let sectionFilters;\r\n        if (this.partitionGenerator) {\r\n            const results = this.partitionGenerator(splatArray);\r\n            groupingParameters = results.groupingParameters;\r\n            sectionCount = results.sectionCount;\r\n            sectionFilters = results.sectionFilters;\r\n        } else {\r\n            groupingParameters = this.groupingParameters;\r\n            sectionCount = this.sectionCount;\r\n            sectionFilters = this.sectionFilters;\r\n        }\r\n\r\n        const newArrays = [];\r\n        for (let s = 0; s < sectionCount; s++) {\r\n            const sectionSplats = new UncompressedSplatArray(splatArray.sphericalHarmonicsDegree);\r\n            const sectionFilter = sectionFilters[s];\r\n            for (let i = 0; i < splatArray.splatCount; i++) {\r\n                if (sectionFilter(i)) {\r\n                    sectionSplats.addSplat(splatArray.splats[i]);\r\n                }\r\n            }\r\n            newArrays.push(sectionSplats);\r\n        }\r\n        return {\r\n            splatArrays: newArrays,\r\n            parameters: groupingParameters\r\n        };\r\n    }\r\n\r\n    static getStandardPartitioner(partitionSize = 0, sceneCenter = new THREE.Vector3(),\r\n                                  blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\r\n\r\n        const partitionGenerator = (splatArray) => {\r\n\r\n            const OFFSET_X = UncompressedSplatArray.OFFSET.X;\r\n            const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\r\n            const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\r\n\r\n            if (partitionSize <= 0) partitionSize = splatArray.splatCount;\r\n\r\n            const center = new THREE.Vector3();\r\n            const clampDistance = 0.5;\r\n            const clampPoint = (point) => {\r\n                point.x = Math.floor(point.x / clampDistance) * clampDistance;\r\n                point.y = Math.floor(point.y / clampDistance) * clampDistance;\r\n                point.z = Math.floor(point.z / clampDistance) * clampDistance;\r\n            };\r\n            splatArray.splats.forEach((splat) => {\r\n                center.set(splat[OFFSET_X], splat[OFFSET_Y], splat[OFFSET_Z]).sub(sceneCenter);\r\n                clampPoint(center);\r\n                splat.centerDist = center.lengthSq();\r\n            });\r\n            splatArray.splats.sort((a, b) => {\r\n                let centerADist = a.centerDist;\r\n                let centerBDist = b.centerDist;\r\n                if (centerADist > centerBDist) return 1;\r\n                else return -1;\r\n            });\r\n\r\n            const sectionFilters = [];\r\n            const groupingParameters = [];\r\n            partitionSize = Math.min(splatArray.splatCount, partitionSize);\r\n            const patitionCount = Math.ceil(splatArray.splatCount / partitionSize);\r\n            let currentStartSplat = 0;\r\n            for (let i = 0; i < patitionCount; i ++) {\r\n                let startSplat = currentStartSplat;\r\n                sectionFilters.push((splatIndex) => {\r\n                    return splatIndex >= startSplat && splatIndex < startSplat + partitionSize;\r\n                });\r\n                groupingParameters.push({\r\n                    'blocksSize': blockSize,\r\n                    'bucketSize': bucketSize,\r\n                });\r\n                currentStartSplat += partitionSize;\r\n            }\r\n            return {\r\n                'sectionCount': sectionFilters.length,\r\n                sectionFilters,\r\n                groupingParameters\r\n            };\r\n        };\r\n        return new SplatPartitioner(undefined, undefined, undefined, partitionGenerator);\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatPartitioner } from './SplatPartitioner.js';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\n\r\nexport class SplatBufferGenerator {\r\n\r\n    constructor(splatPartitioner, alphaRemovalThreshold, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        this.splatPartitioner = splatPartitioner;\r\n        this.alphaRemovalThreshold = alphaRemovalThreshold;\r\n        this.compressionLevel = compressionLevel;\r\n        this.sectionSize = sectionSize;\r\n        this.sceneCenter = sceneCenter ? new THREE.Vector3().copy(sceneCenter) : undefined;\r\n        this.blockSize = blockSize;\r\n        this.bucketSize = bucketSize;\r\n    }\r\n\r\n    generateFromUncompressedSplatArray(splatArray) {\r\n        const partitionResults = this.splatPartitioner.partitionUncompressedSplatArray(splatArray);\r\n        return SplatBuffer.generateFromUncompressedSplatArrays(partitionResults.splatArrays,\r\n                                                               this.alphaRemovalThreshold, this.compressionLevel,\r\n                                                               this.sceneCenter, this.blockSize, this.bucketSize,\r\n                                                               partitionResults.parameters);\r\n    }\r\n\r\n    static getStandardGenerator(alphaRemovalThreshold = 1, compressionLevel = 1, sectionSize = 0, sceneCenter = new THREE.Vector3(),\r\n                                blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\r\n        const splatPartitioner = SplatPartitioner.getStandardPartitioner(sectionSize, sceneCenter, blockSize, bucketSize);\r\n        return new SplatBufferGenerator(splatPartitioner, alphaRemovalThreshold, compressionLevel,\r\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\r\n    }\r\n}\r\n","export const LoaderStatus = {\r\n    'Downloading': 0,\r\n    'Processing': 1,\r\n    'Done': 2\r\n};\r\n","export class DirectLoadError extends Error {\r\n\r\n    constructor(msg) {\r\n        super(msg);\r\n    }\r\n\r\n}\r\n","export const InternalLoadType = {\r\n    DirectToSplatBuffer: 0,\r\n    DirectToSplatArray: 1,\r\n    DownloadBeforeProcessing: 2\r\n};\r\n","import * as THREE from 'three';\r\nimport { PlyParser } from './PlyParser.js';\r\nimport { PlyParserUtils } from './PlyParserUtils.js';\r\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\r\nimport { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\r\nimport { PlyFormat } from './PlyFormat.js';\r\nimport { fetchWithProgress, delayedExecute, nativePromiseWithExtractedComponents } from '../../Util.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { DirectLoadError } from '../DirectLoadError.js';\r\nimport { Constants } from '../../Constants.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { InternalLoadType } from '../InternalLoadType.js';\r\n\r\nfunction storeChunksInBuffer(chunks, buffer) {\r\n    let inBytes = 0;\r\n    for (let chunk of chunks) inBytes += chunk.sizeBytes;\r\n\r\n    if (!buffer || buffer.byteLength < inBytes) {\r\n        buffer = new ArrayBuffer(inBytes);\r\n    }\r\n\r\n    let offset = 0;\r\n    for (let chunk of chunks) {\r\n        new Uint8Array(buffer, offset, chunk.sizeBytes).set(chunk.data);\r\n        offset += chunk.sizeBytes;\r\n    }\r\n\r\n    return buffer;\r\n}\r\n\r\nfunction finalize(splatData, optimizeSplatData, minimumAlpha, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n    if (optimizeSplatData) {\r\n        const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\r\n                                                                               sectionSize, sceneCenter,\r\n                                                                               blockSize, bucketSize);\r\n        return splatBufferGenerator.generateFromUncompressedSplatArray(splatData);\r\n    } else {\r\n        return SplatBuffer.generateFromUncompressedSplatArrays([splatData], minimumAlpha, 0, new THREE.Vector3());\r\n    }\r\n}\r\n\r\nexport class PlyLoader {\r\n\r\n    static loadFromURL(fileName, onProgress, loadDirectoToSplatBuffer, onProgressiveLoadSectionProgress,\r\n                       minimumAlpha, compressionLevel, optimizeSplatData = true, outSphericalHarmonicsDegree = 0,\r\n                       headers, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n\r\n        let internalLoadType = loadDirectoToSplatBuffer ? InternalLoadType.DirectToSplatBuffer : InternalLoadType.DirectToSplatArray;\r\n        if (optimizeSplatData) internalLoadType = InternalLoadType.DirectToSplatArray;\r\n\r\n        const directLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\r\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\r\n        const sectionCount = 1;\r\n\r\n        let directLoadBufferIn;\r\n        let directLoadBufferOut;\r\n        let directLoadSplatBuffer;\r\n        let compressedPlyHeaderChunksBuffer;\r\n        let maxSplatCount = 0;\r\n        let splatCount = 0;\r\n\r\n        let headerLoaded = false;\r\n        let readyToLoadSplatData = false;\r\n        let compressed = false;\r\n\r\n        const loadPromise = nativePromiseWithExtractedComponents();\r\n\r\n        let numBytesStreamed = 0;\r\n        let numBytesParsed = 0;\r\n        let numBytesDownloaded = 0;\r\n        let headerText = '';\r\n        let header = null;\r\n        let chunks = [];\r\n\r\n        let standardLoadUncompressedSplatArray;\r\n\r\n        const textDecoder = new TextDecoder();\r\n        const inriaV1PlyParser = new INRIAV1PlyParser();\r\n\r\n        const localOnProgress = (percent, percentLabel, chunkData) => {\r\n            const loadComplete = percent >= 100;\r\n\r\n            if (chunkData) {\r\n                chunks.push({\r\n                    'data': chunkData,\r\n                    'sizeBytes': chunkData.byteLength,\r\n                    'startBytes': numBytesDownloaded,\r\n                    'endBytes': numBytesDownloaded + chunkData.byteLength\r\n                });\r\n                numBytesDownloaded += chunkData.byteLength;\r\n            }\r\n\r\n            if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\r\n                if (loadComplete) {\r\n                    loadPromise.resolve(chunks);\r\n                }\r\n            } else {\r\n                if (!headerLoaded) {\r\n                    headerText += textDecoder.decode(chunkData);\r\n                    if (PlyParserUtils.checkTextForEndHeader(headerText)) {\r\n                        const plyFormat = PlyParserUtils.determineHeaderFormatFromHeaderText(headerText);\r\n                        if (plyFormat === PlyFormat.INRIAV1) {\r\n                            header = inriaV1PlyParser.decodeHeaderText(headerText);\r\n                            maxSplatCount = header.splatCount;\r\n                            readyToLoadSplatData = true;\r\n                            compressed = false;\r\n                        } else if (plyFormat === PlyFormat.PlayCanvasCompressed) {\r\n                            header = PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\r\n                            maxSplatCount = header.vertexElement.count;\r\n                            compressed = true;\r\n                        } else {\r\n                            if (loadDirectoToSplatBuffer) {\r\n                                throw new DirectLoadError('PlyLoader.loadFromURL() -> Selected Ply format cannot be directly loaded.');\r\n                            } else {\r\n                                internalLoadType = InternalLoadType.DownloadBeforeProcessing;\r\n                                return;\r\n                            }\r\n                        }\r\n                        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\r\n\r\n                        const shDescriptor = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree];\r\n                        const splatBufferSizeBytes = splatDataOffsetBytes + shDescriptor.BytesPerSplat * maxSplatCount;\r\n\r\n                        if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\r\n                            directLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\r\n                            SplatBuffer.writeHeaderToBuffer({\r\n                                versionMajor: SplatBuffer.CurrentMajorVersion,\r\n                                versionMinor: SplatBuffer.CurrentMinorVersion,\r\n                                maxSectionCount: sectionCount,\r\n                                sectionCount: sectionCount,\r\n                                maxSplatCount: maxSplatCount,\r\n                                splatCount: splatCount,\r\n                                compressionLevel: 0,\r\n                                sceneCenter: new THREE.Vector3()\r\n                            }, directLoadBufferOut);\r\n                        } else {\r\n                            standardLoadUncompressedSplatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\r\n                        }\r\n\r\n                        numBytesStreamed = header.headerSizeBytes;\r\n                        numBytesParsed = header.headerSizeBytes;\r\n                        headerLoaded = true;\r\n                    }\r\n                } else if (compressed && !readyToLoadSplatData) {\r\n                    const sizeRequiredForHeaderAndChunks = header.headerSizeBytes + header.chunkElement.storageSizeBytes;\r\n                    compressedPlyHeaderChunksBuffer = storeChunksInBuffer(chunks, compressedPlyHeaderChunksBuffer);\r\n                    if (compressedPlyHeaderChunksBuffer.byteLength >= sizeRequiredForHeaderAndChunks) {\r\n                        PlayCanvasCompressedPlyParser.readElementData(header.chunkElement, compressedPlyHeaderChunksBuffer,\r\n                                                                    header.headerSizeBytes);\r\n                        numBytesStreamed = sizeRequiredForHeaderAndChunks;\r\n                        numBytesParsed = sizeRequiredForHeaderAndChunks;\r\n                        readyToLoadSplatData = true;\r\n                    }\r\n                }\r\n\r\n                if (headerLoaded && readyToLoadSplatData) {\r\n\r\n                    if (chunks.length > 0) {\r\n\r\n                        directLoadBufferIn = storeChunksInBuffer(chunks, directLoadBufferIn);\r\n\r\n                        const bytesLoadedSinceLastStreamedSection = numBytesDownloaded - numBytesStreamed;\r\n                        if (bytesLoadedSinceLastStreamedSection > directLoadSectionSizeBytes || loadComplete) {\r\n                            const numBytesToProcess = numBytesDownloaded - numBytesParsed;\r\n                            const addedSplatCount = Math.floor(numBytesToProcess / header.bytesPerSplat);\r\n                            const numBytesToParse = addedSplatCount * header.bytesPerSplat;\r\n                            const numBytesLeftOver = numBytesToProcess - numBytesToParse;\r\n                            const newSplatCount = splatCount + addedSplatCount;\r\n                            const parsedDataViewOffset = numBytesParsed - chunks[0].startBytes;\r\n                            const dataToParse = new DataView(directLoadBufferIn, parsedDataViewOffset, numBytesToParse);\r\n\r\n                            const shDescriptor = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree];\r\n                            const outOffset = splatCount * shDescriptor.BytesPerSplat + splatDataOffsetBytes;\r\n\r\n                            if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\r\n                                if (compressed) {\r\n                                    PlayCanvasCompressedPlyParser.parseToUncompressedSplatBufferSection(header.chunkElement,\r\n                                                                                                        header.vertexElement, 0,\r\n                                                                                                        addedSplatCount - 1, splatCount,\r\n                                                                                                        dataToParse, 0,\r\n                                                                                                        directLoadBufferOut, outOffset);\r\n                                } else {\r\n                                    inriaV1PlyParser.parseToUncompressedSplatBufferSection(header, 0, addedSplatCount - 1, dataToParse,\r\n                                                                                        0, directLoadBufferOut, outOffset,\r\n                                                                                        outSphericalHarmonicsDegree);\r\n                                }\r\n                            } else {\r\n                                if (compressed) {\r\n                                    PlayCanvasCompressedPlyParser.parseToUncompressedSplatArraySection(header.chunkElement,\r\n                                                                                                    header.vertexElement, 0,\r\n                                                                                                    addedSplatCount - 1, splatCount,\r\n                                                                                                    dataToParse, 0,\r\n                                                                                                    standardLoadUncompressedSplatArray);\r\n                                } else {\r\n                                    inriaV1PlyParser.parseToUncompressedSplatArraySection(header, 0, addedSplatCount - 1, dataToParse,\r\n                                                                                        0, standardLoadUncompressedSplatArray,\r\n                                                                                        outSphericalHarmonicsDegree);\r\n                                }\r\n                            }\r\n\r\n                            splatCount = newSplatCount;\r\n\r\n                            if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\r\n                                if (!directLoadSplatBuffer) {\r\n                                    SplatBuffer.writeSectionHeaderToBuffer({\r\n                                        maxSplatCount: maxSplatCount,\r\n                                        splatCount: splatCount,\r\n                                        bucketSize: 0,\r\n                                        bucketCount: 0,\r\n                                        bucketBlockSize: 0,\r\n                                        compressionScaleRange: 0,\r\n                                        storageSizeBytes: 0,\r\n                                        fullBucketCount: 0,\r\n                                        partiallyFilledBucketCount: 0,\r\n                                        sphericalHarmonicsDegree: outSphericalHarmonicsDegree\r\n                                    }, 0, directLoadBufferOut, SplatBuffer.HeaderSizeBytes);\r\n                                    directLoadSplatBuffer = new SplatBuffer(directLoadBufferOut, false);\r\n                                }\r\n                                directLoadSplatBuffer.updateLoadedCounts(1, splatCount);\r\n                                if (onProgressiveLoadSectionProgress) {\r\n                                    onProgressiveLoadSectionProgress(directLoadSplatBuffer, loadComplete);\r\n                                }\r\n                            }\r\n\r\n                            numBytesStreamed += directLoadSectionSizeBytes;\r\n                            numBytesParsed += numBytesToParse;\r\n\r\n                            if (numBytesLeftOver === 0) {\r\n                                chunks = [];\r\n                            } else {\r\n                                let keepChunks = [];\r\n                                let keepSize = 0;\r\n                                for (let i = chunks.length - 1; i >= 0; i--) {\r\n                                    const chunk = chunks[i];\r\n                                    keepSize += chunk.sizeBytes;\r\n                                    keepChunks.unshift(chunk);\r\n                                    if (keepSize >= numBytesLeftOver) break;\r\n                                }\r\n                                chunks = keepChunks;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (loadComplete) {\r\n                        if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\r\n                            loadPromise.resolve(directLoadSplatBuffer);\r\n                        } else {\r\n                            loadPromise.resolve(standardLoadUncompressedSplatArray);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (onProgress) onProgress(percent, percentLabel, LoaderStatus.Downloading);\r\n        };\r\n\r\n        if (onProgress) onProgress(0, '0%', LoaderStatus.Downloading);\r\n        return fetchWithProgress(fileName, localOnProgress, false, headers).then(() => {\r\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n            return loadPromise.promise.then((splatData) => {\r\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\r\n                if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\r\n                    const chunkDatas = chunks.map((chunk) => chunk.data);\r\n                    return new Blob(chunkDatas).arrayBuffer().then((plyFileData) => {\r\n                        return PlyLoader.loadFromFileData(plyFileData, minimumAlpha, compressionLevel, optimizeSplatData,\r\n                                                          outSphericalHarmonicsDegree, sectionSize, sceneCenter, blockSize, bucketSize);\r\n                    });\r\n                } else if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\r\n                    return splatData;\r\n                } else {\r\n                    return delayedExecute(() => {\r\n                        return finalize(splatData, optimizeSplatData, minimumAlpha, compressionLevel,\r\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    static loadFromFileData(plyFileData, minimumAlpha, compressionLevel, optimizeSplatData, outSphericalHarmonicsDegree = 0,\r\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        return delayedExecute(() => {\r\n            return PlyParser.parseToUncompressedSplatArray(plyFileData, outSphericalHarmonicsDegree);\r\n        })\r\n        .then((splatArray) => {\r\n            return finalize(splatArray, optimizeSplatData, minimumAlpha, compressionLevel,\r\n                            sectionSize, sceneCenter, blockSize, bucketSize);\r\n        });\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\n\r\nexport class SplatParser {\r\n\r\n    static RowSizeBytes = 32;\r\n    static CenterSizeBytes = 12;\r\n    static ScaleSizeBytes = 12;\r\n    static RotationSizeBytes = 4;\r\n    static ColorSizeBytes = 4;\r\n\r\n    static parseToUncompressedSplatBufferSection(fromSplat, toSplat, fromBuffer, fromOffset, toBuffer, toOffset) {\r\n\r\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\r\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\r\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\r\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\r\n\r\n        for (let i = fromSplat; i <= toSplat; i++) {\r\n            const inBase = i * SplatParser.RowSizeBytes + fromOffset;\r\n            const inCenter = new Float32Array(fromBuffer, inBase, 3);\r\n            const inScale = new Float32Array(fromBuffer, inBase + SplatParser.CenterSizeBytes, 3);\r\n            const inColor = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\r\n            const inRotation = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes +\r\n                                              SplatParser.RotationSizeBytes, 4);\r\n\r\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\r\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\r\n            quat.normalize();\r\n\r\n            const outBase = i * outBytesPerSplat + toOffset;\r\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\r\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\r\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\r\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\r\n\r\n            outCenter[0] = inCenter[0];\r\n            outCenter[1] = inCenter[1];\r\n            outCenter[2] = inCenter[2];\r\n\r\n            outScale[0] = inScale[0];\r\n            outScale[1] = inScale[1];\r\n            outScale[2] = inScale[2];\r\n\r\n            outRotation[0] = quat.w;\r\n            outRotation[1] = quat.x;\r\n            outRotation[2] = quat.y;\r\n            outRotation[3] = quat.z;\r\n\r\n            outColor[0] = inColor[0];\r\n            outColor[1] = inColor[1];\r\n            outColor[2] = inColor[2];\r\n            outColor[3] = inColor[3];\r\n        }\r\n    }\r\n\r\n    static parseToUncompressedSplatArraySection(fromSplat, toSplat, fromBuffer, fromOffset, splatArray) {\r\n\r\n        for (let i = fromSplat; i <= toSplat; i++) {\r\n            const inBase = i * SplatParser.RowSizeBytes + fromOffset;\r\n            const inCenter = new Float32Array(fromBuffer, inBase, 3);\r\n            const inScale = new Float32Array(fromBuffer, inBase + SplatParser.CenterSizeBytes, 3);\r\n            const inColor = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\r\n            const inRotation = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes +\r\n                                              SplatParser.RotationSizeBytes, 4);\r\n\r\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\r\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\r\n            quat.normalize();\r\n\r\n            splatArray.addSplatFromComonents(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\r\n                                             quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\r\n        }\r\n    }\r\n\r\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\r\n        // Standard .splat row layout:\r\n        // XYZ - Position (Float32)\r\n        // XYZ - Scale (Float32)\r\n        // RGBA - colors (uint8)\r\n        // IJKL - quaternion/rot (uint8)\r\n\r\n        const splatCount = inBuffer.byteLength / SplatParser.RowSizeBytes;\r\n\r\n        const splatArray = new UncompressedSplatArray();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const inBase = i * SplatParser.RowSizeBytes;\r\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\r\n            const inScale = new Float32Array(inBuffer, inBase + SplatParser.CenterSizeBytes, 3);\r\n            const inColor = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\r\n            const inRotation = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes +\r\n                                              SplatParser.ScaleSizeBytes + SplatParser.ColorSizeBytes, 4);\r\n\r\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\r\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\r\n            quat.normalize();\r\n\r\n            splatArray.addSplatFromComonents(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\r\n                                             quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\r\n        }\r\n\r\n        return splatArray;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\r\nimport { SplatParser } from './SplatParser.js';\r\nimport { fetchWithProgress, delayedExecute, nativePromiseWithExtractedComponents } from '../../Util.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { DirectLoadError } from '../DirectLoadError.js';\r\nimport { Constants } from '../../Constants.js';\r\nimport { InternalLoadType } from '../InternalLoadType.js';\r\n\r\nfunction finalize(splatData, optimizeSplatData, minimumAlpha, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n    if (optimizeSplatData) {\r\n        const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\r\n                                                                               sectionSize, sceneCenter,\r\n                                                                               blockSize, bucketSize);\r\n        return splatBufferGenerator.generateFromUncompressedSplatArray(splatData);\r\n    } else {\r\n        return SplatBuffer.generateFromUncompressedSplatArrays([splatData], minimumAlpha, 0, new THREE.Vector3());\r\n    }\r\n}\r\n\r\nexport class SplatLoader {\r\n\r\n    static loadFromURL(fileName, onProgress, loadDirectoToSplatBuffer, onProgressiveLoadSectionProgress, minimumAlpha, compressionLevel,\r\n                       optimizeSplatData = true, headers, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n\r\n        let internalLoadType = loadDirectoToSplatBuffer ? InternalLoadType.DirectToSplatBuffer : InternalLoadType.DirectToSplatArray;\r\n        if (optimizeSplatData) internalLoadType = InternalLoadType.DirectToSplatArray;\r\n\r\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\r\n        const directLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\r\n        const sectionCount = 1;\r\n\r\n        let directLoadBufferIn;\r\n        let directLoadBufferOut;\r\n        let directLoadSplatBuffer;\r\n        let maxSplatCount = 0;\r\n        let splatCount = 0;\r\n\r\n        let standardLoadUncompressedSplatArray;\r\n\r\n        const loadPromise = nativePromiseWithExtractedComponents();\r\n\r\n        let numBytesStreamed = 0;\r\n        let numBytesLoaded = 0;\r\n        let chunks = [];\r\n\r\n        const localOnProgress = (percent, percentStr, chunk, fileSize) => {\r\n            const loadComplete = percent >= 100;\r\n\r\n            if (chunk) {\r\n                chunks.push(chunk);\r\n            }\r\n\r\n            if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\r\n                if (loadComplete) {\r\n                    loadPromise.resolve(chunks);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (!fileSize) {\r\n                if (loadDirectoToSplatBuffer) {\r\n                    throw new DirectLoadError('Cannon directly load .splat because no file size info is available.');\r\n                } else {\r\n                    internalLoadType = InternalLoadType.DownloadBeforeProcessing;\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (!directLoadBufferIn) {\r\n                maxSplatCount = fileSize / SplatParser.RowSizeBytes;\r\n                directLoadBufferIn = new ArrayBuffer(fileSize);\r\n                const bytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\r\n                const splatBufferSizeBytes = splatDataOffsetBytes + bytesPerSplat * maxSplatCount;\r\n\r\n                if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\r\n                    directLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\r\n                    SplatBuffer.writeHeaderToBuffer({\r\n                        versionMajor: SplatBuffer.CurrentMajorVersion,\r\n                        versionMinor: SplatBuffer.CurrentMinorVersion,\r\n                        maxSectionCount: sectionCount,\r\n                        sectionCount: sectionCount,\r\n                        maxSplatCount: maxSplatCount,\r\n                        splatCount: splatCount,\r\n                        compressionLevel: 0,\r\n                        sceneCenter: new THREE.Vector3()\r\n                    }, directLoadBufferOut);\r\n                } else {\r\n                    standardLoadUncompressedSplatArray = new UncompressedSplatArray(0);\r\n                }\r\n            }\r\n\r\n            if (chunk) {\r\n                new Uint8Array(directLoadBufferIn, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\r\n                numBytesLoaded += chunk.byteLength;\r\n\r\n                const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\r\n                if (bytesLoadedSinceLastSection > directLoadSectionSizeBytes || loadComplete) {\r\n                    const bytesToUpdate = loadComplete ? bytesLoadedSinceLastSection : directLoadSectionSizeBytes;\r\n                    const addedSplatCount = bytesToUpdate / SplatParser.RowSizeBytes;\r\n                    const newSplatCount = splatCount + addedSplatCount;\r\n\r\n                    if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\r\n                        SplatParser.parseToUncompressedSplatBufferSection(splatCount, newSplatCount - 1, directLoadBufferIn, 0,\r\n                                                                            directLoadBufferOut, splatDataOffsetBytes);\r\n                    } else {\r\n                        SplatParser.parseToUncompressedSplatArraySection(splatCount, newSplatCount - 1, directLoadBufferIn, 0,\r\n                                                                            standardLoadUncompressedSplatArray);\r\n                    }\r\n\r\n                    splatCount = newSplatCount;\r\n\r\n                    if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\r\n                        if (!directLoadSplatBuffer) {\r\n                            SplatBuffer.writeSectionHeaderToBuffer({\r\n                                maxSplatCount: maxSplatCount,\r\n                                splatCount: splatCount,\r\n                                bucketSize: 0,\r\n                                bucketCount: 0,\r\n                                bucketBlockSize: 0,\r\n                                compressionScaleRange: 0,\r\n                                storageSizeBytes: 0,\r\n                                fullBucketCount: 0,\r\n                                partiallyFilledBucketCount: 0\r\n                            }, 0, directLoadBufferOut, SplatBuffer.HeaderSizeBytes);\r\n                            directLoadSplatBuffer = new SplatBuffer(directLoadBufferOut, false);\r\n                        }\r\n                        directLoadSplatBuffer.updateLoadedCounts(1, splatCount);\r\n                        if (onProgressiveLoadSectionProgress) {\r\n                            onProgressiveLoadSectionProgress(directLoadSplatBuffer, loadComplete);\r\n                        }\r\n                    }\r\n\r\n                    numBytesStreamed += directLoadSectionSizeBytes;\r\n                }\r\n            }\r\n\r\n            if (loadComplete) {\r\n                if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\r\n                    loadPromise.resolve(directLoadSplatBuffer);\r\n                } else {\r\n                    loadPromise.resolve(standardLoadUncompressedSplatArray);\r\n                }\r\n            }\r\n\r\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\r\n        };\r\n\r\n        if (onProgress) onProgress(0, '0%', LoaderStatus.Downloading);\r\n        return fetchWithProgress(fileName, localOnProgress, false, headers).then(() => {\r\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n            return loadPromise.promise.then((splatData) => {\r\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\r\n                if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\r\n                    return new Blob(chunks).arrayBuffer().then((splatData) => {\r\n                        return SplatLoader.loadFromFileData(splatData, minimumAlpha, compressionLevel, optimizeSplatData,\r\n                                                            sectionSize, sceneCenter, blockSize, bucketSize);\r\n                    });\r\n                } else if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\r\n                    return splatData;\r\n                } else {\r\n                    return delayedExecute(() => {\r\n                        return finalize(splatData, optimizeSplatData, minimumAlpha, compressionLevel,\r\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    static loadFromFileData(splatFileData, minimumAlpha, compressionLevel, optimizeSplatData,\r\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        return delayedExecute(() => {\r\n            const splatArray = SplatParser.parseStandardSplatToUncompressedSplatArray(splatFileData);\r\n            return finalize(splatArray, optimizeSplatData, minimumAlpha, compressionLevel,\r\n                            sectionSize, sceneCenter, blockSize, bucketSize);\r\n        });\r\n    }\r\n\r\n}\r\n","import { SplatBuffer } from '../SplatBuffer.js';\r\nimport { fetchWithProgress, delayedExecute, nativePromiseWithExtractedComponents } from '../../Util.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { Constants } from '../../Constants.js';\r\n\r\nexport class KSplatLoader {\r\n\r\n   static checkVersion(buffer) {\r\n        const minVersionMajor = SplatBuffer.CurrentMajorVersion;\r\n        const minVersionMinor = SplatBuffer.CurrentMinorVersion;\r\n        const header = SplatBuffer.parseHeader(buffer);\r\n        if (header.versionMajor === minVersionMajor &&\r\n            header.versionMinor >= minVersionMinor ||\r\n            header.versionMajor > minVersionMajor) {\r\n           return true;\r\n        } else {\r\n            throw new Error(`KSplat version not supported: v${header.versionMajor}.${header.versionMinor}. ` +\r\n                            `Minimum required: v${minVersionMajor}.${minVersionMinor}`);\r\n        }\r\n    };\r\n\r\n    static loadFromURL(fileName, externalOnProgress, loadDirectoToSplatBuffer, onSectionBuilt, headers) {\r\n        let directLoadBuffer;\r\n        let directLoadSplatBuffer;\r\n\r\n        let headerBuffer;\r\n        let header;\r\n        let headerLoaded = false;\r\n        let headerLoading = false;\r\n\r\n        let sectionHeadersBuffer;\r\n        let sectionHeaders = [];\r\n        let sectionHeadersLoaded = false;\r\n        let sectionHeadersLoading = false;\r\n\r\n        let numBytesLoaded = 0;\r\n        let numBytesProgressivelyLoaded = 0;\r\n        let totalBytesToDownload = 0;\r\n\r\n        let downloadComplete = false;\r\n        let loadComplete = false;\r\n        let loadSectionQueued = false;\r\n\r\n        let chunks = [];\r\n\r\n        const directLoadPromise = nativePromiseWithExtractedComponents();\r\n\r\n        const checkAndLoadHeader = () => {\r\n            if (!headerLoaded && !headerLoading && numBytesLoaded >= SplatBuffer.HeaderSizeBytes) {\r\n                headerLoading = true;\r\n                const headerAssemblyPromise = new Blob(chunks).arrayBuffer();\r\n                headerAssemblyPromise.then((bufferData) => {\r\n                    headerBuffer = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\r\n                    new Uint8Array(headerBuffer).set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\r\n                    KSplatLoader.checkVersion(headerBuffer);\r\n                    headerLoading = false;\r\n                    headerLoaded = true;\r\n                    header = SplatBuffer.parseHeader(headerBuffer);\r\n                    window.setTimeout(() => {\r\n                        checkAndLoadSectionHeaders();\r\n                    }, 1);\r\n                });\r\n            }\r\n        };\r\n\r\n        let queuedCheckAndLoadSectionsCount = 0;\r\n        const queueCheckAndLoadSections = () => {\r\n            if (queuedCheckAndLoadSectionsCount === 0) {\r\n                queuedCheckAndLoadSectionsCount++;\r\n                window.setTimeout(() => {\r\n                    queuedCheckAndLoadSectionsCount--;\r\n                    checkAndLoadSections();\r\n                }, 1);\r\n            }\r\n        };\r\n\r\n        const checkAndLoadSectionHeaders = () => {\r\n            const performLoad = () => {\r\n                sectionHeadersLoading = true;\r\n                const sectionHeadersAssemblyPromise = new Blob(chunks).arrayBuffer();\r\n                sectionHeadersAssemblyPromise.then((bufferData) => {\r\n                    sectionHeadersLoading = false;\r\n                    sectionHeadersLoaded = true;\r\n                    sectionHeadersBuffer = new ArrayBuffer(header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes);\r\n                    new Uint8Array(sectionHeadersBuffer).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes,\r\n                                                                            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes));\r\n                    sectionHeaders = SplatBuffer.parseSectionHeaders(header, sectionHeadersBuffer, 0, false);\r\n                    let totalSectionStorageStorageByes = 0;\r\n                    for (let i = 0; i < header.maxSectionCount; i++) {\r\n                        totalSectionStorageStorageByes += sectionHeaders[i].storageSizeBytes;\r\n                    }\r\n                    const totalStorageSizeBytes = SplatBuffer.HeaderSizeBytes + header.maxSectionCount *\r\n                                                  SplatBuffer.SectionHeaderSizeBytes + totalSectionStorageStorageByes;\r\n                    if (!directLoadBuffer) {\r\n                        directLoadBuffer = new ArrayBuffer(totalStorageSizeBytes);\r\n                        let offset = 0;\r\n                        for (let i = 0; i < chunks.length; i++) {\r\n                            const chunk = chunks[i];\r\n                            new Uint8Array(directLoadBuffer, offset, chunk.byteLength).set(new Uint8Array(chunk));\r\n                            offset += chunk.byteLength;\r\n                        }\r\n                    }\r\n\r\n                    totalBytesToDownload = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\r\n                    for (let i = 0; i <= sectionHeaders.length && i < header.maxSectionCount; i++) {\r\n                        totalBytesToDownload += sectionHeaders[i].storageSizeBytes;\r\n                    }\r\n\r\n                    queueCheckAndLoadSections();\r\n                });\r\n            };\r\n\r\n            if (!sectionHeadersLoading && !sectionHeadersLoaded && headerLoaded &&\r\n                numBytesLoaded >= SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount) {\r\n                performLoad();\r\n            }\r\n        };\r\n\r\n        const checkAndLoadSections = () => {\r\n            if (loadSectionQueued) return;\r\n            loadSectionQueued = true;\r\n            const checkAndLoadFunc = () => {\r\n                loadSectionQueued = false;\r\n                if (sectionHeadersLoaded) {\r\n\r\n                    if (loadComplete) return;\r\n\r\n                    downloadComplete = numBytesLoaded >= totalBytesToDownload;\r\n\r\n                    let bytesLoadedSinceLastSection = numBytesLoaded - numBytesProgressivelyLoaded;\r\n                    if (bytesLoadedSinceLastSection > Constants.ProgressiveLoadSectionSize || downloadComplete) {\r\n\r\n                        numBytesProgressivelyLoaded += Constants.ProgressiveLoadSectionSize;\r\n                        loadComplete = numBytesProgressivelyLoaded >= totalBytesToDownload;\r\n\r\n                        if (!directLoadSplatBuffer) directLoadSplatBuffer = new SplatBuffer(directLoadBuffer, false);\r\n\r\n                        const baseDataOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\r\n                        let sectionBase = 0;\r\n                        let reachedSections = 0;\r\n                        let loadedSplatCount = 0;\r\n                        for (let i = 0; i < header.maxSectionCount; i++) {\r\n                            const sectionHeader = sectionHeaders[i];\r\n                            const bucketsDataOffset = sectionBase + sectionHeader.partiallyFilledBucketCount * 4 +\r\n                                                    sectionHeader.bucketStorageSizeBytes * sectionHeader.bucketCount;\r\n                            const bytesRequiredToReachSectionSplatData = baseDataOffset + bucketsDataOffset;\r\n                            if (numBytesProgressivelyLoaded >= bytesRequiredToReachSectionSplatData) {\r\n                                reachedSections++;\r\n                                const bytesPastSSectionSplatDataStart = numBytesProgressivelyLoaded - bytesRequiredToReachSectionSplatData;\r\n                                const baseDescriptor = SplatBuffer.CompressionLevels[header.compressionLevel];\r\n                                const shDesc = baseDescriptor.SphericalHarmonicsDegrees[sectionHeader.sphericalHarmonicsDegree];\r\n                                const bytesPerSplat = shDesc.BytesPerSplat;\r\n                                let loadedSplatsForSection = Math.floor(bytesPastSSectionSplatDataStart / bytesPerSplat);\r\n                                loadedSplatsForSection = Math.min(loadedSplatsForSection, sectionHeader.maxSplatCount);\r\n                                loadedSplatCount += loadedSplatsForSection;\r\n                                directLoadSplatBuffer.updateLoadedCounts(reachedSections, loadedSplatCount);\r\n                                directLoadSplatBuffer.updateSectionLoadedCounts(i, loadedSplatsForSection);\r\n                            } else {\r\n                                break;\r\n                            }\r\n                            sectionBase += sectionHeader.storageSizeBytes;\r\n                        }\r\n\r\n                        onSectionBuilt(directLoadSplatBuffer, loadComplete);\r\n\r\n                        const percentComplete = numBytesProgressivelyLoaded / totalBytesToDownload * 100;\r\n                        const percentLabel = (percentComplete).toFixed(2) + '%';\r\n\r\n                        if (externalOnProgress) externalOnProgress(percentComplete, percentLabel, LoaderStatus.Downloading);\r\n\r\n                        if (loadComplete) {\r\n                            directLoadPromise.resolve(directLoadSplatBuffer);\r\n                        } else {\r\n                            checkAndLoadSections();\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            window.setTimeout(checkAndLoadFunc, Constants.ProgressiveLoadSectionDelayDuration);\r\n        };\r\n\r\n        const localOnProgress = (percent, percentStr, chunk) => {\r\n            if (chunk) {\r\n                chunks.push(chunk);\r\n                if (directLoadBuffer) {\r\n                    new Uint8Array(directLoadBuffer, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\r\n                }\r\n                numBytesLoaded += chunk.byteLength;\r\n            }\r\n            if (loadDirectoToSplatBuffer) {\r\n                checkAndLoadHeader();\r\n                checkAndLoadSectionHeaders();\r\n                checkAndLoadSections();\r\n            } else {\r\n                if (externalOnProgress) externalOnProgress(percent, percentStr, LoaderStatus.Downloading);\r\n            }\r\n        };\r\n\r\n        return fetchWithProgress(fileName, localOnProgress, !loadDirectoToSplatBuffer, headers).then((fullBuffer) => {\r\n            if (externalOnProgress) externalOnProgress(0, '0%', LoaderStatus.Processing);\r\n            const loadPromise = loadDirectoToSplatBuffer ? directLoadPromise.promise : KSplatLoader.loadFromFileData(fullBuffer);\r\n            return loadPromise.then((splatBuffer) => {\r\n                if (externalOnProgress) externalOnProgress(100, '100%', LoaderStatus.Done);\r\n                return splatBuffer;\r\n            });\r\n        });\r\n    }\r\n\r\n    static loadFromFileData(fileData) {\r\n        return delayedExecute(() => {\r\n            KSplatLoader.checkVersion(fileData);\r\n            return new SplatBuffer(fileData);\r\n        });\r\n    }\r\n\r\n    static downloadFile = function() {\r\n\r\n        let downLoadLink;\r\n\r\n        return function(splatBuffer, fileName) {\r\n            const blob = new Blob([splatBuffer.bufferData], {\r\n                type: 'application/octet-stream',\r\n            });\r\n\r\n            if (!downLoadLink) {\r\n                downLoadLink = document.createElement('a');\r\n                document.body.appendChild(downLoadLink);\r\n            }\r\n            downLoadLink.download = fileName;\r\n            downLoadLink.href = URL.createObjectURL(blob);\r\n            downLoadLink.click();\r\n        };\r\n\r\n    }();\r\n\r\n}\r\n","export const SceneFormat = {\r\n    'Splat': 0,\r\n    'KSplat': 1,\r\n    'Ply': 2\r\n};\r\n","import { SceneFormat } from './SceneFormat.js';\r\n\r\nexport const sceneFormatFromPath = (path) => {\r\n    if (path.endsWith('.ply')) return SceneFormat.Ply;\r\n    else if (path.endsWith('.splat')) return SceneFormat.Splat;\r\n    else if (path.endsWith('.ksplat')) return SceneFormat.KSplat;\r\n    return null;\r\n};\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nimport {\r\n    EventDispatcher,\r\n    MOUSE,\r\n    Quaternion,\r\n    Spherical,\r\n    TOUCH,\r\n    Vector2,\r\n    Vector3,\r\n    Plane,\r\n    Ray,\r\n    MathUtils\r\n} from 'three';\r\n\r\n// OrbitControls performs orbiting, dollying (zooming), and panning.\r\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n//\r\n//    Orbit - left mouse / touch: one-finger move\r\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\r\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\r\n\r\nconst _changeEvent = { type: 'change' };\r\nconst _startEvent = { type: 'start' };\r\nconst _endEvent = { type: 'end' };\r\nconst _ray = new Ray();\r\nconst _plane = new Plane();\r\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\r\n\r\nclass OrbitControls extends EventDispatcher {\r\n\r\n    constructor( object, domElement ) {\r\n\r\n        super();\r\n\r\n        this.object = object;\r\n        this.domElement = domElement;\r\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\r\n\r\n        // Set to false to disable this control\r\n        this.enabled = true;\r\n\r\n        // \"target\" sets the location of focus, where the object orbits around\r\n        this.target = new Vector3();\r\n\r\n        // How far you can dolly in and out ( PerspectiveCamera only )\r\n        this.minDistance = 0;\r\n        this.maxDistance = Infinity;\r\n\r\n        // How far you can zoom in and out ( OrthographicCamera only )\r\n        this.minZoom = 0;\r\n        this.maxZoom = Infinity;\r\n\r\n        // How far you can orbit vertically, upper and lower limits.\r\n        // Range is 0 to Math.PI radians.\r\n        this.minPolarAngle = 0; // radians\r\n        this.maxPolarAngle = Math.PI; // radians\r\n\r\n        // How far you can orbit horizontally, upper and lower limits.\r\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\r\n        this.minAzimuthAngle = - Infinity; // radians\r\n        this.maxAzimuthAngle = Infinity; // radians\r\n\r\n        // Set to true to enable damping (inertia)\r\n        // If damping is enabled, you must call controls.update() in your animation loop\r\n        this.enableDamping = false;\r\n        this.dampingFactor = 0.05;\r\n\r\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n        // Set to false to disable zooming\r\n        this.enableZoom = true;\r\n        this.zoomSpeed = 1.0;\r\n\r\n        // Set to false to disable rotating\r\n        this.enableRotate = true;\r\n        this.rotateSpeed = 1.0;\r\n\r\n        // Set to false to disable panning\r\n        this.enablePan = true;\r\n        this.panSpeed = 1.0;\r\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\r\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n        this.zoomToCursor = false;\r\n\r\n        // Set to true to automatically rotate around the target\r\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n        this.autoRotate = false;\r\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\r\n\r\n        // The four arrow keys\r\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\r\n\r\n        // Mouse buttons\r\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\r\n\r\n        // Touch fingers\r\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\r\n\r\n        // for reset\r\n        this.target0 = this.target.clone();\r\n        this.position0 = this.object.position.clone();\r\n        this.zoom0 = this.object.zoom;\r\n\r\n        // the target DOM element for key events\r\n        this._domElementKeyEvents = null;\r\n\r\n        //\r\n        // public methods\r\n        //\r\n\r\n        this.getPolarAngle = function() {\r\n\r\n            return spherical.phi;\r\n\r\n        };\r\n\r\n        this.getAzimuthalAngle = function() {\r\n\r\n            return spherical.theta;\r\n\r\n        };\r\n\r\n        this.getDistance = function() {\r\n\r\n            return this.object.position.distanceTo( this.target );\r\n\r\n        };\r\n\r\n        this.listenToKeyEvents = function( domElement ) {\r\n\r\n            domElement.addEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = domElement;\r\n\r\n        };\r\n\r\n        this.stopListenToKeyEvents = function() {\r\n\r\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = null;\r\n\r\n        };\r\n\r\n        this.saveState = function() {\r\n\r\n            scope.target0.copy( scope.target );\r\n            scope.position0.copy( scope.object.position );\r\n            scope.zoom0 = scope.object.zoom;\r\n\r\n        };\r\n\r\n        this.reset = function() {\r\n\r\n            scope.target.copy( scope.target0 );\r\n            scope.object.position.copy( scope.position0 );\r\n            scope.object.zoom = scope.zoom0;\r\n            this.clearDampedRotation();\r\n            this.clearDampedPan();\r\n\r\n            scope.object.updateProjectionMatrix();\r\n            scope.dispatchEvent( _changeEvent );\r\n\r\n            scope.update();\r\n\r\n            state = STATE.NONE;\r\n\r\n        };\r\n\r\n        this.clearDampedRotation = function() {\r\n            sphericalDelta.theta = 0.0;\r\n            sphericalDelta.phi = 0.0;\r\n        };\r\n\r\n        this.clearDampedPan = function() {\r\n            panOffset.set(0, 0, 0);\r\n        };\r\n\r\n        // this method is exposed, but perhaps it would be better if we can make it private...\r\n        this.update = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            // so camera.up is the orbit axis\r\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n            const quatInverse = quat.clone().invert();\r\n\r\n            const lastPosition = new Vector3();\r\n            const lastQuaternion = new Quaternion();\r\n            const lastTargetPosition = new Vector3();\r\n\r\n            const twoPI = 2 * Math.PI;\r\n\r\n            return function update() {\r\n\r\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n                quatInverse.copy(quat).invert();\r\n\r\n                const position = scope.object.position;\r\n\r\n                offset.copy( position ).sub( scope.target );\r\n\r\n                // rotate offset to \"y-axis-is-up\" space\r\n                offset.applyQuaternion( quat );\r\n\r\n                // angle from z-axis around y-axis\r\n                spherical.setFromVector3( offset );\r\n\r\n                if ( scope.autoRotate && state === STATE.NONE ) {\r\n\r\n                    rotateLeft( getAutoRotationAngle() );\r\n\r\n                }\r\n\r\n                if ( scope.enableDamping ) {\r\n\r\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\r\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\r\n\r\n                } else {\r\n\r\n                    spherical.theta += sphericalDelta.theta;\r\n                    spherical.phi += sphericalDelta.phi;\r\n\r\n                }\r\n\r\n                // restrict theta to be between desired limits\r\n\r\n                let min = scope.minAzimuthAngle;\r\n                let max = scope.maxAzimuthAngle;\r\n\r\n                if ( isFinite( min ) && isFinite( max ) ) {\r\n\r\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\r\n\r\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\r\n\r\n                    if ( min <= max ) {\r\n\r\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\r\n\r\n                    } else {\r\n\r\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\r\n                            Math.max( min, spherical.theta ) :\r\n                            Math.min( max, spherical.theta );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                // restrict phi to be between desired limits\r\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\r\n\r\n                spherical.makeSafe();\r\n\r\n\r\n                // move target to panned location\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    scope.target.add( panOffset );\r\n\r\n                }\r\n\r\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\r\n                // we adjust zoom later in these cases\r\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius );\r\n\r\n                } else {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius * scale );\r\n\r\n                }\r\n\r\n\r\n                offset.setFromSpherical( spherical );\r\n\r\n                // rotate offset back to \"camera-up-vector-is-up\" space\r\n                offset.applyQuaternion( quatInverse );\r\n\r\n                position.copy( scope.target ).add( offset );\r\n\r\n                scope.object.lookAt( scope.target );\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\r\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\r\n\r\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    sphericalDelta.set( 0, 0, 0 );\r\n\r\n                    panOffset.set( 0, 0, 0 );\r\n\r\n                }\r\n\r\n                // adjust camera position\r\n                let zoomChanged = false;\r\n                if ( scope.zoomToCursor && performCursorZoom ) {\r\n\r\n                    let newRadius = null;\r\n                    if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                        // move the camera down the pointer ray\r\n                        // this method avoids floating point error\r\n                        const prevRadius = offset.length();\r\n                        newRadius = clampDistance( prevRadius * scale );\r\n\r\n                        const radiusDelta = prevRadius - newRadius;\r\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                    } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                        // adjust the ortho camera position based on zoom changes\r\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseBefore.unproject( scope.object );\r\n\r\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                        scope.object.updateProjectionMatrix();\r\n                        zoomChanged = true;\r\n\r\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseAfter.unproject( scope.object );\r\n\r\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                        newRadius = offset.length();\r\n\r\n                    } else {\r\n\r\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\r\n                        scope.zoomToCursor = false;\r\n\r\n                    }\r\n\r\n                    // handle the placement of the target\r\n                    if ( newRadius !== null ) {\r\n\r\n                        if ( this.screenSpacePanning ) {\r\n\r\n                            // position the orbit target in front of the new camera position\r\n                            scope.target.set( 0, 0, - 1 )\r\n                                .transformDirection( scope.object.matrix )\r\n                                .multiplyScalar( newRadius )\r\n                                .add( scope.object.position );\r\n\r\n                        } else {\r\n\r\n                            // get the ray and translation plane to compute target\r\n                            _ray.origin.copy( scope.object.position );\r\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\r\n\r\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\r\n                            // extremely large values\r\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\r\n\r\n                                object.lookAt( scope.target );\r\n\r\n                            } else {\r\n\r\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\r\n                                _ray.intersectPlane( _plane, scope.target );\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                    scope.object.updateProjectionMatrix();\r\n                    zoomChanged = true;\r\n\r\n                }\r\n\r\n                scale = 1;\r\n                performCursorZoom = false;\r\n\r\n                // update condition is:\r\n                // min(camera displacement, camera rotation in radians)^2 > EPS\r\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n                if ( zoomChanged ||\r\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\r\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\r\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\r\n\r\n                    scope.dispatchEvent( _changeEvent );\r\n\r\n                    lastPosition.copy( scope.object.position );\r\n                    lastQuaternion.copy( scope.object.quaternion );\r\n                    lastTargetPosition.copy( scope.target );\r\n\r\n                    zoomChanged = false;\r\n\r\n                    return true;\r\n\r\n                }\r\n\r\n                return false;\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        this.dispose = function() {\r\n\r\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\r\n\r\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\r\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\r\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\r\n\r\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n\r\n            if ( scope._domElementKeyEvents !== null ) {\r\n\r\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n                scope._domElementKeyEvents = null;\r\n\r\n            }\r\n\r\n        };\r\n\r\n        //\r\n        // internals\r\n        //\r\n\r\n        const scope = this;\r\n\r\n        const STATE = {\r\n            NONE: - 1,\r\n            ROTATE: 0,\r\n            DOLLY: 1,\r\n            PAN: 2,\r\n            TOUCH_ROTATE: 3,\r\n            TOUCH_PAN: 4,\r\n            TOUCH_DOLLY_PAN: 5,\r\n            TOUCH_DOLLY_ROTATE: 6\r\n        };\r\n\r\n        let state = STATE.NONE;\r\n\r\n        const EPS = 0.000001;\r\n\r\n        // current position in spherical coordinates\r\n        const spherical = new Spherical();\r\n        const sphericalDelta = new Spherical();\r\n\r\n        let scale = 1;\r\n        const panOffset = new Vector3();\r\n\r\n        const rotateStart = new Vector2();\r\n        const rotateEnd = new Vector2();\r\n        const rotateDelta = new Vector2();\r\n\r\n        const panStart = new Vector2();\r\n        const panEnd = new Vector2();\r\n        const panDelta = new Vector2();\r\n\r\n        const dollyStart = new Vector2();\r\n        const dollyEnd = new Vector2();\r\n        const dollyDelta = new Vector2();\r\n\r\n        const dollyDirection = new Vector3();\r\n        const mouse = new Vector2();\r\n        let performCursorZoom = false;\r\n\r\n        const pointers = [];\r\n        const pointerPositions = {};\r\n\r\n        function getAutoRotationAngle() {\r\n\r\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n\r\n        }\r\n\r\n        function getZoomScale() {\r\n\r\n            return Math.pow( 0.95, scope.zoomSpeed );\r\n\r\n        }\r\n\r\n        function rotateLeft( angle ) {\r\n\r\n            sphericalDelta.theta -= angle;\r\n\r\n        }\r\n\r\n        function rotateUp( angle ) {\r\n\r\n            sphericalDelta.phi -= angle;\r\n\r\n        }\r\n\r\n        const panLeft = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panLeft( distance, objectMatrix ) {\r\n\r\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\r\n                v.multiplyScalar( - distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        const panUp = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panUp( distance, objectMatrix ) {\r\n\r\n                if ( scope.screenSpacePanning === true ) {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 1 );\r\n\r\n                } else {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 0 );\r\n                    v.crossVectors( scope.object.up, v );\r\n\r\n                }\r\n\r\n                v.multiplyScalar( distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        // deltaX and deltaY are in pixels; right and down are positive\r\n        const pan = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            return function pan( deltaX, deltaY ) {\r\n\r\n                const element = scope.domElement;\r\n\r\n                if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                    // perspective\r\n                    const position = scope.object.position;\r\n                    offset.copy( position ).sub( scope.target );\r\n                    let targetDistance = offset.length();\r\n\r\n                    // half of the fov is center to top of screen\r\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\r\n\r\n                    // we use only clientHeight here so aspect ratio does not distort speed\r\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\r\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    // orthographic\r\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\r\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\r\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\r\n                                      element.clientHeight, scope.object.matrix );\r\n\r\n                } else {\r\n\r\n                    // camera neither orthographic nor perspective\r\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\r\n                    scope.enablePan = false;\r\n\r\n                }\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        function dollyOut( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale /= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function dollyIn( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale *= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function updateMouseParameters( event ) {\r\n\r\n            if ( ! scope.zoomToCursor ) {\r\n\r\n                return;\r\n\r\n            }\r\n\r\n            performCursorZoom = true;\r\n\r\n            const rect = scope.domElement.getBoundingClientRect();\r\n            const x = event.clientX - rect.left;\r\n            const y = event.clientY - rect.top;\r\n            const w = rect.width;\r\n            const h = rect.height;\r\n\r\n            mouse.x = ( x / w ) * 2 - 1;\r\n            mouse.y = - ( y / h ) * 2 + 1;\r\n\r\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\r\n\r\n        }\r\n\r\n        function clampDistance( dist ) {\r\n\r\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\r\n\r\n        }\r\n\r\n        //\r\n        // event callbacks - update the object state\r\n        //\r\n\r\n        function handleMouseDownRotate( event ) {\r\n\r\n            rotateStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownDolly( event ) {\r\n\r\n            updateMouseParameters( event );\r\n            dollyStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownPan( event ) {\r\n\r\n            panStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseMoveRotate( event ) {\r\n\r\n            rotateEnd.set( event.clientX, event.clientY );\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMoveDolly( event ) {\r\n\r\n            dollyEnd.set( event.clientX, event.clientY );\r\n\r\n            dollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n            if ( dollyDelta.y > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            } else if ( dollyDelta.y < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            }\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMovePan( event ) {\r\n\r\n            panEnd.set( event.clientX, event.clientY );\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseWheel( event ) {\r\n\r\n            updateMouseParameters( event );\r\n\r\n            if ( event.deltaY < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            } else if ( event.deltaY > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            }\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleKeyDown( event ) {\r\n\r\n            let needsUpdate = false;\r\n\r\n            switch ( event.code ) {\r\n\r\n                case scope.keys.UP:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.BOTTOM:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, - scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.LEFT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.RIGHT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( - scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n            }\r\n\r\n            if ( needsUpdate ) {\r\n\r\n                // prevent the browser from scrolling on cursor keys\r\n                event.preventDefault();\r\n\r\n                scope.update();\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        function handleTouchStartRotate() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                rotateStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartPan() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                panStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartDolly() {\r\n\r\n            const dx = pointers[0].pageX - pointers[1].pageX;\r\n            const dy = pointers[0].pageY - pointers[1].pageY;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyStart.set( 0, distance );\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyPan() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enablePan ) handleTouchStartPan();\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyRotate() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enableRotate ) handleTouchStartRotate();\r\n\r\n        }\r\n\r\n        function handleTouchMoveRotate( event ) {\r\n\r\n            if ( pointers.length == 1 ) {\r\n\r\n                rotateEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                rotateEnd.set( x, y );\r\n\r\n            }\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMovePan( event ) {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                panEnd.set( x, y );\r\n\r\n            }\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDolly( event ) {\r\n\r\n            const position = getSecondPointerPosition( event );\r\n\r\n            const dx = event.pageX - position.x;\r\n            const dy = event.pageY - position.y;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyEnd.set( 0, distance );\r\n\r\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\r\n\r\n            dollyOut( dollyDelta.y );\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyPan( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enablePan ) handleTouchMovePan( event );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyRotate( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\r\n\r\n        }\r\n\r\n        //\r\n        // event handlers - FSM: listen for events and reset state\r\n        //\r\n\r\n        function onPointerDown( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.setPointerCapture( event.pointerId );\r\n\r\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            //\r\n\r\n            addPointer( event );\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchStart( event );\r\n\r\n            } else {\r\n\r\n                onMouseDown( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerMove( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchMove( event );\r\n\r\n            } else {\r\n\r\n                onMouseMove( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerUp( event ) {\r\n\r\n            removePointer( event );\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.releasePointerCapture( event.pointerId );\r\n\r\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n            state = STATE.NONE;\r\n\r\n        }\r\n\r\n        function onMouseDown( event ) {\r\n\r\n            let mouseAction;\r\n\r\n            switch ( event.button ) {\r\n\r\n                case 0:\r\n\r\n                    mouseAction = scope.mouseButtons.LEFT;\r\n                    break;\r\n\r\n                case 1:\r\n\r\n                    mouseAction = scope.mouseButtons.MIDDLE;\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    mouseAction = scope.mouseButtons.RIGHT;\r\n                    break;\r\n\r\n                default:\r\n\r\n                    mouseAction = - 1;\r\n\r\n            }\r\n\r\n            switch ( mouseAction ) {\r\n\r\n                case MOUSE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseDownDolly( event );\r\n\r\n                    state = STATE.DOLLY;\r\n\r\n                    break;\r\n\r\n                case MOUSE.ROTATE:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case MOUSE.PAN:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseMove( event ) {\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleMouseMoveRotate( event );\r\n\r\n                    break;\r\n\r\n                case STATE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseMoveDolly( event );\r\n\r\n                    break;\r\n\r\n                case STATE.PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleMouseMovePan( event );\r\n\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseWheel( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\r\n\r\n            event.preventDefault();\r\n\r\n            scope.dispatchEvent( _startEvent );\r\n\r\n            handleMouseWheel( event );\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n        }\r\n\r\n        function onKeyDown( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enablePan === false ) return;\r\n\r\n            handleKeyDown( event );\r\n\r\n        }\r\n\r\n        function onTouchStart( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( pointers.length ) {\r\n\r\n                case 1:\r\n\r\n                    switch ( scope.touches.ONE ) {\r\n\r\n                        case TOUCH.ROTATE:\r\n\r\n                            if ( scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartRotate();\r\n\r\n                            state = STATE.TOUCH_ROTATE;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.PAN:\r\n\r\n                            if ( scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartPan();\r\n\r\n                            state = STATE.TOUCH_PAN;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    switch ( scope.touches.TWO ) {\r\n\r\n                        case TOUCH.DOLLY_PAN:\r\n\r\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartDollyPan();\r\n\r\n                            state = STATE.TOUCH_DOLLY_PAN;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.DOLLY_ROTATE:\r\n\r\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartDollyRotate();\r\n\r\n                            state = STATE.TOUCH_DOLLY_ROTATE;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onTouchMove( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.TOUCH_ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleTouchMovePan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_PAN:\r\n\r\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                    handleTouchMoveDollyPan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_ROTATE:\r\n\r\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveDollyRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onContextMenu( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            event.preventDefault();\r\n\r\n        }\r\n\r\n        function addPointer( event ) {\r\n\r\n            pointers.push( event );\r\n\r\n        }\r\n\r\n        function removePointer( event ) {\r\n\r\n            delete pointerPositions[event.pointerId];\r\n\r\n            for ( let i = 0; i < pointers.length; i ++ ) {\r\n\r\n                if ( pointers[i].pointerId == event.pointerId ) {\r\n\r\n                    pointers.splice( i, 1 );\r\n                    return;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function trackPointer( event ) {\r\n\r\n            let position = pointerPositions[event.pointerId];\r\n\r\n            if ( position === undefined ) {\r\n\r\n                position = new Vector2();\r\n                pointerPositions[event.pointerId] = position;\r\n\r\n            }\r\n\r\n            position.set( event.pageX, event.pageY );\r\n\r\n        }\r\n\r\n        function getSecondPointerPosition( event ) {\r\n\r\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\r\n\r\n            return pointerPositions[pointer.pointerId];\r\n\r\n        }\r\n\r\n        //\r\n\r\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\r\n\r\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\r\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\r\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\r\n\r\n        // force an update at start\r\n\r\n        this.update();\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { OrbitControls };\r\n","import { fadeElement } from './Util.js';\r\n\r\nconst STANDARD_FADE_DURATION = 500;\r\n\r\nexport class LoadingSpinner {\r\n\r\n    static elementIDGen = 0;\r\n\r\n    constructor(message, container) {\r\n\r\n        this.taskIDGen = 0;\r\n        this.elementID = LoadingSpinner.elementIDGen++;\r\n\r\n        this.tasks = [];\r\n\r\n        this.message = message || 'Loading...';\r\n        this.container = container || document.body;\r\n\r\n        this.spinnerContainerOuter = document.createElement('div');\r\n        this.spinnerContainerOuter.className = `spinnerOuterContainer${this.elementID}`;\r\n        this.spinnerContainerOuter.style.display = 'none';\r\n\r\n        this.spinnerContainerPrimary = document.createElement('div');\r\n        this.spinnerContainerPrimary.className = `spinnerContainerPrimary${this.elementID}`;\r\n        this.spinnerPrimary = document.createElement('div');\r\n        this.spinnerPrimary.classList.add(`spinner${this.elementID}`, `spinnerPrimary${this.elementID}`);\r\n        this.messageContainerPrimary = document.createElement('div');\r\n        this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`, `messageContainerPrimary${this.elementID}`);\r\n        this.messageContainerPrimary.innerHTML = this.message;\r\n\r\n        this.spinnerContainerMin = document.createElement('div');\r\n        this.spinnerContainerMin.className = `spinnerContainerMin${this.elementID}`;\r\n        this.spinnerMin = document.createElement('div');\r\n        this.spinnerMin.classList.add(`spinner${this.elementID}`, `spinnerMin${this.elementID}`);\r\n        this.messageContainerMin = document.createElement('div');\r\n        this.messageContainerMin.classList.add(`messageContainer${this.elementID}`, `messageContainerMin${this.elementID}`);\r\n        this.messageContainerMin.innerHTML = this.message;\r\n\r\n        this.spinnerContainerPrimary.appendChild(this.spinnerPrimary);\r\n        this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary);\r\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary);\r\n\r\n        this.spinnerContainerMin.appendChild(this.spinnerMin);\r\n        this.spinnerContainerMin.appendChild(this.messageContainerMin);\r\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);\r\n\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .spinnerOuterContainer${this.elementID} {\r\n                width: 100%;\r\n                height: 100%;\r\n                margin: 0;\r\n                top: 0;\r\n                left: 0;\r\n                position: absolute;\r\n                pointer-events: none;\r\n            }\r\n\r\n            .messageContainer${this.elementID} {\r\n                height: 20px;\r\n                font-family: arial;\r\n                font-size: 12pt;\r\n                color: #ffffff;\r\n                text-align: center;\r\n                vertical-align: middle;\r\n            }\r\n\r\n            .spinner${this.elementID} {\r\n                padding: 15px;\r\n                background: #07e8d6;\r\n                z-index:99999;\r\n            \r\n                aspect-ratio: 1;\r\n                border-radius: 50%;\r\n                --_m: \r\n                    conic-gradient(#0000,#000),\r\n                    linear-gradient(#000 0 0) content-box;\r\n                -webkit-mask: var(--_m);\r\n                    mask: var(--_m);\r\n                -webkit-mask-composite: source-out;\r\n                    mask-composite: subtract;\r\n                box-sizing: border-box;\r\n                animation: load 1s linear infinite;\r\n            }\r\n\r\n            .spinnerContainerPrimary${this.elementID} {\r\n                z-index:99999;\r\n                background-color: rgba(128, 128, 128, 0.75);\r\n                border: #666666 1px solid;\r\n                border-radius: 5px;\r\n                padding-top: 20px;\r\n                padding-bottom: 10px;\r\n                margin: 0;\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-80px, -80px);\r\n                width: 180px;\r\n                pointer-events: auto;\r\n            }\r\n\r\n            .spinnerPrimary${this.elementID} {\r\n                width: 120px;\r\n                margin-left: 30px;\r\n            }\r\n\r\n            .messageContainerPrimary${this.elementID} {\r\n                padding-top: 15px;\r\n            }\r\n\r\n            .spinnerContainerMin${this.elementID} {\r\n                z-index:99999;\r\n                background-color: rgba(128, 128, 128, 0.75);\r\n                border: #666666 1px solid;\r\n                border-radius: 5px;\r\n                padding-top: 20px;\r\n                padding-bottom: 15px;\r\n                margin: 0;\r\n                position: absolute;\r\n                bottom: 50px;\r\n                left: 50%;\r\n                transform: translate(-50%, 0);\r\n                display: flex;\r\n                flex-direction: left;\r\n                pointer-events: auto;\r\n                min-width: 250px;\r\n            }\r\n\r\n            .messageContainerMin${this.elementID} {\r\n                margin-right: 15px;\r\n            }\r\n\r\n            .spinnerMin${this.elementID} {\r\n                width: 50px;\r\n                height: 50px;\r\n                margin-left: 15px;\r\n                margin-right: 25px;\r\n            }\r\n\r\n            .messageContainerMin${this.elementID} {\r\n                padding-top: 15px;\r\n            }\r\n            \r\n            @keyframes load {\r\n                to{transform: rotate(1turn)}\r\n            }\r\n\r\n        `;\r\n        this.spinnerContainerOuter.appendChild(style);\r\n        this.container.appendChild(this.spinnerContainerOuter);\r\n\r\n        this.setMinimized(false, true);\r\n\r\n        this.fadeTransitions = [];\r\n    }\r\n\r\n    addTask(message) {\r\n        const newTask = {\r\n            'message': message,\r\n            'id': this.taskIDGen++\r\n        };\r\n        this.tasks.push(newTask);\r\n        this.update();\r\n        return newTask.id;\r\n    }\r\n\r\n    removeTask(id) {\r\n        let index = 0;\r\n        for (let task of this.tasks) {\r\n            if (task.id === id) {\r\n                this.tasks.splice(index, 1);\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    removeAllTasks() {\r\n        this.tasks = [];\r\n        this.update();\r\n    }\r\n\r\n    setMessageForTask(id, message) {\r\n        for (let task of this.tasks) {\r\n            if (task.id === id) {\r\n                task.message = message;\r\n                break;\r\n            }\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n        if (this.tasks.length > 0) {\r\n            this.show();\r\n            this.setMessage(this.tasks[this.tasks.length - 1].message);\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    show() {\r\n        this.spinnerContainerOuter.style.display = 'block';\r\n        this.visible = true;\r\n    }\r\n\r\n    hide() {\r\n        this.spinnerContainerOuter.style.display = 'none';\r\n        this.visible = false;\r\n    }\r\n\r\n    setContainer(container) {\r\n        if (this.container && this.spinnerContainerOuter.parentElement === this.container) {\r\n            this.container.removeChild(this.spinnerContainerOuter);\r\n        }\r\n        if (container) {\r\n            this.container = container;\r\n            this.container.appendChild(this.spinnerContainerOuter);\r\n            this.spinnerContainerOuter.style.zIndex = this.container.style.zIndex + 1;\r\n        }\r\n    }\r\n\r\n    setMinimized(minimized, instant) {\r\n        const showHideSpinner = (element, show, instant, displayStyle, fadeTransitionsIndex) => {\r\n            if (instant) {\r\n                element.style.display = show ? displayStyle : 'none';\r\n            } else {\r\n                this.fadeTransitions[fadeTransitionsIndex] = fadeElement(element, !show, displayStyle, STANDARD_FADE_DURATION, () => {\r\n                    this.fadeTransitions[fadeTransitionsIndex] = null;\r\n                });\r\n            }\r\n        };\r\n        showHideSpinner(this.spinnerContainerPrimary, !minimized, instant, 'block', 0);\r\n        showHideSpinner(this.spinnerContainerMin, minimized, instant, 'flex', 1);\r\n        this.minimized = minimized;\r\n    }\r\n\r\n    setMessage(msg) {\r\n        this.messageContainerPrimary.innerHTML = msg;\r\n        this.messageContainerMin.innerHTML = msg;\r\n    }\r\n}\r\n","export const fadeElement = (element, out, displayStyle, duration, onComplete) => {\r\n    const startTime = performance.now();\r\n\r\n    let startOpacity = element.style.display === 'none' ? 0 : parseFloat(element.style.opacity);\r\n    if (isNaN(startOpacity)) startOpacity = 1;\r\n\r\n    const interval = window.setInterval(() => {\r\n        const currentTime = performance.now();\r\n        const elapsed = currentTime - startTime;\r\n\r\n        let t = Math.min(elapsed / duration, 1.0);\r\n        if (t > 0.999) t = 1;\r\n\r\n        let opacity;\r\n        if (out) {\r\n            opacity = (1.0 - t) * startOpacity;\r\n            if (opacity < 0.0001) opacity = 0;\r\n        } else {\r\n            opacity = (1.0 - startOpacity) * t + startOpacity;\r\n        }\r\n\r\n        if (opacity > 0) {\r\n            element.style.display = displayStyle;\r\n            element.style.opacity = opacity;\r\n        } else {\r\n            element.style.display = 'none';\r\n        }\r\n\r\n        if (t >= 1) {\r\n            if (onComplete) onComplete();\r\n            window.clearInterval(interval);\r\n        }\r\n    }, 16);\r\n    return interval;\r\n};\r\n\r\nexport const cancelFade = (interval) => {\r\n    window.clearInterval(interval);\r\n};\r\n","export class LoadingProgressBar {\r\n\r\n    constructor(container) {\r\n\r\n        this.idGen = 0;\r\n\r\n        this.tasks = [];\r\n\r\n        this.container = container || document.body;\r\n\r\n        this.progressBarContainerOuter = document.createElement('div');\r\n        this.progressBarContainerOuter.className = 'progressBarOuterContainer';\r\n        this.progressBarContainerOuter.style.display = 'none';\r\n\r\n        this.progressBarBox = document.createElement('div');\r\n        this.progressBarBox.className = 'progressBarBox';\r\n\r\n        this.progressBarBackground = document.createElement('div');\r\n        this.progressBarBackground.className = 'progressBarBackground';\r\n\r\n        this.progressBar = document.createElement('div');\r\n        this.progressBar.className = 'progressBar';\r\n\r\n        this.progressBarBackground.appendChild(this.progressBar);\r\n        this.progressBarBox.appendChild(this.progressBarBackground);\r\n        this.progressBarContainerOuter.appendChild(this.progressBarBox);\r\n\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .progressBarOuterContainer {\r\n                width: 100%;\r\n                height: 100%;\r\n                margin: 0;\r\n                top: 0;\r\n                left: 0;\r\n                position: absolute;\r\n                pointer-events: none;\r\n            }\r\n\r\n            .progressBarBox {\r\n                z-index:99999;\r\n                padding: 7px 9px 5px 7px;\r\n                background-color: rgba(190, 190, 190, 0.75);\r\n                border: #555555 1px solid;\r\n                border-radius: 15px;\r\n                margin: 0;\r\n                position: absolute;\r\n                bottom: 50px;\r\n                left: 50%;\r\n                transform: translate(-50%, 0);\r\n                width: 180px;\r\n                height: 30px;\r\n                pointer-events: auto;\r\n            }\r\n\r\n            .progressBarBackground {\r\n                width: 100%;\r\n                height: 25px;\r\n                border-radius:10px;\r\n                background-color: rgba(128, 128, 128, 0.75);\r\n                border: #444444 1px solid;\r\n                box-shadow: inset 0 0 10px #333333;\r\n            }\r\n\r\n            .progressBar {\r\n                height: 25px;\r\n                width: 0px;\r\n                border-radius:10px;\r\n                background-color: rgba(0, 200, 0, 0.75);\r\n                box-shadow: inset 0 0 10px #003300;\r\n            }\r\n\r\n        `;\r\n        this.progressBarContainerOuter.appendChild(style);\r\n        this.container.appendChild(this.progressBarContainerOuter);\r\n    }\r\n\r\n    show() {\r\n        this.progressBarContainerOuter.style.display = 'block';\r\n    }\r\n\r\n    hide() {\r\n        this.progressBarContainerOuter.style.display = 'none';\r\n    }\r\n\r\n    setProgress(progress) {\r\n        this.progressBar.style.width = progress + '%';\r\n    }\r\n\r\n    setContainer(container) {\r\n        if (this.container && this.progressBarContainerOuter.parentElement === this.container) {\r\n            this.container.removeChild(this.progressBarContainerOuter);\r\n        }\r\n        if (container) {\r\n            this.container = container;\r\n            this.container.appendChild(this.progressBarContainerOuter);\r\n            this.progressBarContainerOuter.style.zIndex = this.container.style.zIndex + 1;\r\n        }\r\n    }\r\n\r\n}\r\n","export class InfoPanel {\r\n\r\n    constructor(container) {\r\n\r\n        this.container = container || document.body;\r\n\r\n        this.infoCells = {};\r\n\r\n        const layout = [\r\n            ['Camera position', 'cameraPosition'],\r\n            ['Camera look-at', 'cameraLookAt'],\r\n            ['Camera up', 'cameraUp'],\r\n            ['Camera mode', 'orthographicCamera'],\r\n            ['Cursor position', 'cursorPosition'],\r\n            ['FPS', 'fps'],\r\n            ['Rendering:', 'renderSplatCount'],\r\n            ['Sort time', 'sortTime'],\r\n            ['Render window', 'renderWindow'],\r\n            ['Focal adjustment', 'focalAdjustment'],\r\n            ['Splat scale', 'splatScale'],\r\n            ['Point cloud mode', 'pointCloudMode']\r\n        ];\r\n\r\n        this.infoPanelContainer = document.createElement('div');\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .infoPanel {\r\n                width: 430px;\r\n                padding: 10px;\r\n                background-color: rgba(50, 50, 50, 0.85);\r\n                border: #555555 2px solid;\r\n                color: #dddddd;\r\n                border-radius: 10px;\r\n                z-index: 9999;\r\n                font-family: arial;\r\n                font-size: 11pt;\r\n                text-align: left;\r\n                margin: 0;\r\n                top: 10px;\r\n                left:10px;\r\n                position: absolute;\r\n                pointer-events: auto;\r\n            }\r\n\r\n            .info-panel-cell {\r\n                margin-bottom: 5px;\r\n                padding-bottom: 2px;\r\n            }\r\n\r\n            .label-cell {\r\n                font-weight: bold;\r\n                font-size: 12pt;\r\n                width: 140px;\r\n            }\r\n\r\n        `;\r\n        this.infoPanelContainer.append(style);\r\n\r\n        this.infoPanel = document.createElement('div');\r\n        this.infoPanel.className = 'infoPanel';\r\n\r\n        const infoTable = document.createElement('div');\r\n        infoTable.style.display = 'table';\r\n\r\n        for (let layoutEntry of layout) {\r\n            const row = document.createElement('div');\r\n            row.style.display = 'table-row';\r\n            row.className = 'info-panel-row';\r\n\r\n            const labelCell = document.createElement('div');\r\n            labelCell.style.display = 'table-cell';\r\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\r\n            labelCell.classList.add('info-panel-cell', 'label-cell');\r\n\r\n            const spacerCell = document.createElement('div');\r\n            spacerCell.style.display = 'table-cell';\r\n            spacerCell.style.width = '10px';\r\n            spacerCell.innerHTML = ' ';\r\n            spacerCell.className = 'info-panel-cell';\r\n\r\n            const infoCell = document.createElement('div');\r\n            infoCell.style.display = 'table-cell';\r\n            infoCell.innerHTML = '';\r\n            infoCell.className = 'info-panel-cell';\r\n\r\n            this.infoCells[layoutEntry[1]] = infoCell;\r\n\r\n            row.appendChild(labelCell);\r\n            row.appendChild(spacerCell);\r\n            row.appendChild(infoCell);\r\n\r\n            infoTable.appendChild(row);\r\n        }\r\n\r\n        this.infoPanel.appendChild(infoTable);\r\n        this.infoPanelContainer.append(this.infoPanel);\r\n        this.infoPanelContainer.style.display = 'none';\r\n        this.container.appendChild(this.infoPanelContainer);\r\n\r\n        this.visible = false;\r\n    }\r\n\r\n    update = function(renderDimensions, cameraPosition, cameraLookAtPosition, cameraUp, orthographicCamera,\r\n                      meshCursorPosition, currentFPS, splatCount, splatRenderCount,\r\n                      splatRenderCountPct, lastSortTime, focalAdjustment, splatScale, pointCloudMode) {\r\n\r\n        const cameraPosString = `${cameraPosition.x.toFixed(5)}, ${cameraPosition.y.toFixed(5)}, ${cameraPosition.z.toFixed(5)}`;\r\n        if (this.infoCells.cameraPosition.innerHTML !== cameraPosString) {\r\n            this.infoCells.cameraPosition.innerHTML = cameraPosString;\r\n        }\r\n\r\n        if (cameraLookAtPosition) {\r\n            const cla = cameraLookAtPosition;\r\n            const cameraLookAtString = `${cla.x.toFixed(5)}, ${cla.y.toFixed(5)}, ${cla.z.toFixed(5)}`;\r\n            if (this.infoCells.cameraLookAt.innerHTML !== cameraLookAtString) {\r\n                this.infoCells.cameraLookAt.innerHTML = cameraLookAtString;\r\n            }\r\n        }\r\n\r\n        const cameraUpString = `${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}`;\r\n        if (this.infoCells.cameraUp.innerHTML !== cameraUpString) {\r\n            this.infoCells.cameraUp.innerHTML = cameraUpString;\r\n        }\r\n\r\n        this.infoCells.orthographicCamera.innerHTML = orthographicCamera ? 'Orthographic' : 'Perspective';\r\n\r\n        if (meshCursorPosition) {\r\n            const cursPos = meshCursorPosition;\r\n            const cursorPosString = `${cursPos.x.toFixed(5)}, ${cursPos.y.toFixed(5)}, ${cursPos.z.toFixed(5)}`;\r\n            this.infoCells.cursorPosition.innerHTML = cursorPosString;\r\n        } else {\r\n            this.infoCells.cursorPosition.innerHTML = 'N/A';\r\n        }\r\n\r\n        this.infoCells.fps.innerHTML = currentFPS;\r\n        this.infoCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\r\n\r\n        this.infoCells.renderSplatCount.innerHTML =\r\n            `${splatRenderCount} splats out of ${splatCount} (${splatRenderCountPct.toFixed(2)}%)`;\r\n\r\n        this.infoCells.sortTime.innerHTML = `${lastSortTime.toFixed(3)} ms`;\r\n        this.infoCells.focalAdjustment.innerHTML = `${focalAdjustment.toFixed(3)}`;\r\n        this.infoCells.splatScale.innerHTML = `${splatScale.toFixed(3)}`;\r\n        this.infoCells.pointCloudMode.innerHTML = `${pointCloudMode}`;\r\n    };\r\n\r\n    setContainer(container) {\r\n        if (this.container && this.infoPanelContainer.parentElement === this.container) {\r\n            this.container.removeChild(this.infoPanelContainer);\r\n        }\r\n        if (container) {\r\n            this.container = container;\r\n            this.container.appendChild(this.infoPanelContainer);\r\n            this.infoPanelContainer.style.zIndex = this.container.style.zIndex + 1;\r\n        }\r\n    }\r\n\r\n    show() {\r\n        this.infoPanelContainer.style.display = 'block';\r\n        this.visible = true;\r\n    }\r\n\r\n    hide() {\r\n        this.infoPanelContainer.style.display = 'none';\r\n        this.visible = false;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\n\r\nconst _axis = new THREE.Vector3();\r\n\r\nexport class ArrowHelper extends THREE.Object3D {\r\n\r\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\r\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\r\n        super();\r\n\r\n        this.type = 'ArrowHelper';\r\n\r\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\r\n        lineGeometry.translate(0, length / 2.0, 0);\r\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\r\n        coneGeometry.translate(0, length, 0);\r\n\r\n        this.position.copy( origin );\r\n\r\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.line.matrixAutoUpdate = false;\r\n        this.add(this.line);\r\n\r\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.cone.matrixAutoUpdate = false;\r\n        this.add(this.cone);\r\n\r\n        this.setDirection(dir);\r\n    }\r\n\r\n    setDirection( dir ) {\r\n        if (dir.y > 0.99999) {\r\n            this.quaternion.set(0, 0, 0, 1);\r\n        } else if (dir.y < - 0.99999) {\r\n            this.quaternion.set(1, 0, 0, 0);\r\n        } else {\r\n            _axis.set(dir.z, 0, -dir.x).normalize();\r\n            const radians = Math.acos(dir.y);\r\n            this.quaternion.setFromAxisAngle(_axis, radians);\r\n        }\r\n    }\r\n\r\n    setColor( color ) {\r\n        this.line.material.color.set(color);\r\n        this.cone.material.color.set(color);\r\n    }\r\n\r\n    copy(source) {\r\n        super.copy(source, false);\r\n        this.line.copy(source.line);\r\n        this.cone.copy(source.cone);\r\n        return this;\r\n    }\r\n\r\n    dispose() {\r\n        this.line.geometry.dispose();\r\n        this.line.material.dispose();\r\n        this.cone.geometry.dispose();\r\n        this.cone.material.dispose();\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { ArrowHelper } from './ArrowHelper.js';\r\nimport { disposeAllMeshes } from './Util.js';\r\n\r\nexport class SceneHelper {\r\n\r\n    constructor(threeScene) {\r\n        this.threeScene = threeScene;\r\n        this.splatRenderTarget = null;\r\n        this.renderTargetCopyQuad = null;\r\n        this.renderTargetCopyCamera = null;\r\n        this.meshCursor = null;\r\n        this.focusMarker = null;\r\n        this.controlPlane = null;\r\n        this.debugRoot = null;\r\n        this.secondaryDebugRoot = null;\r\n    }\r\n\r\n    updateSplatRenderTargetForRenderDimensions(width, height) {\r\n        this.destroySplatRendertarget();\r\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\r\n            format: THREE.RGBAFormat,\r\n            stencilBuffer: false,\r\n            depthBuffer: true,\r\n\r\n        });\r\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\r\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\r\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\r\n    }\r\n\r\n    destroySplatRendertarget() {\r\n        if (this.splatRenderTarget) {\r\n            this.splatRenderTarget = null;\r\n        }\r\n    }\r\n\r\n    setupRenderTargetCopyObjects() {\r\n        const uniforms = {\r\n            'sourceColorTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sourceDepthTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n        };\r\n        const renderTargetCopyMaterial = new THREE.ShaderMaterial({\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                #include <common>\r\n                #include <packing>\r\n                varying vec2 vUv;\r\n                uniform sampler2D sourceColorTexture;\r\n                uniform sampler2D sourceDepthTexture;\r\n                void main() {\r\n                    vec4 color = texture2D(sourceColorTexture, vUv);\r\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\r\n                    gl_FragDepth = fragDepth;\r\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\r\n              }\r\n            `,\r\n            uniforms: uniforms,\r\n            depthWrite: false,\r\n            depthTest: false,\r\n            transparent: true,\r\n            blending: THREE.CustomBlending,\r\n            blendSrc: THREE.SrcAlphaFactor,\r\n            blendSrcAlpha: THREE.SrcAlphaFactor,\r\n            blendDst: THREE.OneMinusSrcAlphaFactor,\r\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\r\n        });\r\n        renderTargetCopyMaterial.extensions.fragDepth = true;\r\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), renderTargetCopyMaterial);\r\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n    }\r\n\r\n    destroyRenderTargetCopyObjects() {\r\n        if (this.renderTargetCopyQuad) {\r\n            disposeAllMeshes(this.renderTargetCopyQuad);\r\n            this.renderTargetCopyQuad = null;\r\n        }\r\n    }\r\n\r\n    setupMeshCursor() {\r\n        if (!this.meshCursor) {\r\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\r\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\r\n\r\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            downArrow.rotation.set(0, 0, Math.PI);\r\n            downArrow.position.set(0, 1, 0);\r\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            upArrow.position.set(0, -1, 0);\r\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\r\n            leftArrow.position.set(1, 0, 0);\r\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\r\n            rightArrow.position.set(-1, 0, 0);\r\n\r\n            this.meshCursor = new THREE.Object3D();\r\n            this.meshCursor.add(downArrow);\r\n            this.meshCursor.add(upArrow);\r\n            this.meshCursor.add(leftArrow);\r\n            this.meshCursor.add(rightArrow);\r\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\r\n            this.threeScene.add(this.meshCursor);\r\n            this.meshCursor.visible = false;\r\n        }\r\n    }\r\n\r\n    destroyMeshCursor() {\r\n        if (this.meshCursor) {\r\n            disposeAllMeshes(this.meshCursor);\r\n            this.threeScene.remove(this.meshCursor);\r\n            this.meshCursor = null;\r\n        }\r\n    }\r\n\r\n    setMeshCursorVisibility(visible) {\r\n        this.meshCursor.visible = visible;\r\n    }\r\n\r\n    getMeschCursorVisibility() {\r\n        return this.meshCursor.visible;\r\n    }\r\n\r\n    setMeshCursorPosition(position) {\r\n        this.meshCursor.position.copy(position);\r\n    }\r\n\r\n    positionAndOrientMeshCursor(position, camera) {\r\n        this.meshCursor.position.copy(position);\r\n        this.meshCursor.up.copy(camera.up);\r\n        this.meshCursor.lookAt(camera.position);\r\n    }\r\n\r\n    setupFocusMarker() {\r\n        if (!this.focusMarker) {\r\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\r\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\r\n            focusMarkerMaterial.depthTest = false;\r\n            focusMarkerMaterial.depthWrite = false;\r\n            focusMarkerMaterial.transparent = true;\r\n            this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\r\n        }\r\n    }\r\n\r\n    destroyFocusMarker() {\r\n        if (this.focusMarker) {\r\n            disposeAllMeshes(this.focusMarker);\r\n            this.focusMarker = null;\r\n        }\r\n    }\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const tempPosition = new THREE.Vector3();\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const toCamera = new THREE.Vector3();\r\n\r\n        return function(position, camera, viewport) {\r\n            tempMatrix.copy(camera.matrixWorld).invert();\r\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\r\n            tempPosition.normalize().multiplyScalar(10);\r\n            tempPosition.applyMatrix4(camera.matrixWorld);\r\n            toCamera.copy(camera.position).sub(position);\r\n            const toCameraDistance = toCamera.length();\r\n            this.focusMarker.position.copy(position);\r\n            this.focusMarker.scale.set(toCameraDistance, toCameraDistance, toCameraDistance);\r\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\r\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\r\n            this.focusMarker.material.uniformsNeedUpdate = true;\r\n        };\r\n\r\n    }();\r\n\r\n    setFocusMarkerVisibility(visible) {\r\n        this.focusMarker.visible = visible;\r\n    }\r\n\r\n    setFocusMarkerOpacity(opacity) {\r\n        this.focusMarker.material.uniforms.opacity.value = opacity;\r\n        this.focusMarker.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getFocusMarkerOpacity() {\r\n        return this.focusMarker.material.uniforms.opacity.value;\r\n    }\r\n\r\n    setupControlPlane() {\r\n        if (!this.controlPlane) {\r\n            const planeGeometry = new THREE.PlaneGeometry(1, 1);\r\n            planeGeometry.rotateX(-Math.PI / 2);\r\n            const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\r\n            planeMaterial.transparent = true;\r\n            planeMaterial.opacity = 0.6;\r\n            planeMaterial.depthTest = false;\r\n            planeMaterial.depthWrite = false;\r\n            planeMaterial.side = THREE.DoubleSide;\r\n            const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\r\n\r\n            const arrowDir = new THREE.Vector3(0, 1, 0);\r\n            arrowDir.normalize();\r\n            const arrowOrigin = new THREE.Vector3(0, 0, 0);\r\n            const arrowLength = 0.5;\r\n            const arrowRadius = 0.01;\r\n            const arrowColor = 0x00dd00;\r\n            const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\r\n\r\n            this.controlPlane = new THREE.Object3D();\r\n            this.controlPlane.add(planeMesh);\r\n            this.controlPlane.add(arrowHelper);\r\n        }\r\n    }\r\n\r\n    destroyControlPlane() {\r\n        if (this.controlPlane) {\r\n            disposeAllMeshes(this.controlPlane);\r\n            this.controlPlane = null;\r\n        }\r\n    }\r\n\r\n    setControlPlaneVisibility(visible) {\r\n        this.controlPlane.visible = visible;\r\n    }\r\n\r\n    positionAndOrientControlPlane = function() {\r\n\r\n        const tempQuaternion = new THREE.Quaternion();\r\n        const defaultUp = new THREE.Vector3(0, 1, 0);\r\n\r\n        return function(position, up) {\r\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\r\n            this.controlPlane.position.copy(position);\r\n            this.controlPlane.quaternion.copy(tempQuaternion);\r\n        };\r\n\r\n    }();\r\n\r\n    addDebugMeshes() {\r\n        this.debugRoot = this.createDebugMeshes();\r\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\r\n        this.threeScene.add(this.debugRoot);\r\n        this.threeScene.add(this.secondaryDebugRoot);\r\n    }\r\n\r\n    destroyDebugMeshes() {\r\n        for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\r\n            if (debugRoot) {\r\n                disposeAllMeshes(debugRoot);\r\n                this.threeScene.remove(debugRoot);\r\n            }\r\n        }\r\n        this.debugRoot = null;\r\n        this.secondaryDebugRoot = null;\r\n    }\r\n\r\n    createDebugMeshes(renderOrder) {\r\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        const createMesh = (color, position) => {\r\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\r\n            sphereMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(sphereMesh);\r\n            sphereMesh.position.fromArray(position);\r\n        };\r\n\r\n        createMesh(0xff0000, [-50, 0, 0]);\r\n        createMesh(0xff0000, [50, 0, 0]);\r\n        createMesh(0x00ff00, [0, 0, -50]);\r\n        createMesh(0x00ff00, [0, 0, 50]);\r\n        createMesh(0xffaa00, [5, 0, 5]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    createSecondaryDebugMeshes(renderOrder) {\r\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        let boxColor = 0xBBBBBB;\r\n        const createMesh = (position) => {\r\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\r\n            boxMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(boxMesh);\r\n            boxMesh.position.fromArray(position);\r\n        };\r\n\r\n        let separation = 10;\r\n        createMesh([-separation, 0, -separation]);\r\n        createMesh([-separation, 0, separation]);\r\n        createMesh([separation, 0, -separation]);\r\n        createMesh([separation, 0, separation]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    static buildDebugMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n            varying float ndcDepth;\r\n\r\n            void main() {\r\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\r\n                ndcDepth = gl_Position.z / gl_Position.w;\r\n                gl_Position.x = gl_Position.x / gl_Position.w;\r\n                gl_Position.y = gl_Position.y / gl_Position.w;\r\n                gl_Position.z = 0.0;\r\n                gl_Position.w = 1.0;\r\n    \r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            varying float ndcDepth;\r\n            void main() {\r\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\r\n                gl_FragColor = vec4(color.rgb, 0.0);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: false,\r\n            depthTest: true,\r\n            depthWrite: true,\r\n            side: THREE.FrontSide\r\n        });\r\n        material.extensions.fragDepth = true;\r\n\r\n        return material;\r\n    }\r\n\r\n    static buildFocusMarkerMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n\r\n            uniform vec2 viewport;\r\n            uniform vec3 realFocusPosition;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                float radius = 0.01;\r\n\r\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\r\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\r\n\r\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\r\n\r\n                ndcPosition = projectionMatrix * viewPosition;\r\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\r\n                ndcCenter = projectionMatrix * viewCenter;\r\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\r\n\r\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\r\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\r\n\r\n                gl_Position = projectionMatrix * viewPosition;\r\n\r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            uniform vec2 viewport;\r\n            uniform float opacity;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\r\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\r\n\r\n                vec2 screenVec = screenPosition - screenCenter;\r\n\r\n                float projectedRadius = length(screenVec);\r\n\r\n                float lineWidth = 0.0005 * viewport.y;\r\n                float aaRange = 0.0025 * viewport.y;\r\n                float radius = 0.06 * viewport.y;\r\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\r\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \r\n\r\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n            'realFocusPosition': {\r\n                'type': 'v3',\r\n                'value': new THREE.Vector3()\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'opacity': {\r\n                'value': 0.0\r\n            }\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            side: THREE.FrontSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    dispose() {\r\n        this.destroyMeshCursor();\r\n        this.destroyFocusMarker();\r\n        this.destroyDebugMeshes();\r\n        this.destroyControlPlane();\r\n        this.destroyRenderTargetCopyObjects();\r\n        this.destroySplatRendertarget();\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nconst VectorRight = new THREE.Vector3(1, 0, 0);\r\nconst VectorUp = new THREE.Vector3(0, 1, 0);\r\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\r\n\r\nexport class Ray {\r\n\r\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\r\n        this.origin = new THREE.Vector3();\r\n        this.direction = new THREE.Vector3();\r\n        this.setParameters(origin, direction);\r\n    }\r\n\r\n    setParameters(origin, direction) {\r\n        this.origin.copy(origin);\r\n        this.direction.copy(direction).normalize();\r\n    }\r\n\r\n    boxContainsPoint(box, point, epsilon) {\r\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\r\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\r\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\r\n    }\r\n\r\n    intersectBox = function() {\r\n\r\n        const planeIntersectionPoint = new THREE.Vector3();\r\n        const planeIntersectionPointArray = [];\r\n        const originArray = [];\r\n        const directionArray = [];\r\n\r\n        return function(box, outHit) {\r\n\r\n            originArray[0] = this.origin.x;\r\n            originArray[1] = this.origin.y;\r\n            originArray[2] = this.origin.z;\r\n            directionArray[0] = this.direction.x;\r\n            directionArray[1] = this.direction.y;\r\n            directionArray[2] = this.direction.z;\r\n\r\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\r\n                if (outHit) {\r\n                    outHit.origin.copy(this.origin);\r\n                    outHit.normal.set(0, 0, 0);\r\n                    outHit.distance = -1;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                if (directionArray[i] == 0.0) continue;\r\n\r\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\r\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\r\n                let multiplier = -Math.sign(directionArray[i]);\r\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\r\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\r\n\r\n                if (toSide * multiplier < 0) {\r\n                    const idx1 = (i + 1) % 3;\r\n                    const idx2 = (i + 2) % 3;\r\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\r\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\r\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\r\n                                               planeIntersectionPointArray[idx2],\r\n                                               planeIntersectionPointArray[idx1]);\r\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\r\n                        if (outHit) {\r\n                            outHit.origin.copy(planeIntersectionPoint);\r\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\r\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSphere = function() {\r\n\r\n        const toSphereCenterVec = new THREE.Vector3();\r\n\r\n        return function(center, radius, outHit) {\r\n            toSphereCenterVec.copy(center).sub(this.origin);\r\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\r\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\r\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\r\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\r\n            const radiusSq = radius * radius;\r\n\r\n            if (diffSq > radiusSq) return false;\r\n\r\n            const thc = Math.sqrt(radiusSq - diffSq);\r\n            const t0 = toClosestApproach - thc;\r\n            const t1 = toClosestApproach + thc;\r\n\r\n            if (t1 < 0) return false;\r\n            let t = t0 < 0 ? t1 : t0;\r\n\r\n            if (outHit) {\r\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\r\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\r\n                outHit.distance = t;\r\n            }\r\n            return true;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class Hit {\r\n\r\n    constructor() {\r\n        this.origin = new THREE.Vector3();\r\n        this.normal = new THREE.Vector3();\r\n        this.distance = 0;\r\n        this.splatIndex = 0;\r\n    }\r\n\r\n    set(origin, normal, distance, splatIndex) {\r\n        this.origin.copy(origin);\r\n        this.normal.copy(normal);\r\n        this.distance = distance;\r\n        this.splatIndex = splatIndex;\r\n    }\r\n\r\n    clone() {\r\n        const hitClone = new Hit();\r\n        hitClone.origin.copy(this.origin);\r\n        hitClone.normal.copy(this.normal);\r\n        hitClone.distance = this.distance;\r\n        hitClone.splatIndex = this.splatIndex;\r\n        return hitClone;\r\n    }\r\n\r\n}\r\n","export const SplatRenderMode = {\r\n    ThreeD: 0,\r\n    TwoD: 1\r\n};\r\n","import * as THREE from 'three';\r\nimport { Ray } from './Ray.js';\r\nimport { Hit } from './Hit.js';\r\nimport { SplatRenderMode } from '../SplatRenderMode.js';\r\n\r\nexport class Raycaster {\r\n\r\n    constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\r\n        this.ray = new Ray(origin, direction);\r\n        this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\r\n    }\r\n\r\n    setFromCameraAndScreenPosition = function() {\r\n\r\n        const ndcCoords = new THREE.Vector2();\r\n\r\n        return function(camera, screenPosition, screenDimensions) {\r\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\r\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\r\n            if (camera.isPerspectiveCamera) {\r\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\r\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\r\n                this.camera = camera;\r\n            } else if (camera.isOrthographicCamera) {\r\n                this.ray.origin.set(ndcCoords.x, ndcCoords.y,\r\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\r\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\r\n                this.camera = camera;\r\n            } else {\r\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSplatMesh = function() {\r\n\r\n        const toLocal = new THREE.Matrix4();\r\n        const fromLocal = new THREE.Matrix4();\r\n        const sceneTransform = new THREE.Matrix4();\r\n        const localRay = new Ray();\r\n        const tempPoint = new THREE.Vector3();\r\n\r\n        return function(splatMesh, outHits = []) {\r\n            const splatTree = splatMesh.getSplatTree();\r\n\r\n            if (!splatTree) return;\r\n\r\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\r\n                const subTree = splatTree.subTrees[s];\r\n\r\n                fromLocal.copy(splatMesh.matrixWorld);\r\n                if (splatMesh.dynamicMode) {\r\n                    splatMesh.getSceneTransform(s, sceneTransform);\r\n                    fromLocal.multiply(sceneTransform);\r\n                }\r\n                toLocal.copy(fromLocal).invert();\r\n\r\n                localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\r\n                localRay.direction.copy(this.ray.origin).add(this.ray.direction);\r\n                localRay.direction.applyMatrix4(toLocal).sub(localRay.origin).normalize();\r\n\r\n                const outHitsForSubTree = [];\r\n                if (subTree.rootNode) {\r\n                    this.castRayAtSplatTreeNode(localRay, splatTree, subTree.rootNode, outHitsForSubTree);\r\n                }\r\n\r\n                outHitsForSubTree.forEach((hit) => {\r\n                    hit.origin.applyMatrix4(fromLocal);\r\n                    hit.normal.applyMatrix4(fromLocal).normalize();\r\n                    hit.distance = tempPoint.copy(hit.origin).sub(this.ray.origin).length();\r\n                });\r\n\r\n                outHits.push(...outHitsForSubTree);\r\n            }\r\n\r\n            outHits.sort((a, b) => {\r\n                if (a.distance > b.distance) return 1;\r\n                else return -1;\r\n            });\r\n\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n\r\n    castRayAtSplatTreeNode = function() {\r\n\r\n        const tempColor = new THREE.Vector4();\r\n        const tempCenter = new THREE.Vector3();\r\n        const tempScale = new THREE.Vector3();\r\n        const tempRotation = new THREE.Quaternion();\r\n        const tempHit = new Hit();\r\n        const scaleEpsilon = 0.0000001;\r\n\r\n        const origin = new THREE.Vector3(0, 0, 0);\r\n        const uniformScaleMatrix = new THREE.Matrix4();\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const toSphereSpace = new THREE.Matrix4();\r\n        const fromSphereSpace = new THREE.Matrix4();\r\n        const tempRay = new Ray();\r\n\r\n        return function(ray, splatTree, node, outHits = []) {\r\n            if (!ray.intersectBox(node.boundingBox)) {\r\n                return;\r\n            }\r\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\r\n                for (let i = 0; i < node.data.indexes.length; i++) {\r\n\r\n                    const splatGlobalIndex = node.data.indexes[i];\r\n                    const splatSceneIndex = splatTree.splatMesh.getSceneIndexForSplat(splatGlobalIndex);\r\n                    const splatScene = splatTree.splatMesh.getScene(splatSceneIndex);\r\n                    if (!splatScene.visible) continue;\r\n\r\n                    splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor);\r\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\r\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation);\r\n\r\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon ||\r\n                        splatTree.splatMesh.splatRenderMode === SplatRenderMode.ThreeD && tempScale.z <= scaleEpsilon) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (!this.raycastAgainstTrueSplatEllipsoid) {\r\n                        let radius = (tempScale.x + tempScale.y);\r\n                        let componentCount = 2;\r\n                        if (splatTree.splatMesh.splatRenderMode === SplatRenderMode.ThreeD) {\r\n                            radius += tempScale.z;\r\n                            componentCount = 3;\r\n                        }\r\n                        radius = radius / componentCount;\r\n                        if (ray.intersectSphere(tempCenter, radius, tempHit)) {\r\n                            const hitClone = tempHit.clone();\r\n                            hitClone.splatIndex = splatGlobalIndex;\r\n                            outHits.push(hitClone);\r\n                        }\r\n                    } else {\r\n                        scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\r\n                        rotationMatrix.makeRotationFromQuaternion(tempRotation);\r\n                        const uniformScale = Math.log10(tempColor.w) * 2.0;\r\n                        uniformScaleMatrix.makeScale(uniformScale, uniformScale, uniformScale);\r\n                        fromSphereSpace.copy(uniformScaleMatrix).multiply(rotationMatrix).multiply(scaleMatrix);\r\n                        toSphereSpace.copy(fromSphereSpace).invert();\r\n                        tempRay.origin.copy(ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\r\n                        tempRay.direction.copy(ray.origin).add(ray.direction).sub(tempCenter);\r\n                        tempRay.direction.applyMatrix4(toSphereSpace).sub(tempRay.origin).normalize();\r\n                        if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\r\n                            const hitClone = tempHit.clone();\r\n                            hitClone.splatIndex = splatGlobalIndex;\r\n                            hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\r\n                            outHits.push(hitClone);\r\n                        }\r\n                    }\r\n                }\r\n             }\r\n            if (node.children && node.children.length > 0) {\r\n                for (let child of node.children) {\r\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\r\n                }\r\n            }\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\nimport { Constants } from '../Constants.js';\r\n\r\nexport class SplatMaterial {\r\n\r\n    static buildVertexShaderBase(dynamicMode = false, enableOptionalEffects = false, maxSphericalHarmonicsDegree = 0, customVars = '') {\r\n        let vertexShaderSource = `\r\n        precision highp float;\r\n        #include <common>\r\n\r\n        attribute uint splatIndex;\r\n        uniform highp usampler2D centersColorsTexture;\r\n        uniform highp sampler2D sphericalHarmonicsTexture;\r\n        uniform highp sampler2D sphericalHarmonicsTextureR;\r\n        uniform highp sampler2D sphericalHarmonicsTextureG;\r\n        uniform highp sampler2D sphericalHarmonicsTextureB;\r\n\r\n        uniform highp usampler2D sceneIndexesTexture;\r\n        uniform vec2 sceneIndexesTextureSize;\r\n        uniform int sceneCount;\r\n    `;\r\n\r\n    if (enableOptionalEffects) {\r\n        vertexShaderSource += `\r\n            uniform float sceneOpacity[${Constants.MaxScenes}];\r\n            uniform int sceneVisibility[${Constants.MaxScenes}];\r\n        `;\r\n    }\r\n\r\n    if (dynamicMode) {\r\n        vertexShaderSource += `\r\n            uniform highp mat4 transforms[${Constants.MaxScenes}];\r\n        `;\r\n    }\r\n\r\n    vertexShaderSource += `\r\n        ${customVars}\r\n        uniform vec2 focal;\r\n        uniform float orthoZoom;\r\n        uniform int orthographicMode;\r\n        uniform int pointCloudModeEnabled;\r\n        uniform float inverseFocalAdjustment;\r\n        uniform vec2 viewport;\r\n        uniform vec2 basisViewport;\r\n        uniform vec2 centersColorsTextureSize;\r\n        uniform int sphericalHarmonicsDegree;\r\n        uniform vec2 sphericalHarmonicsTextureSize;\r\n        uniform int sphericalHarmonics8BitMode;\r\n        uniform int sphericalHarmonicsMultiTextureMode;\r\n        uniform float visibleRegionRadius;\r\n        uniform float visibleRegionFadeStartRadius;\r\n        uniform float firstRenderTime;\r\n        uniform float currentTime;\r\n        uniform int fadeInComplete;\r\n        uniform vec3 sceneCenter;\r\n        uniform float splatScale;\r\n        uniform float sphericalHarmonics8BitCompressionRangeMin[${Constants.MaxScenes}];\r\n        uniform float sphericalHarmonics8BitCompressionRangeMax[${Constants.MaxScenes}];\r\n\r\n        varying vec4 vColor;\r\n        varying vec2 vUv;\r\n        varying vec2 vPosition;\r\n\r\n        mat3 quaternionToRotationMatrix(float x, float y, float z, float w) {\r\n            float s = 1.0 / sqrt(w * w + x * x + y * y + z * z);\r\n        \r\n            return mat3(\r\n                1. - 2. * (y * y + z * z),\r\n                2. * (x * y + w * z),\r\n                2. * (x * z - w * y),\r\n                2. * (x * y - w * z),\r\n                1. - 2. * (x * x + z * z),\r\n                2. * (y * z + w * x),\r\n                2. * (x * z + w * y),\r\n                2. * (y * z - w * x),\r\n                1. - 2. * (x * x + y * y)\r\n            );\r\n        }\r\n\r\n        const float sqrt8 = sqrt(8.0);\r\n        const float minAlpha = 1.0 / 255.0;\r\n\r\n        const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n        const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\r\n        const uvec4 shift4 = uvec4(0, 8, 16, 24);\r\n        vec4 uintToRGBAVec (uint u) {\r\n           uvec4 urgba = mask4 & u;\r\n           urgba = urgba >> shift4;\r\n           vec4 rgba = vec4(urgba) * encodeNorm4;\r\n           return rgba;\r\n        }\r\n\r\n        vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\r\n            vec2 samplerUV = vec2(0.0, 0.0);\r\n            float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\r\n            samplerUV.y = float(floor(d)) / dimensions.y;\r\n            samplerUV.x = fract(d);\r\n            return samplerUV;\r\n        }\r\n\r\n        vec2 getDataUVF(in uint sIndex, in float stride, in uint offset, in vec2 dimensions) {\r\n            vec2 samplerUV = vec2(0.0, 0.0);\r\n            float d = float(uint(float(sIndex) * stride) + offset) / dimensions.x;\r\n            samplerUV.y = float(floor(d)) / dimensions.y;\r\n            samplerUV.x = fract(d);\r\n            return samplerUV;\r\n        }\r\n\r\n        const float SH_C1 = 0.4886025119029199f;\r\n        const float[5] SH_C2 = float[](1.0925484, -1.0925484, 0.3153916, -1.0925484, 0.5462742);\r\n\r\n        void main () {\r\n\r\n            uint oddOffset = splatIndex & uint(0x00000001);\r\n            uint doubleOddOffset = oddOffset * uint(2);\r\n            bool isEven = oddOffset == uint(0);\r\n            uint nearestEvenIndex = splatIndex - oddOffset;\r\n            float fOddOffset = float(oddOffset);\r\n\r\n            uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\r\n            vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\r\n\r\n            uint sceneIndex = uint(0);\r\n            if (sceneCount > 1) {\r\n                sceneIndex = texture(sceneIndexesTexture, getDataUV(1, 0, sceneIndexesTextureSize)).r;\r\n            }\r\n            `;\r\n\r\n        if (enableOptionalEffects) {\r\n            vertexShaderSource += `\r\n                float splatOpacityFromScene = sceneOpacity[sceneIndex];\r\n                int sceneVisible = sceneVisibility[sceneIndex];\r\n                if (splatOpacityFromScene <= 0.01 || sceneVisible == 0) {\r\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\r\n                    return;\r\n                }\r\n            `;\r\n        }\r\n\r\n        if (dynamicMode) {\r\n            vertexShaderSource += `\r\n                mat4 transform = transforms[sceneIndex];\r\n                mat4 transformModelViewMatrix = viewMatrix * transform;\r\n            `;\r\n        } else {\r\n            vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\r\n        }\r\n\r\n        vertexShaderSource += `\r\n            float sh8BitCompressionRangeMinForScene = sphericalHarmonics8BitCompressionRangeMin[sceneIndex];\r\n            float sh8BitCompressionRangeMaxForScene = sphericalHarmonics8BitCompressionRangeMax[sceneIndex];\r\n            float sh8BitCompressionRangeForScene = sh8BitCompressionRangeMaxForScene - sh8BitCompressionRangeMinForScene;\r\n            float sh8BitCompressionHalfRangeForScene = sh8BitCompressionRangeForScene / 2.0;\r\n            vec3 vec8BitSHShift = vec3(sh8BitCompressionRangeMinForScene);\r\n\r\n            vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\r\n\r\n            vec4 clipCenter = projectionMatrix * viewCenter;\r\n\r\n            float clip = 1.2 * clipCenter.w;\r\n            if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\r\n                gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\r\n                return;\r\n            }\r\n\r\n            vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\r\n\r\n            vPosition = position.xy;\r\n            vColor = uintToRGBAVec(sampledCenterColor.r);\r\n        `;\r\n\r\n        // Proceed to sampling and rendering 1st degree spherical harmonics\r\n        if (maxSphericalHarmonicsDegree >= 1) {\r\n\r\n            vertexShaderSource += `   \r\n            if (sphericalHarmonicsDegree >= 1) {\r\n            `;\r\n\r\n            if (dynamicMode) {\r\n                vertexShaderSource += `\r\n                    vec3 worldViewDir = normalize(splatCenter - vec3(inverse(transform) * vec4(cameraPosition, 1.0)));\r\n                `;\r\n            } else {\r\n                vertexShaderSource += `\r\n                    vec3 worldViewDir = normalize(splatCenter - cameraPosition);\r\n                `;\r\n            }\r\n\r\n            vertexShaderSource += `\r\n                vec3 sh1;\r\n                vec3 sh2;\r\n                vec3 sh3;\r\n            `;\r\n\r\n            if (maxSphericalHarmonicsDegree >= 2) {\r\n                vertexShaderSource += `\r\n                    vec3 sh4;\r\n                    vec3 sh5;\r\n                    vec3 sh6;\r\n                    vec3 sh7;\r\n                    vec3 sh8;\r\n                `;\r\n            }\r\n\r\n            // Determining how to sample spherical harmonics textures to get the coefficients for calculations for a given degree\r\n            // depends on how many total degrees (maxSphericalHarmonicsDegree) are present in the textures. This is because that\r\n            // number affects how they are packed in the textures, and therefore the offset & stride required to access them.\r\n\r\n            // Sample spherical harmonics textures with 1 degree worth of data for 1st degree calculations, and store in sh1, sh2, and sh3\r\n            if (maxSphericalHarmonicsDegree === 1) {\r\n                vertexShaderSource += `\r\n                    if (sphericalHarmonicsMultiTextureMode == 0) {\r\n                        vec2 shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset, sphericalHarmonicsTextureSize);\r\n                        vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, shUV);\r\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(1), sphericalHarmonicsTextureSize);\r\n                        vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, shUV);\r\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(2), sphericalHarmonicsTextureSize);\r\n                        vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, shUV);\r\n                        sh1 = vec3(sampledSH0123.rgb) * (1.0 - fOddOffset) + vec3(sampledSH0123.ba, sampledSH4567.r) * fOddOffset;\r\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg) * (1.0 - fOddOffset) + vec3(sampledSH4567.gba) * fOddOffset;\r\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r) * (1.0 - fOddOffset) + vec3(sampledSH891011.rgb) * fOddOffset;\r\n                    } else {\r\n                        vec2 sampledSH01R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\r\n                        vec2 sampledSH23R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\r\n                        vec2 sampledSH01G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\r\n                        vec2 sampledSH23G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\r\n                        vec2 sampledSH01B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\r\n                        vec2 sampledSH23B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\r\n                        sh1 = vec3(sampledSH01R.rg, sampledSH23R.r);\r\n                        sh2 = vec3(sampledSH01G.rg, sampledSH23G.r);\r\n                        sh3 = vec3(sampledSH01B.rg, sampledSH23B.r);\r\n                    }\r\n                `;\r\n            // Sample spherical harmonics textures with 2 degrees worth of data for 1st degree calculations, and store in sh1, sh2, and sh3\r\n            } else if (maxSphericalHarmonicsDegree === 2) {\r\n                vertexShaderSource += `\r\n                    vec4 sampledSH0123;\r\n                    vec4 sampledSH4567;\r\n                    vec4 sampledSH891011;\r\n\r\n                    vec4 sampledSH0123R;\r\n                    vec4 sampledSH0123G;\r\n                    vec4 sampledSH0123B;\r\n\r\n                    if (sphericalHarmonicsMultiTextureMode == 0) {\r\n                        sampledSH0123 = texture(sphericalHarmonicsTexture, getDataUV(6, 0, sphericalHarmonicsTextureSize));\r\n                        sampledSH4567 = texture(sphericalHarmonicsTexture, getDataUV(6, 1, sphericalHarmonicsTextureSize));\r\n                        sampledSH891011 = texture(sphericalHarmonicsTexture, getDataUV(6, 2, sphericalHarmonicsTextureSize));\r\n                        sh1 = sampledSH0123.rgb;\r\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg);\r\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r);\r\n                    } else {\r\n                        sampledSH0123R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize));\r\n                        sampledSH0123G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize));\r\n                        sampledSH0123B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize));\r\n                        sh1 = vec3(sampledSH0123R.rgb);\r\n                        sh2 = vec3(sampledSH0123G.rgb);\r\n                        sh3 = vec3(sampledSH0123B.rgb);\r\n                    }\r\n                `;\r\n            }\r\n\r\n            // Perform 1st degree spherical harmonics calculations\r\n            vertexShaderSource += `\r\n                    if (sphericalHarmonics8BitMode == 1) {\r\n                        sh1 = sh1 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                        sh2 = sh2 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                        sh3 = sh3 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                    }\r\n                    float x = worldViewDir.x;\r\n                    float y = worldViewDir.y;\r\n                    float z = worldViewDir.z;\r\n                    vColor.rgb += SH_C1 * (-sh1 * y + sh2 * z - sh3 * x);\r\n            `;\r\n\r\n            // Proceed to sampling and rendering 2nd degree spherical harmonics\r\n            if (maxSphericalHarmonicsDegree >= 2) {\r\n\r\n                vertexShaderSource += `\r\n                    if (sphericalHarmonicsDegree >= 2) {\r\n                        float xx = x * x;\r\n                        float yy = y * y;\r\n                        float zz = z * z;\r\n                        float xy = x * y;\r\n                        float yz = y * z;\r\n                        float xz = x * z;\r\n                `;\r\n\r\n                // Sample spherical harmonics textures with 2 degrees worth of data for 2nd degree calculations,\r\n                // and store in sh4, sh5, sh6, sh7, and sh8\r\n                if (maxSphericalHarmonicsDegree === 2) {\r\n                    vertexShaderSource += `\r\n                        if (sphericalHarmonicsMultiTextureMode == 0) {\r\n                            vec4 sampledSH12131415 = texture(sphericalHarmonicsTexture, getDataUV(6, 3, sphericalHarmonicsTextureSize));\r\n                            vec4 sampledSH16171819 = texture(sphericalHarmonicsTexture, getDataUV(6, 4, sphericalHarmonicsTextureSize));\r\n                            vec4 sampledSH20212223 = texture(sphericalHarmonicsTexture, getDataUV(6, 5, sphericalHarmonicsTextureSize));\r\n                            sh4 = sampledSH891011.gba;\r\n                            sh5 = sampledSH12131415.rgb;\r\n                            sh6 = vec3(sampledSH12131415.a, sampledSH16171819.rg);\r\n                            sh7 = vec3(sampledSH16171819.ba, sampledSH20212223.r);\r\n                            sh8 = sampledSH20212223.gba;\r\n                        } else {\r\n                            vec4 sampledSH4567R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize));\r\n                            vec4 sampledSH4567G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize));\r\n                            vec4 sampledSH4567B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize));\r\n                            sh4 = vec3(sampledSH0123R.a, sampledSH4567R.rg);\r\n                            sh5 = vec3(sampledSH4567R.ba, sampledSH0123G.a);\r\n                            sh6 = vec3(sampledSH4567G.rgb);\r\n                            sh7 = vec3(sampledSH4567G.a, sampledSH0123B.a, sampledSH4567B.r);\r\n                            sh8 = vec3(sampledSH4567B.gba);\r\n                        }\r\n                    `;\r\n                }\r\n\r\n                // Perform 2nd degree spherical harmonics calculations\r\n                vertexShaderSource += `\r\n                        if (sphericalHarmonics8BitMode == 1) {\r\n                            sh4 = sh4 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                            sh5 = sh5 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                            sh6 = sh6 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                            sh7 = sh7 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                            sh8 = sh8 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                        }\r\n\r\n                        vColor.rgb +=\r\n                            (SH_C2[0] * xy) * sh4 +\r\n                            (SH_C2[1] * yz) * sh5 +\r\n                            (SH_C2[2] * (2.0 * zz - xx - yy)) * sh6 +\r\n                            (SH_C2[3] * xz) * sh7 +\r\n                            (SH_C2[4] * (xx - yy)) * sh8;\r\n                    }\r\n                `;\r\n            }\r\n\r\n            vertexShaderSource += `\r\n\r\n                vColor.rgb = clamp(vColor.rgb, vec3(0.), vec3(1.));\r\n\r\n            }\r\n\r\n            `;\r\n        }\r\n\r\n        return vertexShaderSource;\r\n    }\r\n\r\n    static getVertexShaderFadeIn() {\r\n        return `\r\n            if (fadeInComplete == 0) {\r\n                float opacityAdjust = 1.0;\r\n                float centerDist = length(splatCenter - sceneCenter);\r\n                float renderTime = max(currentTime - firstRenderTime, 0.0);\r\n\r\n                float fadeDistance = 0.75;\r\n                float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\r\n                distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\r\n                                        (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\r\n                                        distanceLoadFadeInFactor;\r\n                opacityAdjust *= distanceLoadFadeInFactor;\r\n                vColor.a *= opacityAdjust;\r\n            }\r\n        `;\r\n    }\r\n\r\n    static getUniforms(dynamicMode = false, enableOptionalEffects = false, maxSphericalHarmonicsDegree = 0,\r\n                       splatScale = 1.0, pointCloudModeEnabled = false) {\r\n\r\n        const uniforms = {\r\n            'sceneCenter': {\r\n                'type': 'v3',\r\n                'value': new THREE.Vector3()\r\n            },\r\n            'fadeInComplete': {\r\n                'type': 'i',\r\n                'value': 0\r\n            },\r\n            'orthographicMode': {\r\n                'type': 'i',\r\n                'value': 0\r\n            },\r\n            'visibleRegionFadeStartRadius': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'visibleRegionRadius': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'currentTime': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'firstRenderTime': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'centersColorsTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sphericalHarmonicsTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sphericalHarmonicsTextureR': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sphericalHarmonicsTextureG': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sphericalHarmonicsTextureB': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sphericalHarmonics8BitCompressionRangeMin': {\r\n                'type': 'f',\r\n                'value': []\r\n            },\r\n            'sphericalHarmonics8BitCompressionRangeMax': {\r\n                'type': 'f',\r\n                'value': []\r\n            },\r\n            'focal': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'orthoZoom': {\r\n                'type': 'f',\r\n                'value': 1.0\r\n            },\r\n            'inverseFocalAdjustment': {\r\n                'type': 'f',\r\n                'value': 1.0\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'basisViewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'debugColor': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color()\r\n            },\r\n            'centersColorsTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            },\r\n            'sphericalHarmonicsDegree': {\r\n                'type': 'i',\r\n                'value': maxSphericalHarmonicsDegree\r\n            },\r\n            'sphericalHarmonicsTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            },\r\n            'sphericalHarmonics8BitMode': {\r\n                'type': 'i',\r\n                'value': 0\r\n            },\r\n            'sphericalHarmonicsMultiTextureMode': {\r\n                'type': 'i',\r\n                'value': 0\r\n            },\r\n            'splatScale': {\r\n                'type': 'f',\r\n                'value': splatScale\r\n            },\r\n            'pointCloudModeEnabled': {\r\n                'type': 'i',\r\n                'value': pointCloudModeEnabled ? 1 : 0\r\n            },\r\n            'sceneIndexesTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sceneIndexesTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            },\r\n            'sceneCount': {\r\n                'type': 'i',\r\n                'value': 1\r\n            }\r\n        };\r\n        for (let i = 0; i < Constants.MaxScenes; i++) {\r\n            uniforms.sphericalHarmonics8BitCompressionRangeMin.value.push(-Constants.SphericalHarmonics8BitCompressionRange / 2.0);\r\n            uniforms.sphericalHarmonics8BitCompressionRangeMax.value.push(Constants.SphericalHarmonics8BitCompressionRange / 2.0);\r\n        }\r\n\r\n        if (enableOptionalEffects) {\r\n            const sceneOpacity = [];\r\n            for (let i = 0; i < Constants.MaxScenes; i++) {\r\n                sceneOpacity.push(1.0);\r\n            }\r\n            uniforms['sceneOpacity'] ={\r\n                'type': 'f',\r\n                'value': sceneOpacity\r\n            };\r\n\r\n            const sceneVisibility = [];\r\n            for (let i = 0; i < Constants.MaxScenes; i++) {\r\n                sceneVisibility.push(1);\r\n            }\r\n            uniforms['sceneVisibility'] ={\r\n                'type': 'i',\r\n                'value': sceneVisibility\r\n            };\r\n        }\r\n\r\n        if (dynamicMode) {\r\n            const transformMatrices = [];\r\n            for (let i = 0; i < Constants.MaxScenes; i++) {\r\n                transformMatrices.push(new THREE.Matrix4());\r\n            }\r\n            uniforms['transforms'] = {\r\n                'type': 'mat4',\r\n                'value': transformMatrices\r\n            };\r\n        }\r\n\r\n        return uniforms;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatMaterial } from './SplatMaterial.js';\r\n\r\nexport class SplatMaterial3D {\r\n\r\n    /**\r\n     * Build the Three.js material that is used to render the splats.\r\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\r\n     *                             that the splat count might change\r\n     * @param {boolean} enableOptionalEffects When true, allows for usage of extra properties and attributes in the shader for effects\r\n     *                                        such as opacity adjustment. Default is false for performance reasons.\r\n     * @param {boolean} antialiased If true, calculate compensation factor to deal with gaussians being rendered at a significantly\r\n     *                              different resolution than that of their training\r\n     * @param {number} maxScreenSpaceSplatSize The maximum clip space splat size\r\n     * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\r\n     * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\r\n     * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\r\n     * @return {THREE.ShaderMaterial}\r\n     */\r\n    static build(dynamicMode = false, enableOptionalEffects = false, antialiased = false, maxScreenSpaceSplatSize = 2048,\r\n                 splatScale = 1.0, pointCloudModeEnabled = false, maxSphericalHarmonicsDegree = 0, kernel2DSize = 0.3) {\r\n\r\n        const customVertexVars = `\r\n            uniform vec2 covariancesTextureSize;\r\n            uniform highp sampler2D covariancesTexture;\r\n            uniform highp usampler2D covariancesTextureHalfFloat;\r\n            uniform int covariancesAreHalfFloat;\r\n\r\n            void fromCovarianceHalfFloatV4(uvec4 val, out vec4 first, out vec4 second) {\r\n                vec2 r = unpackHalf2x16(val.r);\r\n                vec2 g = unpackHalf2x16(val.g);\r\n                vec2 b = unpackHalf2x16(val.b);\r\n\r\n                first = vec4(r.x, r.y, g.x, g.y);\r\n                second = vec4(b.x, b.y, 0.0, 0.0);\r\n            }\r\n        `;\r\n\r\n        let vertexShaderSource = SplatMaterial.buildVertexShaderBase(dynamicMode, enableOptionalEffects,\r\n                                                                     maxSphericalHarmonicsDegree, customVertexVars);\r\n        vertexShaderSource += SplatMaterial3D.buildVertexShaderProjection(antialiased, enableOptionalEffects,\r\n                                                                          maxScreenSpaceSplatSize, kernel2DSize);\r\n        const fragmentShaderSource = SplatMaterial3D.buildFragmentShader();\r\n\r\n        const uniforms = SplatMaterial.getUniforms(dynamicMode, enableOptionalEffects,\r\n                                                   maxSphericalHarmonicsDegree, splatScale, pointCloudModeEnabled);\r\n\r\n        uniforms['covariancesTextureSize'] = {\r\n            'type': 'v2',\r\n            'value': new THREE.Vector2(1024, 1024)\r\n        };\r\n        uniforms['covariancesTexture'] = {\r\n            'type': 't',\r\n            'value': null\r\n        };\r\n        uniforms['covariancesTextureHalfFloat'] = {\r\n            'type': 't',\r\n            'value': null\r\n        };\r\n        uniforms['covariancesAreHalfFloat'] = {\r\n            'type': 'i',\r\n            'value': 0\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            alphaTest: 1.0,\r\n            blending: THREE.NormalBlending,\r\n            depthTest: true,\r\n            depthWrite: false,\r\n            side: THREE.DoubleSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    static buildVertexShaderProjection(antialiased, enableOptionalEffects, maxScreenSpaceSplatSize, kernel2DSize) {\r\n        let vertexShaderSource = `\r\n\r\n            vec4 sampledCovarianceA;\r\n            vec4 sampledCovarianceB;\r\n            vec3 cov3D_M11_M12_M13;\r\n            vec3 cov3D_M22_M23_M33;\r\n            if (covariancesAreHalfFloat == 0) {\r\n                sampledCovarianceA = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset,\r\n                                                                            covariancesTextureSize));\r\n                sampledCovarianceB = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset + uint(1),\r\n                                                                            covariancesTextureSize));\r\n\r\n                cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rgb) * (1.0 - fOddOffset) +\r\n                                    vec3(sampledCovarianceA.ba, sampledCovarianceB.r) * fOddOffset;\r\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg) * (1.0 - fOddOffset) +\r\n                                    vec3(sampledCovarianceB.gba) * fOddOffset;\r\n            } else {\r\n                uvec4 sampledCovarianceU = texture(covariancesTextureHalfFloat, getDataUV(1, 0, covariancesTextureSize));\r\n                fromCovarianceHalfFloatV4(sampledCovarianceU, sampledCovarianceA, sampledCovarianceB);\r\n                cov3D_M11_M12_M13 = sampledCovarianceA.rgb;\r\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg);\r\n            }\r\n        \r\n            // Construct the 3D covariance matrix\r\n            mat3 Vrk = mat3(\r\n                cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\r\n                cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\r\n                cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\r\n            );\r\n\r\n            mat3 J;\r\n            if (orthographicMode == 1) {\r\n                // Since the projection is linear, we don't need an approximation\r\n                J = transpose(mat3(orthoZoom, 0.0, 0.0,\r\n                                0.0, orthoZoom, 0.0,\r\n                                0.0, 0.0, 0.0));\r\n            } else {\r\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\r\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\r\n                // require a non-linear component (perspective division) which would yield a non-gaussian result.\r\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\r\n                J = mat3(\r\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\r\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\r\n                    0., 0., 0.\r\n                );\r\n            }\r\n\r\n            // Concatenate the projection approximation with the model-view transformation\r\n            mat3 W = transpose(mat3(transformModelViewMatrix));\r\n            mat3 T = W * J;\r\n\r\n            // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\r\n            mat3 cov2Dm = transpose(T) * Vrk * T;\r\n            `;\r\n\r\n        if (antialiased) {\r\n            vertexShaderSource += `\r\n                float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\r\n                cov2Dm[0][0] += ${kernel2DSize};\r\n                cov2Dm[1][1] += ${kernel2DSize};\r\n                float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\r\n                vColor.a *= sqrt(max(detOrig / detBlur, 0.0));\r\n                if (vColor.a < minAlpha) return;\r\n            `;\r\n        } else {\r\n            vertexShaderSource += `\r\n                cov2Dm[0][0] += ${kernel2DSize};\r\n                cov2Dm[1][1] += ${kernel2DSize};\r\n            `;\r\n        }\r\n\r\n        vertexShaderSource += `\r\n\r\n            // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\r\n            // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\r\n            // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\r\n            // need cov2Dm[1][0] because it is a symetric matrix.\r\n            vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\r\n\r\n            // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\r\n            // so that we can determine the 2D basis for the splat. This is done using the method described\r\n            // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\r\n            // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\r\n            // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * sqrt(eigen-value)), which is\r\n            // equal to scaling them by sqrt(8) standard deviations.\r\n            //\r\n            // This is a different approach than in the original work at INRIA. In that work they compute the\r\n            // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\r\n            // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\r\n            // times the square root of the maximum eigen-value, or 3 standard deviations. They then use the inverse\r\n            // 2D covariance matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by\r\n            // calculating the full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\r\n            float a = cov2Dv.x;\r\n            float d = cov2Dv.z;\r\n            float b = cov2Dv.y;\r\n            float D = a * d - b * b;\r\n            float trace = a + d;\r\n            float traceOver2 = 0.5 * trace;\r\n            float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\r\n            float eigenValue1 = traceOver2 + term2;\r\n            float eigenValue2 = traceOver2 - term2;\r\n\r\n            if (pointCloudModeEnabled == 1) {\r\n                eigenValue1 = eigenValue2 = 0.2;\r\n            }\r\n\r\n            if (eigenValue2 <= 0.0) return;\r\n\r\n            vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\r\n            // since the eigen vectors are orthogonal, we derive the second one from the first\r\n            vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\r\n\r\n            // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\r\n            vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(maxScreenSpaceSplatSize)}.0);\r\n            vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(maxScreenSpaceSplatSize)}.0);\r\n            `;\r\n\r\n        if (enableOptionalEffects) {\r\n            vertexShaderSource += `\r\n                vColor.a *= splatOpacityFromScene;\r\n            `;\r\n        }\r\n\r\n        vertexShaderSource += `\r\n            vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\r\n                             basisViewport * 2.0 * inverseFocalAdjustment;\r\n\r\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\r\n            gl_Position = quadPos;\r\n\r\n            // Scale the position data we send to the fragment shader\r\n            vPosition *= sqrt8;\r\n        `;\r\n\r\n        vertexShaderSource += SplatMaterial.getVertexShaderFadeIn();\r\n        vertexShaderSource += `}`;\r\n\r\n        return vertexShaderSource;\r\n    }\r\n\r\n    static buildFragmentShader() {\r\n        let fragmentShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n \r\n            uniform vec3 debugColor;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n            varying vec2 vPosition;\r\n        `;\r\n\r\n        fragmentShaderSource += `\r\n            void main () {\r\n                // Compute the positional squared distance from the center of the splat to the current fragment.\r\n                float A = dot(vPosition, vPosition);\r\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\r\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\r\n                // defined by the rectangle formed by vPosition. It also means it's farther\r\n                // away than sqrt(8) standard deviations from the mean.\r\n                if (A > 8.0) discard;\r\n                vec3 color = vColor.rgb;\r\n\r\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\r\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\r\n                // and since 'mean' is zero, we have X * X, which is the same as A:\r\n                float opacity = exp(-0.5 * A) * vColor.a;\r\n\r\n                gl_FragColor = vec4(color.rgb, opacity);\r\n            }\r\n        `;\r\n\r\n        return fragmentShaderSource;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatMaterial } from './SplatMaterial.js';\r\n\r\nexport class SplatMaterial2D {\r\n\r\n    /**\r\n     * Build the Three.js material that is used to render the splats.\r\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\r\n     *                             that the splat count might change\r\n     * @param {boolean} enableOptionalEffects When true, allows for usage of extra properties and attributes in the shader for effects\r\n     *                                        such as opacity adjustment. Default is false for performance reasons.\r\n     * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\r\n     * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\r\n     * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\r\n     * @return {THREE.ShaderMaterial}\r\n     */\r\n    static build(dynamicMode = false, enableOptionalEffects = false, splatScale = 1.0,\r\n                 pointCloudModeEnabled = false, maxSphericalHarmonicsDegree = 0) {\r\n\r\n        const customVertexVars = `\r\n            uniform vec2 scaleRotationsTextureSize;\r\n            uniform highp sampler2D scaleRotationsTexture;\r\n            varying mat3 vT;\r\n            varying vec2 vQuadCenter;\r\n            varying vec2 vFragCoord;\r\n        `;\r\n\r\n        let vertexShaderSource = SplatMaterial.buildVertexShaderBase(dynamicMode, enableOptionalEffects,\r\n                                                                     maxSphericalHarmonicsDegree, customVertexVars);\r\n        vertexShaderSource += SplatMaterial2D.buildVertexShaderProjection();\r\n        const fragmentShaderSource = SplatMaterial2D.buildFragmentShader();\r\n\r\n        const uniforms = SplatMaterial.getUniforms(dynamicMode, enableOptionalEffects,\r\n                                                   maxSphericalHarmonicsDegree, splatScale, pointCloudModeEnabled);\r\n\r\n        uniforms['scaleRotationsTexture'] = {\r\n            'type': 't',\r\n            'value': null\r\n        };\r\n        uniforms['scaleRotationsTextureSize'] = {\r\n            'type': 'v2',\r\n            'value': new THREE.Vector2(1024, 1024)\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            alphaTest: 1.0,\r\n            blending: THREE.NormalBlending,\r\n            depthTest: true,\r\n            depthWrite: false,\r\n            side: THREE.DoubleSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    static buildVertexShaderProjection() {\r\n\r\n        // Original CUDA code for calculating splat-to-screen transformation, for reference\r\n        /*\r\n            glm::mat3 R = quat_to_rotmat(rot);\r\n            glm::mat3 S = scale_to_mat(scale, mod);\r\n            glm::mat3 L = R * S;\r\n\r\n            // center of Gaussians in the camera coordinate\r\n            glm::mat3x4 splat2world = glm::mat3x4(\r\n                glm::vec4(L[0], 0.0),\r\n                glm::vec4(L[1], 0.0),\r\n                glm::vec4(p_orig.x, p_orig.y, p_orig.z, 1)\r\n            );\r\n\r\n            glm::mat4 world2ndc = glm::mat4(\r\n                projmatrix[0], projmatrix[4], projmatrix[8], projmatrix[12],\r\n                projmatrix[1], projmatrix[5], projmatrix[9], projmatrix[13],\r\n                projmatrix[2], projmatrix[6], projmatrix[10], projmatrix[14],\r\n                projmatrix[3], projmatrix[7], projmatrix[11], projmatrix[15]\r\n            );\r\n\r\n            glm::mat3x4 ndc2pix = glm::mat3x4(\r\n                glm::vec4(float(W) / 2.0, 0.0, 0.0, float(W-1) / 2.0),\r\n                glm::vec4(0.0, float(H) / 2.0, 0.0, float(H-1) / 2.0),\r\n                glm::vec4(0.0, 0.0, 0.0, 1.0)\r\n            );\r\n\r\n            T = glm::transpose(splat2world) * world2ndc * ndc2pix;\r\n            normal = transformVec4x3({L[2].x, L[2].y, L[2].z}, viewmatrix);\r\n        */\r\n\r\n        // Compute a 2D-to-2D mapping matrix from a tangent plane into a image plane\r\n        // given a 2D gaussian parameters. T = WH (from the paper: https://arxiv.org/pdf/2403.17888)\r\n        let vertexShaderSource = `\r\n\r\n            vec4 scaleRotationA = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\r\n                                                                            oddOffset, scaleRotationsTextureSize));\r\n            vec4 scaleRotationB = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\r\n                                                                            oddOffset + uint(1), scaleRotationsTextureSize));\r\n\r\n            vec3 scaleRotation123 = vec3(scaleRotationA.rgb) * (1.0 - fOddOffset) +\r\n                                    vec3(scaleRotationA.ba, scaleRotationB.r) * fOddOffset;\r\n            vec3 scaleRotation456 = vec3(scaleRotationA.a, scaleRotationB.rg) * (1.0 - fOddOffset) +\r\n                                    vec3(scaleRotationB.gba) * fOddOffset;\r\n\r\n            float missingW = sqrt(1.0 - scaleRotation456.x * scaleRotation456.x - scaleRotation456.y *\r\n                                    scaleRotation456.y - scaleRotation456.z * scaleRotation456.z);\r\n            mat3 R = quaternionToRotationMatrix(scaleRotation456.r, scaleRotation456.g, scaleRotation456.b, missingW);\r\n            mat3 S = mat3(scaleRotation123.r, 0.0, 0.0,\r\n                            0.0, scaleRotation123.g, 0.0,\r\n                            0.0, 0.0, scaleRotation123.b);\r\n            \r\n            mat3 L = R * S;\r\n\r\n            mat3x4 splat2World = mat3x4(vec4(L[0], 0.0),\r\n                                        vec4(L[1], 0.0),\r\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\r\n\r\n            mat4 world2ndc = transpose(projectionMatrix * transformModelViewMatrix);\r\n\r\n            mat3x4 ndc2pix = mat3x4(vec4(viewport.x / 2.0, 0.0, 0.0, (viewport.x - 1.0) / 2.0),\r\n                                    vec4(0.0, viewport.y / 2.0, 0.0, (viewport.y - 1.0) / 2.0),\r\n                                    vec4(0.0, 0.0, 0.0, 1.0));\r\n\r\n            mat3 T = transpose(splat2World) * world2ndc * ndc2pix;\r\n            vec3 normal = vec3(viewMatrix * vec4(L[0][2], L[1][2], L[2][2], 0.0));\r\n        `;\r\n\r\n        // Original CUDA code for projection to 2D, for reference\r\n        /*\r\n            float3 T0 = {T[0][0], T[0][1], T[0][2]};\r\n            float3 T1 = {T[1][0], T[1][1], T[1][2]};\r\n            float3 T3 = {T[2][0], T[2][1], T[2][2]};\r\n\r\n            // Compute AABB\r\n            float3 temp_point = {1.0f, 1.0f, -1.0f};\r\n            float distance = sumf3(T3 * T3 * temp_point);\r\n            float3 f = (1 / distance) * temp_point;\r\n            if (distance == 0.0) return false;\r\n\r\n            point_image = {\r\n                sumf3(f * T0 * T3),\r\n                sumf3(f * T1 * T3)\r\n            };\r\n\r\n            float2 temp = {\r\n                sumf3(f * T0 * T0),\r\n                sumf3(f * T1 * T1)\r\n            };\r\n            float2 half_extend = point_image * point_image - temp;\r\n            extent = sqrtf2(maxf2(1e-4, half_extend));\r\n            return true;\r\n        */\r\n\r\n        // Computing the bounding box of the 2D Gaussian and its center\r\n        // The center of the bounding box is used to create a low pass filter.\r\n        // This code is based off the reference implementation and creates an AABB aligned\r\n        // with the screen for the quad to be rendered.\r\n        const referenceQuadGeneration = `\r\n            vec3 T0 = vec3(T[0][0], T[0][1], T[0][2]);\r\n            vec3 T1 = vec3(T[1][0], T[1][1], T[1][2]);\r\n            vec3 T3 = vec3(T[2][0], T[2][1], T[2][2]);\r\n\r\n            vec3 tempPoint = vec3(1.0, 1.0, -1.0);\r\n            float distance = (T3.x * T3.x * tempPoint.x) + (T3.y * T3.y * tempPoint.y) + (T3.z * T3.z * tempPoint.z);\r\n            vec3 f = (1.0 / distance) * tempPoint;\r\n            if (abs(distance) < 0.00001) return;\r\n\r\n            float pointImageX = (T0.x * T3.x * f.x) + (T0.y * T3.y * f.y) + (T0.z * T3.z * f.z);\r\n            float pointImageY = (T1.x * T3.x * f.x) + (T1.y * T3.y * f.y) + (T1.z * T3.z * f.z);\r\n            vec2 pointImage = vec2(pointImageX, pointImageY);\r\n\r\n            float tempX = (T0.x * T0.x * f.x) + (T0.y * T0.y * f.y) + (T0.z * T0.z * f.z);\r\n            float tempY = (T1.x * T1.x * f.x) + (T1.y * T1.y * f.y) + (T1.z * T1.z * f.z);\r\n            vec2 temp = vec2(tempX, tempY);\r\n\r\n            vec2 halfExtend = pointImage * pointImage - temp;\r\n            vec2 extent = sqrt(max(vec2(0.0001), halfExtend));\r\n            float radius = max(extent.x, extent.y);\r\n\r\n            vec2 ndcOffset = ((position.xy * radius * 3.0) * basisViewport * 2.0);\r\n\r\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\r\n            gl_Position = quadPos;\r\n\r\n            vT = T;\r\n            vQuadCenter = pointImage;\r\n            vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\r\n        `;\r\n\r\n        const useRefImplementation = false;\r\n        if (useRefImplementation) {\r\n            vertexShaderSource += referenceQuadGeneration;\r\n        } else {\r\n            // Create a quad that is aligned with the eigen vectors of the projected gaussian for rendering.\r\n            // This is a different approach than the reference implementation, similar to how the rendering of\r\n            // 3D gaussians in this viewer differs from the reference implementation. If the quad is too small\r\n            // (smaller than a pixel), then revert to the reference implementation.\r\n            vertexShaderSource += `\r\n\r\n                mat4 splat2World4 = mat4(vec4(L[0], 0.0),\r\n                                        vec4(L[1], 0.0),\r\n                                        vec4(L[2], 0.0),\r\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\r\n\r\n                mat4 Tt = transpose(transpose(splat2World4) * world2ndc);\r\n\r\n                vec4 tempPoint1 = Tt * vec4(1.0, 0.0, 0.0, 1.0);\r\n                tempPoint1 /= tempPoint1.w;\r\n\r\n                vec4 tempPoint2 = Tt * vec4(0.0, 1.0, 0.0, 1.0);\r\n                tempPoint2 /= tempPoint2.w;\r\n\r\n                vec4 center = Tt * vec4(0.0, 0.0, 0.0, 1.0);\r\n                center /= center.w;\r\n\r\n                vec2 basisVector1 = tempPoint1.xy - center.xy;\r\n                vec2 basisVector2 = tempPoint2.xy - center.xy;\r\n\r\n                vec2 basisVector1Screen = basisVector1 * 0.5 * viewport;\r\n                vec2 basisVector2Screen = basisVector2 * 0.5 * viewport;\r\n\r\n                const float minPix = 1.;\r\n                if (length(basisVector1Screen) < minPix || length(basisVector2Screen) < minPix) {\r\n                    ${referenceQuadGeneration}\r\n                } else {\r\n                    vec2 ndcOffset = vec2(position.x * basisVector1 + position.y * basisVector2) * 3.0 * inverseFocalAdjustment;\r\n                    vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\r\n                    gl_Position = quadPos;\r\n\r\n                    vT = T;\r\n                    vQuadCenter = center.xy;\r\n                    vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\r\n                }\r\n            `;\r\n        }\r\n\r\n        vertexShaderSource += SplatMaterial.getVertexShaderFadeIn();\r\n        vertexShaderSource += `}`;\r\n\r\n        return vertexShaderSource;\r\n    }\r\n\r\n    static buildFragmentShader() {\r\n\r\n        // Original CUDA code for splat intersection, for reference\r\n        /*\r\n            const float2 xy = collected_xy[j];\r\n            const float3 Tu = collected_Tu[j];\r\n            const float3 Tv = collected_Tv[j];\r\n            const float3 Tw = collected_Tw[j];\r\n            float3 k = pix.x * Tw - Tu;\r\n            float3 l = pix.y * Tw - Tv;\r\n            float3 p = cross(k, l);\r\n            if (p.z == 0.0) continue;\r\n            float2 s = {p.x / p.z, p.y / p.z};\r\n            float rho3d = (s.x * s.x + s.y * s.y);\r\n            float2 d = {xy.x - pixf.x, xy.y - pixf.y};\r\n            float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y);\r\n\r\n            // compute intersection and depth\r\n            float rho = min(rho3d, rho2d);\r\n            float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z;\r\n            if (depth < near_n) continue;\r\n            float4 nor_o = collected_normal_opacity[j];\r\n            float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\r\n            float opa = nor_o.w;\r\n\r\n            float power = -0.5f * rho;\r\n            if (power > 0.0f)\r\n                continue;\r\n\r\n            // Eq. (2) from 3D Gaussian splatting paper.\r\n            // Obtain alpha by multiplying with Gaussian opacity\r\n            // and its exponential falloff from mean.\r\n            // Avoid numerical instabilities (see paper appendix).\r\n            float alpha = min(0.99f, opa * exp(power));\r\n            if (alpha < 1.0f / 255.0f)\r\n                continue;\r\n            float test_T = T * (1 - alpha);\r\n            if (test_T < 0.0001f)\r\n            {\r\n                done = true;\r\n                continue;\r\n            }\r\n\r\n            float w = alpha * T;\r\n        */\r\n        let fragmentShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n\r\n            uniform vec3 debugColor;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n            varying vec2 vPosition;\r\n            varying mat3 vT;\r\n            varying vec2 vQuadCenter;\r\n            varying vec2 vFragCoord;\r\n\r\n            void main () {\r\n\r\n                const float FilterInvSquare = 2.0;\r\n                const float near_n = 0.2;\r\n                const float T = 1.0;\r\n\r\n                vec2 xy = vQuadCenter;\r\n                vec3 Tu = vT[0];\r\n                vec3 Tv = vT[1];\r\n                vec3 Tw = vT[2];\r\n                vec3 k = vFragCoord.x * Tw - Tu;\r\n                vec3 l = vFragCoord.y * Tw - Tv;\r\n                vec3 p = cross(k, l);\r\n                if (p.z == 0.0) discard;\r\n                vec2 s = vec2(p.x / p.z, p.y / p.z);\r\n                float rho3d = (s.x * s.x + s.y * s.y); \r\n                vec2 d = vec2(xy.x - vFragCoord.x, xy.y - vFragCoord.y);\r\n                float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y); \r\n\r\n                // compute intersection and depth\r\n                float rho = min(rho3d, rho2d);\r\n                float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z; \r\n                if (depth < near_n) discard;\r\n                //  vec4 nor_o = collected_normal_opacity[j];\r\n                //  float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\r\n                float opa = vColor.a;\r\n\r\n                float power = -0.5f * rho;\r\n                if (power > 0.0f) discard;\r\n\r\n                // Eq. (2) from 3D Gaussian splatting paper.\r\n                // Obtain alpha by multiplying with Gaussian opacity\r\n                // and its exponential falloff from mean.\r\n                // Avoid numerical instabilities (see paper appendix). \r\n                float alpha = min(0.99f, opa * exp(power));\r\n                if (alpha < 1.0f / 255.0f) discard;\r\n                float test_T = T * (1.0 - alpha);\r\n                if (test_T < 0.0001)discard;\r\n\r\n                float w = alpha * T;\r\n                gl_FragColor = vec4(vColor.rgb, w);\r\n            }\r\n        `;\r\n\r\n        return fragmentShaderSource;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class SplatGeometry {\r\n\r\n    /**\r\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\r\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\r\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\r\n     * @return {THREE.InstancedBufferGeometry}\r\n     */\r\n    static build(maxSplatCount) {\r\n\r\n        const baseGeometry = new THREE.BufferGeometry();\r\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\r\n\r\n        // Vertices for the instanced quad\r\n        const positionsArray = new Float32Array(4 * 3);\r\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\r\n        baseGeometry.setAttribute('position', positions);\r\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\r\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\r\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\r\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\r\n        positions.needsUpdate = true;\r\n\r\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\r\n\r\n        // Splat index buffer\r\n        const splatIndexArray = new Uint32Array(maxSplatCount);\r\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\r\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\r\n        geometry.setAttribute('splatIndex', splatIndexes);\r\n\r\n        geometry.instanceCount = 0;\r\n\r\n        return geometry;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\n/**\r\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\r\n */\r\nexport class SplatScene extends THREE.Object3D {\r\n\r\n    constructor(splatBuffer, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(),\r\n                scale = new THREE.Vector3(1, 1, 1), minimumAlpha = 1, opacity = 1.0, visible = true) {\r\n        super();\r\n        this.splatBuffer = splatBuffer;\r\n        this.position.copy(position);\r\n        this.quaternion.copy(quaternion);\r\n        this.scale.copy(scale);\r\n        this.transform = new THREE.Matrix4();\r\n        this.minimumAlpha = minimumAlpha;\r\n        this.opacity = opacity;\r\n        this.visible = visible;\r\n    }\r\n\r\n    copyTransformData(otherScene) {\r\n        this.position.copy(otherScene.position);\r\n        this.quaternion.copy(otherScene.quaternion);\r\n        this.scale.copy(otherScene.scale);\r\n        this.transform.copy(otherScene.transform);\r\n    }\r\n\r\n    updateTransform(dynamicMode) {\r\n        if (dynamicMode) {\r\n            if (this.matrixWorldAutoUpdate) this.updateWorldMatrix(true, false);\r\n            this.transform.copy(this.matrixWorld);\r\n        } else {\r\n            if (this.matrixAutoUpdate) this.updateMatrix();\r\n            this.transform.copy(this.matrix);\r\n        }\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { delayedExecute } from '../Util.js';\r\n\r\nclass SplatTreeNode {\r\n\r\n    static idGen = 0;\r\n\r\n    constructor(min, max, depth, id) {\r\n        this.min = new THREE.Vector3().copy(min);\r\n        this.max = new THREE.Vector3().copy(max);\r\n        this.boundingBox = new THREE.Box3(this.min, this.max);\r\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\r\n        this.depth = depth;\r\n        this.children = [];\r\n        this.data = null;\r\n        this.id = id || SplatTreeNode.idGen++;\r\n    }\r\n\r\n}\r\n\r\nclass SplatSubTree {\r\n\r\n    constructor(maxDepth, maxCentersPerNode) {\r\n        this.maxDepth = maxDepth;\r\n        this.maxCentersPerNode = maxCentersPerNode;\r\n        this.sceneDimensions = new THREE.Vector3();\r\n        this.sceneMin = new THREE.Vector3();\r\n        this.sceneMax = new THREE.Vector3();\r\n        this.rootNode = null;\r\n        this.nodesWithIndexes = [];\r\n        this.splatMesh = null;\r\n    }\r\n\r\n    static convertWorkerSubTreeNode(workerSubTreeNode) {\r\n        const minVector = new THREE.Vector3().fromArray(workerSubTreeNode.min);\r\n        const maxVector = new THREE.Vector3().fromArray(workerSubTreeNode.max);\r\n        const convertedNode = new SplatTreeNode(minVector, maxVector, workerSubTreeNode.depth, workerSubTreeNode.id);\r\n        if (workerSubTreeNode.data.indexes) {\r\n            convertedNode.data = {\r\n                'indexes': []\r\n            };\r\n            for (let index of workerSubTreeNode.data.indexes) {\r\n                convertedNode.data.indexes.push(index);\r\n            }\r\n        }\r\n        if (workerSubTreeNode.children) {\r\n            for (let child of workerSubTreeNode.children) {\r\n                convertedNode.children.push(SplatSubTree.convertWorkerSubTreeNode(child));\r\n            }\r\n        }\r\n        return convertedNode;\r\n    }\r\n\r\n    static convertWorkerSubTree(workerSubTree, splatMesh) {\r\n        const convertedSubTree = new SplatSubTree(workerSubTree.maxDepth, workerSubTree.maxCentersPerNode);\r\n        convertedSubTree.sceneMin = new THREE.Vector3().fromArray(workerSubTree.sceneMin);\r\n        convertedSubTree.sceneMax = new THREE.Vector3().fromArray(workerSubTree.sceneMax);\r\n\r\n        convertedSubTree.splatMesh = splatMesh;\r\n        convertedSubTree.rootNode = SplatSubTree.convertWorkerSubTreeNode(workerSubTree.rootNode);\r\n\r\n\r\n        const visitLeavesFromNode = (node, visitFunc) => {\r\n            if (node.children.length === 0) visitFunc(node);\r\n            for (let child of node.children) {\r\n                visitLeavesFromNode(child, visitFunc);\r\n            }\r\n        };\r\n\r\n        convertedSubTree.nodesWithIndexes = [];\r\n        visitLeavesFromNode(convertedSubTree.rootNode, (node) => {\r\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\r\n                convertedSubTree.nodesWithIndexes.push(node);\r\n            }\r\n        });\r\n\r\n        return convertedSubTree;\r\n    }\r\n}\r\n\r\nfunction createSplatTreeWorker(self) {\r\n\r\n    let WorkerSplatTreeNodeIDGen = 0;\r\n\r\n    class WorkerBox3 {\r\n\r\n        constructor(min, max) {\r\n            this.min = [min[0], min[1], min[2]];\r\n            this.max = [max[0], max[1], max[2]];\r\n        }\r\n\r\n        containsPoint(point) {\r\n            return point[0] >= this.min[0] && point[0] <= this.max[0] &&\r\n                   point[1] >= this.min[1] && point[1] <= this.max[1] &&\r\n                   point[2] >= this.min[2] && point[2] <= this.max[2];\r\n        }\r\n    }\r\n\r\n    class WorkerSplatSubTree {\r\n\r\n        constructor(maxDepth, maxCentersPerNode) {\r\n            this.maxDepth = maxDepth;\r\n            this.maxCentersPerNode = maxCentersPerNode;\r\n            this.sceneDimensions = [];\r\n            this.sceneMin = [];\r\n            this.sceneMax = [];\r\n            this.rootNode = null;\r\n            this.addedIndexes = {};\r\n            this.nodesWithIndexes = [];\r\n            this.splatMesh = null;\r\n            this.disposed = false;\r\n        }\r\n\r\n    }\r\n\r\n    class WorkerSplatTreeNode {\r\n\r\n        constructor(min, max, depth, id) {\r\n            this.min = [min[0], min[1], min[2]];\r\n            this.max = [max[0], max[1], max[2]];\r\n            this.center = [(max[0] - min[0]) * 0.5 + min[0],\r\n                           (max[1] - min[1]) * 0.5 + min[1],\r\n                           (max[2] - min[2]) * 0.5 + min[2]];\r\n            this.depth = depth;\r\n            this.children = [];\r\n            this.data = null;\r\n            this.id = id || WorkerSplatTreeNodeIDGen++;\r\n        }\r\n\r\n    }\r\n\r\n    processSplatTreeNode = function(tree, node, indexToCenter, sceneCenters) {\r\n        const splatCount = node.data.indexes.length;\r\n\r\n        if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\r\n            const newIndexes = [];\r\n            for (let i = 0; i < node.data.indexes.length; i++) {\r\n                if (!tree.addedIndexes[node.data.indexes[i]]) {\r\n                    newIndexes.push(node.data.indexes[i]);\r\n                    tree.addedIndexes[node.data.indexes[i]] = true;\r\n                }\r\n            }\r\n            node.data.indexes = newIndexes;\r\n            node.data.indexes.sort((a, b) => {\r\n                if (a > b) return 1;\r\n                else return -1;\r\n            });\r\n            tree.nodesWithIndexes.push(node);\r\n            return;\r\n        }\r\n\r\n        const nodeDimensions = [node.max[0] - node.min[0],\r\n                                node.max[1] - node.min[1],\r\n                                node.max[2] - node.min[2]];\r\n        const halfDimensions = [nodeDimensions[0] * 0.5,\r\n                                nodeDimensions[1] * 0.5,\r\n                                nodeDimensions[2] * 0.5];\r\n        const nodeCenter = [node.min[0] + halfDimensions[0],\r\n                            node.min[1] + halfDimensions[1],\r\n                            node.min[2] + halfDimensions[2]];\r\n\r\n        const childrenBounds = [\r\n            // top section, clockwise from upper-left (looking from above, +Y)\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2]],\r\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\r\n\r\n            // bottom section, clockwise from lower-left (looking from above, +Y)\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\r\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\r\n        ];\r\n\r\n        const splatCounts = [];\r\n        const baseIndexes = [];\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            splatCounts[i] = 0;\r\n            baseIndexes[i] = [];\r\n        }\r\n\r\n        const center = [0, 0, 0];\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const splatGlobalIndex = node.data.indexes[i];\r\n            const centerBase = indexToCenter[splatGlobalIndex];\r\n            center[0] = sceneCenters[centerBase];\r\n            center[1] = sceneCenters[centerBase + 1];\r\n            center[2] = sceneCenters[centerBase + 2];\r\n            for (let j = 0; j < childrenBounds.length; j++) {\r\n                if (childrenBounds[j].containsPoint(center)) {\r\n                    splatCounts[j]++;\r\n                    baseIndexes[j].push(splatGlobalIndex);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            const childNode = new WorkerSplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\r\n            childNode.data = {\r\n                'indexes': baseIndexes[i]\r\n            };\r\n            node.children.push(childNode);\r\n        }\r\n\r\n        node.data = {};\r\n        for (let child of node.children) {\r\n            processSplatTreeNode(tree, child, indexToCenter, sceneCenters);\r\n        }\r\n        return;\r\n    };\r\n\r\n    const buildSubTree = (sceneCenters, maxDepth, maxCentersPerNode) => {\r\n\r\n        const sceneMin = [0, 0, 0];\r\n        const sceneMax = [0, 0, 0];\r\n        const indexes = [];\r\n        const centerCount = Math.floor(sceneCenters.length / 4);\r\n        for ( let i = 0; i < centerCount; i ++) {\r\n            const base = i * 4;\r\n            const x = sceneCenters[base];\r\n            const y = sceneCenters[base + 1];\r\n            const z = sceneCenters[base + 2];\r\n            const index = Math.round(sceneCenters[base + 3]);\r\n            if (i === 0 || x < sceneMin[0]) sceneMin[0] = x;\r\n            if (i === 0 || x > sceneMax[0]) sceneMax[0] = x;\r\n            if (i === 0 || y < sceneMin[1]) sceneMin[1] = y;\r\n            if (i === 0 || y > sceneMax[1]) sceneMax[1] = y;\r\n            if (i === 0 || z < sceneMin[2]) sceneMin[2] = z;\r\n            if (i === 0 || z > sceneMax[2]) sceneMax[2] = z;\r\n            indexes.push(index);\r\n        }\r\n        const subTree = new WorkerSplatSubTree(maxDepth, maxCentersPerNode);\r\n        subTree.sceneMin = sceneMin;\r\n        subTree.sceneMax = sceneMax;\r\n        subTree.rootNode = new WorkerSplatTreeNode(subTree.sceneMin, subTree.sceneMax, 0);\r\n        subTree.rootNode.data = {\r\n            'indexes': indexes\r\n        };\r\n\r\n        return subTree;\r\n    };\r\n\r\n    function createSplatTree(allCenters, maxDepth, maxCentersPerNode) {\r\n        const indexToCenter = [];\r\n        for (let sceneCenters of allCenters) {\r\n            const centerCount = Math.floor(sceneCenters.length / 4);\r\n            for ( let i = 0; i < centerCount; i ++) {\r\n                const base = i * 4;\r\n                const index = Math.round(sceneCenters[base + 3]);\r\n                indexToCenter[index] = base;\r\n            }\r\n        }\r\n        const subTrees = [];\r\n        for (let sceneCenters of allCenters) {\r\n            const subTree = buildSubTree(sceneCenters, maxDepth, maxCentersPerNode);\r\n            subTrees.push(subTree);\r\n            processSplatTreeNode(subTree, subTree.rootNode, indexToCenter, sceneCenters);\r\n        }\r\n        self.postMessage({\r\n            'subTrees': subTrees\r\n        });\r\n    }\r\n\r\n    self.onmessage = (e) => {\r\n        if (e.data.process) {\r\n            createSplatTree(e.data.process.centers, e.data.process.maxDepth, e.data.process.maxCentersPerNode);\r\n        }\r\n    };\r\n}\r\n\r\nfunction workerProcessCenters(splatTreeWorker, centers, transferBuffers, maxDepth, maxCentersPerNode) {\r\n    splatTreeWorker.postMessage({\r\n        'process': {\r\n            'centers': centers,\r\n            'maxDepth': maxDepth,\r\n            'maxCentersPerNode': maxCentersPerNode\r\n        }\r\n    }, transferBuffers);\r\n}\r\n\r\nfunction checkAndCreateWorker() {\r\n    const splatTreeWorker = new Worker(\r\n        URL.createObjectURL(\r\n            new Blob(['(', createSplatTreeWorker.toString(), ')(self)'], {\r\n                type: 'application/javascript',\r\n            }),\r\n        ),\r\n    );\r\n    return splatTreeWorker;\r\n}\r\n\r\n/**\r\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\r\n */\r\nexport class SplatTree {\r\n\r\n    constructor(maxDepth, maxCentersPerNode) {\r\n        this.maxDepth = maxDepth;\r\n        this.maxCentersPerNode = maxCentersPerNode;\r\n        this.subTrees = [];\r\n        this.splatMesh = null;\r\n    }\r\n\r\n\r\n    dispose() {\r\n        this.diposeSplatTreeWorker();\r\n        this.disposed = true;\r\n    }\r\n\r\n    diposeSplatTreeWorker() {\r\n        if (this.splatTreeWorker) this.splatTreeWorker.terminate();\r\n        this.splatTreeWorker = null;\r\n    };\r\n\r\n    /**\r\n     * Construct this instance of SplatTree from an instance of SplatMesh.\r\n     *\r\n     * @param {SplatMesh} splatMesh The instance of SplatMesh from which to construct this splat tree.\r\n     * @param {function} filterFunc Optional function to filter out unwanted splats.\r\n     * @param {function} onIndexesUpload Function to be called when the upload of splat centers to the splat tree\r\n     *                                   builder worker starts and finishes.\r\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\r\n     *                                           the format produced by the splat tree builder worker starts and ends.\r\n     * @return {undefined}\r\n     */\r\n    processSplatMesh = function(splatMesh, filterFunc = () => true, onIndexesUpload, onSplatTreeConstruction) {\r\n        if (!this.splatTreeWorker) this.splatTreeWorker = checkAndCreateWorker();\r\n\r\n        this.splatMesh = splatMesh;\r\n        this.subTrees = [];\r\n        const center = new THREE.Vector3();\r\n\r\n        const addCentersForScene = (splatOffset, splatCount) => {\r\n            const sceneCenters = new Float32Array(splatCount * 4);\r\n            let addedCount = 0;\r\n            for (let i = 0; i < splatCount; i++) {\r\n                const globalSplatIndex = i + splatOffset;\r\n                if (filterFunc(globalSplatIndex)) {\r\n                    splatMesh.getSplatCenter(globalSplatIndex, center);\r\n                    const addBase = addedCount * 4;\r\n                    sceneCenters[addBase] = center.x;\r\n                    sceneCenters[addBase + 1] = center.y;\r\n                    sceneCenters[addBase + 2] = center.z;\r\n                    sceneCenters[addBase + 3] = globalSplatIndex;\r\n                    addedCount++;\r\n                }\r\n            }\r\n            return sceneCenters;\r\n        };\r\n\r\n        return new Promise((resolve) => {\r\n\r\n            const checkForEarlyExit = () => {\r\n                if (this.disposed) {\r\n                    this.diposeSplatTreeWorker();\r\n                    resolve();\r\n                    return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            if (onIndexesUpload) onIndexesUpload(false);\r\n\r\n            delayedExecute(() => {\r\n\r\n                if (checkForEarlyExit()) return;\r\n\r\n                const allCenters = [];\r\n                if (splatMesh.dynamicMode) {\r\n                    let splatOffset = 0;\r\n                    for (let s = 0; s < splatMesh.scenes.length; s++) {\r\n                        const scene = splatMesh.getScene(s);\r\n                        const splatCount = scene.splatBuffer.getSplatCount();\r\n                        const sceneCenters = addCentersForScene(splatOffset, splatCount);\r\n                        allCenters.push(sceneCenters);\r\n                        splatOffset += splatCount;\r\n                    }\r\n                } else {\r\n                    const sceneCenters = addCentersForScene(0, splatMesh.getSplatCount());\r\n                    allCenters.push(sceneCenters);\r\n                }\r\n\r\n                this.splatTreeWorker.onmessage = (e) => {\r\n\r\n                    if (checkForEarlyExit()) return;\r\n\r\n                    if (e.data.subTrees) {\r\n\r\n                        if (onSplatTreeConstruction) onSplatTreeConstruction(false);\r\n\r\n                        delayedExecute(() => {\r\n\r\n                            if (checkForEarlyExit()) return;\r\n\r\n                            for (let workerSubTree of e.data.subTrees) {\r\n                                const convertedSubTree = SplatSubTree.convertWorkerSubTree(workerSubTree, splatMesh);\r\n                                this.subTrees.push(convertedSubTree);\r\n                            }\r\n                            this.diposeSplatTreeWorker();\r\n\r\n                            if (onSplatTreeConstruction) onSplatTreeConstruction(true);\r\n\r\n                            delayedExecute(() => {\r\n                                resolve();\r\n                            });\r\n\r\n                        });\r\n                    }\r\n                };\r\n\r\n                delayedExecute(() => {\r\n                    if (checkForEarlyExit()) return;\r\n                    if (onIndexesUpload) onIndexesUpload(true);\r\n                    const transferBuffers = allCenters.map((array) => array.buffer);\r\n                    workerProcessCenters(this.splatTreeWorker, allCenters, transferBuffers, this.maxDepth, this.maxCentersPerNode);\r\n                });\r\n\r\n            });\r\n\r\n        });\r\n\r\n    };\r\n\r\n    countLeaves() {\r\n\r\n        let leafCount = 0;\r\n        this.visitLeaves(() => {\r\n            leafCount++;\r\n        });\r\n\r\n        return leafCount;\r\n    }\r\n\r\n    visitLeaves(visitFunc) {\r\n\r\n        const visitLeavesFromNode = (node, visitFunc) => {\r\n            if (node.children.length === 0) visitFunc(node);\r\n            for (let child of node.children) {\r\n                visitLeavesFromNode(child, visitFunc);\r\n            }\r\n        };\r\n\r\n        for (let subTree of this.subTrees) {\r\n            visitLeavesFromNode(subTree.rootNode, visitFunc);\r\n        }\r\n    }\r\n\r\n}\r\n","function WebGLExtensions( gl ) {\r\n\r\n    const extensions = {};\r\n\r\n    function getExtension( name ) {\r\n\r\n        if ( extensions[name] !== undefined ) {\r\n\r\n            return extensions[name];\r\n\r\n        }\r\n\r\n        let extension;\r\n\r\n        switch ( name ) {\r\n\r\n            case 'WEBGL_depth_texture':\r\n                extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) ||\r\n                            gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\r\n                break;\r\n\r\n            case 'EXT_texture_filter_anisotropic':\r\n                extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||\r\n                            gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||\r\n                            gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n                break;\r\n\r\n            case 'WEBGL_compressed_texture_s3tc':\r\n                extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||\r\n                            gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||\r\n                            gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n                break;\r\n\r\n            case 'WEBGL_compressed_texture_pvrtc':\r\n                extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) ||\r\n                           gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n                break;\r\n\r\n            default:\r\n                extension = gl.getExtension( name );\r\n\r\n        }\r\n\r\n        extensions[name] = extension;\r\n\r\n        return extension;\r\n\r\n    }\r\n\r\n    return {\r\n\r\n        has: function( name ) {\r\n\r\n            return getExtension( name ) !== null;\r\n\r\n        },\r\n\r\n        init: function( capabilities ) {\r\n\r\n            if ( capabilities.isWebGL2 ) {\r\n\r\n                getExtension( 'EXT_color_buffer_float' );\r\n                getExtension( 'WEBGL_clip_cull_distance' );\r\n\r\n            } else {\r\n\r\n                getExtension( 'WEBGL_depth_texture' );\r\n                getExtension( 'OES_texture_float' );\r\n                getExtension( 'OES_texture_half_float' );\r\n                getExtension( 'OES_texture_half_float_linear' );\r\n                getExtension( 'OES_standard_derivatives' );\r\n                getExtension( 'OES_element_index_uint' );\r\n                getExtension( 'OES_vertex_array_object' );\r\n                getExtension( 'ANGLE_instanced_arrays' );\r\n\r\n            }\r\n\r\n            getExtension( 'OES_texture_float_linear' );\r\n            getExtension( 'EXT_color_buffer_half_float' );\r\n            getExtension( 'WEBGL_multisampled_render_to_texture' );\r\n\r\n        },\r\n\r\n        get: function( name ) {\r\n\r\n            const extension = getExtension( name );\r\n\r\n            if ( extension === null ) {\r\n\r\n                console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\r\n            }\r\n\r\n            return extension;\r\n\r\n        }\r\n\r\n    };\r\n\r\n}\r\n\r\nexport { WebGLExtensions };\r\n","function WebGLCapabilities( gl, extensions, parameters ) {\r\n\r\n    let maxAnisotropy;\r\n\r\n    function getMaxAnisotropy() {\r\n\r\n        if ( maxAnisotropy !== undefined ) return maxAnisotropy;\r\n\r\n        if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\r\n\r\n            const extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n            maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\r\n        } else {\r\n\r\n            maxAnisotropy = 0;\r\n\r\n        }\r\n\r\n        return maxAnisotropy;\r\n\r\n    }\r\n\r\n    function getMaxPrecision( precision ) {\r\n\r\n        if ( precision === 'highp' ) {\r\n\r\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\r\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\r\n\r\n                return 'highp';\r\n\r\n            }\r\n\r\n            precision = 'mediump';\r\n\r\n        }\r\n\r\n        if ( precision === 'mediump' ) {\r\n\r\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\r\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\r\n\r\n                return 'mediump';\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return 'lowp';\r\n\r\n    }\r\n\r\n    const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';\r\n\r\n    let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\r\n    const maxPrecision = getMaxPrecision( precision );\r\n\r\n    if ( maxPrecision !== precision ) {\r\n\r\n        console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\r\n        precision = maxPrecision;\r\n\r\n    }\r\n\r\n    const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\r\n\r\n    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\r\n\r\n    const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n    const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n    const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\r\n    const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n    const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n    const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n    const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\r\n    const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\r\n\r\n    const vertexTextures = maxVertexTextures > 0;\r\n    const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\r\n    const floatVertexTextures = vertexTextures && floatFragmentTextures;\r\n\r\n    const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;\r\n\r\n    return {\r\n\r\n        isWebGL2: isWebGL2,\r\n\r\n        drawBuffers: drawBuffers,\r\n\r\n        getMaxAnisotropy: getMaxAnisotropy,\r\n        getMaxPrecision: getMaxPrecision,\r\n\r\n        precision: precision,\r\n        logarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\r\n        maxTextures: maxTextures,\r\n        maxVertexTextures: maxVertexTextures,\r\n        maxTextureSize: maxTextureSize,\r\n        maxCubemapSize: maxCubemapSize,\r\n\r\n        maxAttributes: maxAttributes,\r\n        maxVertexUniforms: maxVertexUniforms,\r\n        maxVaryings: maxVaryings,\r\n        maxFragmentUniforms: maxFragmentUniforms,\r\n\r\n        vertexTextures: vertexTextures,\r\n        floatFragmentTextures: floatFragmentTextures,\r\n        floatVertexTextures: floatVertexTextures,\r\n\r\n        maxSamples: maxSamples\r\n\r\n    };\r\n\r\n}\r\n\r\n\r\nexport { WebGLCapabilities };\r\n","export const SceneRevealMode = {\r\n    Default: 0,\r\n    Gradual: 1,\r\n    Instant: 2\r\n};\r\n","export const LogLevel = {\r\n    None: 0,\r\n    Error: 1,\r\n    Warning: 2,\r\n    Info: 3,\r\n    Debug: 4\r\n};\r\n","import * as THREE from 'three';\r\nimport { SplatMaterial3D } from './SplatMaterial3D.js';\r\nimport { SplatMaterial2D } from './SplatMaterial2D.js';\r\nimport { SplatGeometry } from './SplatGeometry.js';\r\nimport { SplatScene } from './SplatScene.js';\r\nimport { SplatTree } from '../splattree/SplatTree.js';\r\nimport { WebGLExtensions } from '../three-shim/WebGLExtensions.js';\r\nimport { WebGLCapabilities } from '../three-shim/WebGLCapabilities.js';\r\nimport { uintEncodedFloat, rgbaArrayToInteger } from '../Util.js';\r\nimport { Constants } from '../Constants.js';\r\nimport { SceneRevealMode } from '../SceneRevealMode.js';\r\nimport { SplatRenderMode } from '../SplatRenderMode.js';\r\nimport { LogLevel } from '../LogLevel.js';\r\nimport { clamp, getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\r\n\r\nconst dummyGeometry = new THREE.BufferGeometry();\r\nconst dummyMaterial = new THREE.MeshBasicMaterial();\r\n\r\nconst COVARIANCES_ELEMENTS_PER_SPLAT = 6;\r\nconst CENTER_COLORS_ELEMENTS_PER_SPLAT = 4;\r\n\r\nconst COVARIANCES_ELEMENTS_PER_TEXEL_STORED = 4;\r\nconst COVARIANCES_ELEMENTS_PER_TEXEL_ALLOCATED = 4;\r\nconst COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_STORED = 6;\r\nconst COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_ALLOCATED = 8;\r\nconst SCALES_ROTATIONS_ELEMENTS_PER_TEXEL = 4;\r\nconst CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\r\nconst SCENE_INDEXES_ELEMENTS_PER_TEXEL = 1;\r\n\r\nconst SCENE_FADEIN_RATE_FAST = 0.012;\r\nconst SCENE_FADEIN_RATE_GRADUAL = 0.003;\r\n\r\nconst VISIBLE_REGION_EXPANSION_DELTA = 1;\r\n\r\n// Based on my own observations across multiple devices, OSes and browsers, using textures that have one dimension\r\n// greater than 4096 while the other is greater than or equal to 4096 causes issues (Essentially any texture larger\r\n// than 4096 x 4096 (16777216) texels). Specifically it seems all texture data beyond the 4096 x 4096 texel boundary\r\n// is corrupted, while data below that boundary is usable. In these cases the texture has been valid in the eyes of\r\n// both Three.js and WebGL, and the texel format (RG, RGBA, etc.) has not mattered. More investigation will be needed,\r\n// but for now the work-around is to split the spherical harmonics into three textures (one for each color channel).\r\nconst MAX_TEXTURE_TEXELS = 16777216;\r\n\r\n/**\r\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\r\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\r\n */\r\nexport class SplatMesh extends THREE.Mesh {\r\n\r\n    constructor(splatRenderMode = SplatRenderMode.ThreeD, dynamicMode = false, enableOptionalEffects = false,\r\n                halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1, enableDistancesComputationOnGPU = true,\r\n                integerBasedDistancesComputation = false, antialiased = false, maxScreenSpaceSplatSize = 1024, logLevel = LogLevel.None,\r\n                sphericalHarmonicsDegree = 0, sceneFadeInRateMultiplier = 1.0, kernel2DSize = 0.3) {\r\n        super(dummyGeometry, dummyMaterial);\r\n\r\n        // Reference to a Three.js renderer\r\n        this.renderer = undefined;\r\n\r\n        // Determine how the splats are rendered\r\n        this.splatRenderMode = splatRenderMode;\r\n\r\n        // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\r\n        // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\r\n        // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\r\n        // can be overriden via parameters to the individual functions that are used to retrieve splat data.\r\n        this.dynamicMode = dynamicMode;\r\n\r\n        // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\r\n        // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\r\n        // that are enabled by the 'dynamicScene' parameter.\r\n        this.enableOptionalEffects = enableOptionalEffects;\r\n\r\n        // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\r\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\r\n\r\n        // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\r\n        this.devicePixelRatio = devicePixelRatio;\r\n\r\n        // Use a transform feedback to calculate splat distances from the camera\r\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\r\n\r\n        // Use a faster integer-based approach for calculating splat distances from the camera\r\n        this.integerBasedDistancesComputation = integerBasedDistancesComputation;\r\n\r\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\r\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\r\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\r\n        // https://github.com/nerfstudio-project/gsplat/pull/117\r\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\r\n        this.antialiased = antialiased;\r\n\r\n        // The size of the 2D kernel used for splat rendering\r\n        // This will adjust the 2D kernel size after the projection\r\n        this.kernel2DSize = kernel2DSize;\r\n\r\n        // Specify the maximum clip space splat size, can help deal with large splats that get too unwieldy\r\n        this.maxScreenSpaceSplatSize = maxScreenSpaceSplatSize;\r\n\r\n        // The verbosity of console logging\r\n        this.logLevel = logLevel;\r\n\r\n        // Degree 0 means no spherical harmonics\r\n        this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\r\n        this.minSphericalHarmonicsDegree = 0;\r\n\r\n        this.sceneFadeInRateMultiplier = sceneFadeInRateMultiplier;\r\n\r\n        // The individual splat scenes stored in this splat mesh, each containing their own transform\r\n        this.scenes = [];\r\n\r\n        // Special octree tailored to SplatMesh instances\r\n        this.splatTree = null;\r\n        this.baseSplatTree = null;\r\n\r\n        // Cache textures and the intermediate data used to populate them\r\n        this.splatDataTextures = {};\r\n\r\n        this.distancesTransformFeedback = {\r\n            'id': null,\r\n            'vertexShader': null,\r\n            'fragmentShader': null,\r\n            'program': null,\r\n            'centersBuffer': null,\r\n            'sceneIndexesBuffer': null,\r\n            'outDistancesBuffer': null,\r\n            'centersLoc': -1,\r\n            'modelViewProjLoc': -1,\r\n            'sceneIndexesLoc': -1,\r\n            'transformsLocs': []\r\n        };\r\n\r\n        this.globalSplatIndexToLocalSplatIndexMap = [];\r\n        this.globalSplatIndexToSceneIndexMap = [];\r\n\r\n        this.lastBuildSplatCount = 0;\r\n        this.lastBuildScenes = [];\r\n        this.lastBuildMaxSplatCount = 0;\r\n        this.lastBuildSceneCount = 0;\r\n        this.firstRenderTime = -1;\r\n        this.finalBuild = false;\r\n\r\n        this.webGLUtils = null;\r\n\r\n        this.boundingBox = new THREE.Box3();\r\n        this.calculatedSceneCenter = new THREE.Vector3();\r\n        this.maxSplatDistanceFromSceneCenter = 0;\r\n        this.visibleRegionBufferRadius = 0;\r\n        this.visibleRegionRadius = 0;\r\n        this.visibleRegionFadeStartRadius = 0;\r\n        this.visibleRegionChanging = false;\r\n\r\n        this.splatScale = 1.0;\r\n        this.pointCloudModeEnabled = false;\r\n\r\n        this.disposed = false;\r\n        this.lastRenderer = null;\r\n        this.visible = false;\r\n    }\r\n\r\n    /**\r\n     * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\r\n     * transform data (position, scale, rotation) passed to the splat mesh during the build process.\r\n     * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\r\n     * @param {Array<object>} sceneOptions Array of options objects: {\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @return {Array<THREE.Matrix4>}\r\n     */\r\n    static buildScenes(parentObject, splatBuffers, sceneOptions) {\r\n        const scenes = [];\r\n        scenes.length = splatBuffers.length;\r\n        for (let i = 0; i < splatBuffers.length; i++) {\r\n            const splatBuffer = splatBuffers[i];\r\n            const options = sceneOptions[i] || {};\r\n            let positionArray = options['position'] || [0, 0, 0];\r\n            let rotationArray = options['rotation'] || [0, 0, 0, 1];\r\n            let scaleArray = options['scale'] || [1, 1, 1];\r\n            const position = new THREE.Vector3().fromArray(positionArray);\r\n            const rotation = new THREE.Quaternion().fromArray(rotationArray);\r\n            const scale = new THREE.Vector3().fromArray(scaleArray);\r\n            const scene = SplatMesh.createScene(splatBuffer, position, rotation, scale,\r\n                                                options.splatAlphaRemovalThreshold || 1, options.opacity, options.visible);\r\n            parentObject.add(scene);\r\n            scenes[i] = scene;\r\n        }\r\n        return scenes;\r\n    }\r\n\r\n    static createScene(splatBuffer, position, rotation, scale, minimumAlpha, opacity = 1.0, visible = true) {\r\n        return new SplatScene(splatBuffer, position, rotation, scale, minimumAlpha, opacity, visible);\r\n    }\r\n\r\n    /**\r\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\r\n     * local data within a single scene.\r\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\r\n     * @return {object}\r\n     */\r\n    static buildSplatIndexMaps(splatBuffers) {\r\n        const localSplatIndexMap = [];\r\n        const sceneIndexMap = [];\r\n        let totalSplatCount = 0;\r\n        for (let s = 0; s < splatBuffers.length; s++) {\r\n            const splatBuffer = splatBuffers[s];\r\n            const maxSplatCount = splatBuffer.getMaxSplatCount();\r\n            for (let i = 0; i < maxSplatCount; i++) {\r\n                localSplatIndexMap[totalSplatCount] = i;\r\n                sceneIndexMap[totalSplatCount] = s;\r\n                totalSplatCount++;\r\n            }\r\n        }\r\n        return {\r\n            localSplatIndexMap,\r\n            sceneIndexMap\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\r\n     * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\r\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\r\n     *                                            builder worker starts and finishes.\r\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\r\n     *                                           the format produced by the splat tree builder worker starts and ends.\r\n     * @return {SplatTree}\r\n     */\r\n     buildSplatTree = function(minAlphas = [], onSplatTreeIndexesUpload, onSplatTreeConstruction) {\r\n        return new Promise((resolve) => {\r\n            this.disposeSplatTree();\r\n            // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\r\n            // be configured on a per-scene basis\r\n            this.baseSplatTree = new SplatTree(8, 1000);\r\n            const buildStartTime = performance.now();\r\n            const splatColor = new THREE.Vector4();\r\n            this.baseSplatTree.processSplatMesh(this, (splatIndex) => {\r\n                this.getSplatColor(splatIndex, splatColor);\r\n                const sceneIndex = this.getSceneIndexForSplat(splatIndex);\r\n                const minAlpha = minAlphas[sceneIndex] || 1;\r\n                return splatColor.w >= minAlpha;\r\n            }, onSplatTreeIndexesUpload, onSplatTreeConstruction)\r\n            .then(() => {\r\n                const buildTime = performance.now() - buildStartTime;\r\n                if (this.logLevel >= LogLevel.Info) console.log('SplatTree build: ' + buildTime + ' ms');\r\n                if (this.disposed) {\r\n                    resolve();\r\n                } else {\r\n\r\n                    this.splatTree = this.baseSplatTree;\r\n                    this.baseSplatTree = null;\r\n\r\n                    let leavesWithVertices = 0;\r\n                    let avgSplatCount = 0;\r\n                    let maxSplatCount = 0;\r\n                    let nodeCount = 0;\r\n\r\n                    this.splatTree.visitLeaves((node) => {\r\n                        const nodeSplatCount = node.data.indexes.length;\r\n                        if (nodeSplatCount > 0) {\r\n                            avgSplatCount += nodeSplatCount;\r\n                            maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\r\n                            nodeCount++;\r\n                            leavesWithVertices++;\r\n                        }\r\n                    });\r\n                    if (this.logLevel >= LogLevel.Info) {\r\n                        console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\r\n                        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\r\n                        avgSplatCount = avgSplatCount / nodeCount;\r\n                        console.log(`Avg splat count per node: ${avgSplatCount}`);\r\n                        console.log(`Total splat count: ${this.getSplatCount()}`);\r\n                    }\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Construct this instance of SplatMesh.\r\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\r\n     * @param {Array<object>} sceneOptions Dynamic options for each scene {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     * }\r\n     * @param {boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\r\n     *                                      says to keep the transform from the existing scene.\r\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\r\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\r\n     *                                            builder worker starts and finishes.\r\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\r\n     *                                           the format produced by the splat tree builder worker starts and ends.\r\n     * @return {object} Object containing info about the splats that are updated\r\n     */\r\n    build(splatBuffers, sceneOptions, keepSceneTransforms = true, finalBuild = false,\r\n          onSplatTreeIndexesUpload, onSplatTreeConstruction, preserveVisibleRegion = true) {\r\n\r\n        this.sceneOptions = sceneOptions;\r\n        this.finalBuild = finalBuild;\r\n\r\n        const maxSplatCount = SplatMesh.getTotalMaxSplatCountForSplatBuffers(splatBuffers);\r\n\r\n        const newScenes = SplatMesh.buildScenes(this, splatBuffers, sceneOptions);\r\n        if (keepSceneTransforms) {\r\n            for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\r\n                const newScene = newScenes[i];\r\n                const existingScene = this.getScene(i);\r\n                newScene.copyTransformData(existingScene);\r\n            }\r\n        }\r\n        this.scenes = newScenes;\r\n\r\n        let minSphericalHarmonicsDegree = 3;\r\n        for (let splatBuffer of splatBuffers) {\r\n            const splatBufferSphericalHarmonicsDegree = splatBuffer.getMinSphericalHarmonicsDegree();\r\n            if (splatBufferSphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\r\n                minSphericalHarmonicsDegree = splatBufferSphericalHarmonicsDegree;\r\n            }\r\n        }\r\n        this.minSphericalHarmonicsDegree = Math.min(minSphericalHarmonicsDegree, this.sphericalHarmonicsDegree);\r\n\r\n        let splatBuffersChanged = false;\r\n        if (splatBuffers.length !== this.lastBuildScenes.length) {\r\n            splatBuffersChanged = true;\r\n        } else {\r\n            for (let i = 0; i < splatBuffers.length; i++) {\r\n                const splatBuffer = splatBuffers[i];\r\n                if (splatBuffer !== this.lastBuildScenes[i].splatBuffer) {\r\n                    splatBuffersChanged = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let isUpdateBuild = true;\r\n        if (this.scenes.length !== 1 ||\r\n            this.lastBuildSceneCount !== this.scenes.length ||\r\n            this.lastBuildMaxSplatCount !== maxSplatCount ||\r\n            splatBuffersChanged) {\r\n                isUpdateBuild = false;\r\n       }\r\n\r\n       if (!isUpdateBuild) {\r\n            this.boundingBox = new THREE.Box3();\r\n            if (!preserveVisibleRegion) {\r\n                this.maxSplatDistanceFromSceneCenter = 0;\r\n                this.visibleRegionBufferRadius = 0;\r\n                this.visibleRegionRadius = 0;\r\n                this.visibleRegionFadeStartRadius = 0;\r\n                this.firstRenderTime = -1;\r\n            }\r\n            this.lastBuildScenes = [];\r\n            this.lastBuildSplatCount = 0;\r\n            this.lastBuildMaxSplatCount = 0;\r\n            this.disposeMeshData();\r\n            this.geometry = SplatGeometry.build(maxSplatCount);\r\n            if (this.splatRenderMode === SplatRenderMode.ThreeD) {\r\n                this.material = SplatMaterial3D.build(this.dynamicMode, this.enableOptionalEffects, this.antialiased,\r\n                                                      this.maxScreenSpaceSplatSize, this.splatScale, this.pointCloudModeEnabled,\r\n                                                      this.minSphericalHarmonicsDegree, this.kernel2DSize);\r\n            } else {\r\n                this.material = SplatMaterial2D.build(this.dynamicMode, this.enableOptionalEffects,\r\n                                                      this.splatScale, this.pointCloudModeEnabled, this.minSphericalHarmonicsDegree);\r\n            }\r\n\r\n            const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\r\n            this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\r\n            this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\r\n        }\r\n\r\n        const splatBufferSplatCount = this.getSplatCount(true);\r\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\r\n        const dataUpdateResults = this.refreshGPUDataFromSplatBuffers(isUpdateBuild);\r\n\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            this.lastBuildScenes[i] = this.scenes[i];\r\n        }\r\n        this.lastBuildSplatCount = splatBufferSplatCount;\r\n        this.lastBuildMaxSplatCount = this.getMaxSplatCount();\r\n        this.lastBuildSceneCount = this.scenes.length;\r\n\r\n        if (finalBuild && this.scenes.length > 0) {\r\n            this.buildSplatTree(sceneOptions.map(options => options.splatAlphaRemovalThreshold || 1),\r\n                                onSplatTreeIndexesUpload, onSplatTreeConstruction)\r\n            .then(() => {\r\n                if (this.onSplatTreeReadyCallback) this.onSplatTreeReadyCallback(this.splatTree);\r\n                this.onSplatTreeReadyCallback = null;\r\n            });\r\n        }\r\n\r\n        this.visible = (this.scenes.length > 0);\r\n\r\n        return dataUpdateResults;\r\n    }\r\n\r\n    freeIntermediateSplatData() {\r\n\r\n        const deleteTextureData = (texture) => {\r\n            delete texture.source.data;\r\n            delete texture.image;\r\n            texture.onUpdate = null;\r\n        };\r\n\r\n        delete this.splatDataTextures.baseData.covariances;\r\n        delete this.splatDataTextures.baseData.centers;\r\n        delete this.splatDataTextures.baseData.colors;\r\n        delete this.splatDataTextures.baseData.sphericalHarmonics;\r\n\r\n        delete this.splatDataTextures.centerColors.data;\r\n        delete this.splatDataTextures.covariances.data;\r\n        if (this.splatDataTextures.sphericalHarmonics) {\r\n            delete this.splatDataTextures.sphericalHarmonics.data;\r\n        }\r\n        if (this.splatDataTextures.sceneIndexes) {\r\n            delete this.splatDataTextures.sceneIndexes.data;\r\n        }\r\n\r\n        this.splatDataTextures.centerColors.texture.needsUpdate = true;\r\n        this.splatDataTextures.centerColors.texture.onUpdate = () => {\r\n            deleteTextureData(this.splatDataTextures.centerColors.texture);\r\n        };\r\n\r\n        this.splatDataTextures.covariances.texture.needsUpdate = true;\r\n        this.splatDataTextures.covariances.texture.onUpdate = () => {\r\n            deleteTextureData(this.splatDataTextures.covariances.texture);\r\n        };\r\n\r\n        if (this.splatDataTextures.sphericalHarmonics) {\r\n            if (this.splatDataTextures.sphericalHarmonics.texture) {\r\n                this.splatDataTextures.sphericalHarmonics.texture.needsUpdate = true;\r\n                this.splatDataTextures.sphericalHarmonics.texture.onUpdate = () => {\r\n                    deleteTextureData(this.splatDataTextures.sphericalHarmonics.texture);\r\n                };\r\n            } else {\r\n                this.splatDataTextures.sphericalHarmonics.textures.forEach((texture) => {\r\n                    texture.needsUpdate = true;\r\n                    texture.onUpdate = () => {\r\n                        deleteTextureData(texture);\r\n                    };\r\n                });\r\n            }\r\n        }\r\n        if (this.splatDataTextures.sceneIndexes) {\r\n            this.splatDataTextures.sceneIndexes.texture.needsUpdate = true;\r\n            this.splatDataTextures.sceneIndexes.texture.onUpdate = () => {\r\n                deleteTextureData(this.splatDataTextures.sceneIndexes.texture);\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Dispose all resources held by the splat mesh\r\n     */\r\n    dispose() {\r\n        this.disposeMeshData();\r\n        this.disposeTextures();\r\n        this.disposeSplatTree();\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            if (this.computeDistancesOnGPUSyncTimeout) {\r\n                clearTimeout(this.computeDistancesOnGPUSyncTimeout);\r\n                this.computeDistancesOnGPUSyncTimeout = null;\r\n            }\r\n            this.disposeDistancesComputationGPUResources();\r\n        }\r\n        this.scenes = [];\r\n        this.distancesTransformFeedback = {\r\n            'id': null,\r\n            'vertexShader': null,\r\n            'fragmentShader': null,\r\n            'program': null,\r\n            'centersBuffer': null,\r\n            'sceneIndexesBuffer': null,\r\n            'outDistancesBuffer': null,\r\n            'centersLoc': -1,\r\n            'modelViewProjLoc': -1,\r\n            'sceneIndexesLoc': -1,\r\n            'transformsLocs': []\r\n        };\r\n        this.renderer = null;\r\n\r\n        this.globalSplatIndexToLocalSplatIndexMap = [];\r\n        this.globalSplatIndexToSceneIndexMap = [];\r\n\r\n        this.lastBuildSplatCount = 0;\r\n        this.lastBuildScenes = [];\r\n        this.lastBuildMaxSplatCount = 0;\r\n        this.lastBuildSceneCount = 0;\r\n        this.firstRenderTime = -1;\r\n        this.finalBuild = false;\r\n\r\n        this.webGLUtils = null;\r\n\r\n        this.boundingBox = new THREE.Box3();\r\n        this.calculatedSceneCenter = new THREE.Vector3();\r\n        this.maxSplatDistanceFromSceneCenter = 0;\r\n        this.visibleRegionBufferRadius = 0;\r\n        this.visibleRegionRadius = 0;\r\n        this.visibleRegionFadeStartRadius = 0;\r\n        this.visibleRegionChanging = false;\r\n\r\n        this.splatScale = 1.0;\r\n        this.pointCloudModeEnabled = false;\r\n\r\n        this.disposed = true;\r\n        this.lastRenderer = null;\r\n        this.visible = false;\r\n    }\r\n\r\n    /**\r\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\r\n     */\r\n    disposeMeshData() {\r\n        if (this.geometry && this.geometry !== dummyGeometry) {\r\n            this.geometry.dispose();\r\n            this.geometry = null;\r\n        }\r\n        if (this.material) {\r\n            this.material.dispose();\r\n            this.material = null;\r\n        }\r\n    }\r\n\r\n    disposeTextures() {\r\n        for (let textureKey in this.splatDataTextures) {\r\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\r\n                const textureContainer = this.splatDataTextures[textureKey];\r\n                if (textureContainer.texture) {\r\n                    textureContainer.texture.dispose();\r\n                    textureContainer.texture = null;\r\n                }\r\n            }\r\n        }\r\n        this.splatDataTextures = null;\r\n    }\r\n\r\n    disposeSplatTree() {\r\n        if (this.splatTree) {\r\n            this.splatTree.dispose();\r\n            this.splatTree = null;\r\n        }\r\n        if (this.baseSplatTree) {\r\n            this.baseSplatTree.dispose();\r\n            this.baseSplatTree = null;\r\n        }\r\n    }\r\n\r\n    getSplatTree() {\r\n        return this.splatTree;\r\n    }\r\n\r\n    onSplatTreeReady(callback) {\r\n        this.onSplatTreeReadyCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * Get copies of data that are necessary for splat distance computation: splat center positions and splat\r\n     * scene indexes (necessary for applying dynamic scene transformations during distance computation)\r\n     * @param {*} start The index at which to start copying data\r\n     * @param {*} end  The index at which to stop copying data\r\n     * @return {object}\r\n     */\r\n    getDataForDistancesComputation(start, end) {\r\n        const centers = this.integerBasedDistancesComputation ?\r\n                        this.getIntegerCenters(start, end, true) :\r\n                        this.getFloatCenters(start, end, true);\r\n        const sceneIndexes = this.getSceneIndexes(start, end);\r\n        return {\r\n            centers,\r\n            sceneIndexes\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Refresh data textures and GPU buffers with splat data from the splat buffers belonging to this mesh.\r\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\r\n     * @return {object}\r\n     */\r\n    refreshGPUDataFromSplatBuffers(sinceLastBuildOnly) {\r\n        const splatCount = this.getSplatCount(true);\r\n        this.refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly);\r\n        const updateStart = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\r\n        const { centers, sceneIndexes } = this.getDataForDistancesComputation(updateStart, splatCount - 1);\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly);\r\n        }\r\n        return {\r\n            'from': updateStart,\r\n            'to': splatCount - 1,\r\n            'count': splatCount - updateStart,\r\n            'centers': centers,\r\n            'sceneIndexes': sceneIndexes\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the GPU buffers that are used for computing splat distances on the GPU.\r\n     * @param {Array<number>} centers Splat center positions\r\n     * @param {Array<number>} sceneIndexes Indexes of the scene to which each splat belongs\r\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\r\n     */\r\n    refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly = false) {\r\n        const offset = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\r\n        this.updateGPUCentersBufferForDistancesComputation(sinceLastBuildOnly, centers, offset);\r\n        this.updateGPUTransformIndexesBufferForDistancesComputation(sinceLastBuildOnly, sceneIndexes, offset);\r\n    }\r\n\r\n    /**\r\n     * Refresh data textures with data from the splat buffers for this mesh.\r\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\r\n     */\r\n    refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly) {\r\n        const splatCount = this.getSplatCount(true);\r\n        const fromSplat = this.lastBuildSplatCount;\r\n        const toSplat = splatCount - 1;\r\n\r\n        if (!sinceLastBuildOnly) {\r\n            this.setupDataTextures();\r\n            this.updateBaseDataFromSplatBuffers();\r\n        } else {\r\n            this.updateBaseDataFromSplatBuffers(fromSplat, toSplat);\r\n        }\r\n\r\n        this.updateDataTexturesFromBaseData(fromSplat, toSplat);\r\n        this.updateVisibleRegion(sinceLastBuildOnly);\r\n    }\r\n\r\n    setupDataTextures() {\r\n        const maxSplatCount = this.getMaxSplatCount();\r\n        const splatCount = this.getSplatCount(true);\r\n\r\n        this.disposeTextures();\r\n\r\n        const computeDataTextureSize = (elementsPerTexel, elementsPerSplat) => {\r\n            const texSize = new THREE.Vector2(4096, 1024);\r\n            while (texSize.x * texSize.y * elementsPerTexel < maxSplatCount * elementsPerSplat) texSize.y *= 2;\r\n            return texSize;\r\n        };\r\n\r\n        const getCovariancesElementsPertexelStored = (compressionLevel) => {\r\n            return compressionLevel >= 1 ? COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_STORED : COVARIANCES_ELEMENTS_PER_TEXEL_STORED;\r\n        };\r\n\r\n        const getCovariancesInitialTextureSpecs = (compressionLevel) => {\r\n            const elementsPerTexelStored = getCovariancesElementsPertexelStored(compressionLevel);\r\n            const texSize = computeDataTextureSize(elementsPerTexelStored, 6);\r\n            return {elementsPerTexelStored, texSize};\r\n        };\r\n\r\n        let covarianceCompressionLevel = this.getTargetCovarianceCompressionLevel();\r\n        const scaleRotationCompressionLevel = 0;\r\n        const shCompressionLevel = this.getTargetSphericalHarmonicsCompressionLevel();\r\n\r\n        let covariances;\r\n        let scales;\r\n        let rotations;\r\n        if (this.splatRenderMode === SplatRenderMode.ThreeD) {\r\n            const initialCovTexSpecs = getCovariancesInitialTextureSpecs(covarianceCompressionLevel);\r\n            if (initialCovTexSpecs.texSize.x * initialCovTexSpecs.texSize.y > MAX_TEXTURE_TEXELS && covarianceCompressionLevel === 0) {\r\n                covarianceCompressionLevel = 1;\r\n            }\r\n            covariances = new Float32Array(maxSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT);\r\n        } else {\r\n            scales = new Float32Array(maxSplatCount * 3);\r\n            rotations = new Float32Array(maxSplatCount * 4);\r\n        }\r\n\r\n        const centers = new Float32Array(maxSplatCount * 3);\r\n        const colors = new Uint8Array(maxSplatCount * 4);\r\n\r\n        let SphericalHarmonicsArrayType = Float32Array;\r\n        if (shCompressionLevel === 1) SphericalHarmonicsArrayType = Uint16Array;\r\n        else if (shCompressionLevel === 2) SphericalHarmonicsArrayType = Uint8Array;\r\n        const shComponentCount = getSphericalHarmonicsComponentCountForDegree(this.minSphericalHarmonicsDegree);\r\n        const shData = this.minSphericalHarmonicsDegree ? new SphericalHarmonicsArrayType(maxSplatCount * shComponentCount) : undefined;\r\n\r\n        // set up centers/colors data texture\r\n        const centersColsTexSize = computeDataTextureSize(CENTER_COLORS_ELEMENTS_PER_TEXEL, 4);\r\n        const paddedCentersCols = new Uint32Array(centersColsTexSize.x * centersColsTexSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\r\n        SplatMesh.updateCenterColorsPaddedData(0, splatCount - 1, centers, colors, paddedCentersCols);\r\n\r\n        const centersColsTex = new THREE.DataTexture(paddedCentersCols, centersColsTexSize.x, centersColsTexSize.y,\r\n                                                     THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\r\n        centersColsTex.internalFormat = 'RGBA32UI';\r\n        centersColsTex.needsUpdate = true;\r\n        this.material.uniforms.centersColorsTexture.value = centersColsTex;\r\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColsTexSize);\r\n        this.material.uniformsNeedUpdate = true;\r\n\r\n        this.splatDataTextures = {\r\n            'baseData': {\r\n                'covariances': covariances,\r\n                'scales': scales,\r\n                'rotations': rotations,\r\n                'centers': centers,\r\n                'colors': colors,\r\n                'sphericalHarmonics': shData\r\n            },\r\n            'centerColors': {\r\n                'data': paddedCentersCols,\r\n                'texture': centersColsTex,\r\n                'size': centersColsTexSize\r\n            }\r\n        };\r\n\r\n        if (this.splatRenderMode === SplatRenderMode.ThreeD) {\r\n            // set up covariances data texture\r\n\r\n            const covTexSpecs = getCovariancesInitialTextureSpecs(covarianceCompressionLevel);\r\n            const covariancesElementsPerTexelStored = covTexSpecs.elementsPerTexelStored;\r\n            const covTexSize = covTexSpecs.texSize;\r\n\r\n            let CovariancesDataType = covarianceCompressionLevel >= 1 ? Uint32Array : Float32Array;\r\n            const covariancesElementsPerTexelAllocated = covarianceCompressionLevel >= 1 ?\r\n                                                         COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_ALLOCATED :\r\n                                                         COVARIANCES_ELEMENTS_PER_TEXEL_ALLOCATED;\r\n            const covariancesTextureData = new CovariancesDataType(covTexSize.x * covTexSize.y * covariancesElementsPerTexelAllocated);\r\n\r\n            if (covarianceCompressionLevel === 0) {\r\n                covariancesTextureData.set(covariances);\r\n            } else {\r\n                SplatMesh.updatePaddedCompressedCovariancesTextureData(covariances, covariancesTextureData, 0, 0, covariances.length);\r\n            }\r\n\r\n            let covTex;\r\n            if (covarianceCompressionLevel >= 1) {\r\n                covTex = new THREE.DataTexture(covariancesTextureData, covTexSize.x, covTexSize.y,\r\n                                               THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\r\n                covTex.internalFormat = 'RGBA32UI';\r\n                this.material.uniforms.covariancesTextureHalfFloat.value = covTex;\r\n            } else {\r\n                covTex = new THREE.DataTexture(covariancesTextureData, covTexSize.x, covTexSize.y, THREE.RGBAFormat, THREE.FloatType);\r\n                this.material.uniforms.covariancesTexture.value = covTex;\r\n\r\n                // For some reason a usampler2D needs to have a valid texture attached or WebGL complains\r\n                const dummyTex = new THREE.DataTexture(new Uint32Array(32), 2, 2, THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\r\n                dummyTex.internalFormat = 'RGBA32UI';\r\n                this.material.uniforms.covariancesTextureHalfFloat.value = dummyTex;\r\n                dummyTex.needsUpdate = true;\r\n            }\r\n            covTex.needsUpdate = true;\r\n\r\n            this.material.uniforms.covariancesAreHalfFloat.value = (covarianceCompressionLevel >= 1) ? 1 : 0;\r\n            this.material.uniforms.covariancesTextureSize.value.copy(covTexSize);\r\n\r\n            this.splatDataTextures['covariances'] = {\r\n                'data': covariancesTextureData,\r\n                'texture': covTex,\r\n                'size': covTexSize,\r\n                'compressionLevel': covarianceCompressionLevel,\r\n                'elementsPerTexelStored': covariancesElementsPerTexelStored,\r\n                'elementsPerTexelAllocated': covariancesElementsPerTexelAllocated\r\n            };\r\n        } else {\r\n            // set up scale & rotations data texture\r\n            const elementsPerSplat = 6;\r\n            const scaleRotationsTexSize = computeDataTextureSize(SCALES_ROTATIONS_ELEMENTS_PER_TEXEL, elementsPerSplat);\r\n            let ScaleRotationsDataType = scaleRotationCompressionLevel >= 1 ? Uint16Array : Float32Array;\r\n            let scaleRotationsTextureType = scaleRotationCompressionLevel >= 1 ? THREE.HalfFloatType : THREE.FloatType;\r\n            const paddedScaleRotations = new ScaleRotationsDataType(scaleRotationsTexSize.x * scaleRotationsTexSize.y *\r\n                                                                    SCALES_ROTATIONS_ELEMENTS_PER_TEXEL);\r\n\r\n            SplatMesh.updateScaleRotationsPaddedData(0, splatCount - 1, scales, rotations, paddedScaleRotations);\r\n\r\n            const scaleRotationsTex = new THREE.DataTexture(paddedScaleRotations, scaleRotationsTexSize.x, scaleRotationsTexSize.y,\r\n                                                            THREE.RGBAFormat, scaleRotationsTextureType);\r\n            scaleRotationsTex.needsUpdate = true;\r\n            this.material.uniforms.scaleRotationsTexture.value = scaleRotationsTex;\r\n            this.material.uniforms.scaleRotationsTextureSize.value.copy(scaleRotationsTexSize);\r\n\r\n            this.splatDataTextures['scaleRotations'] = {\r\n                'data': paddedScaleRotations,\r\n                'texture': scaleRotationsTex,\r\n                'size': scaleRotationsTexSize,\r\n                'compressionLevel': scaleRotationCompressionLevel\r\n            };\r\n        }\r\n\r\n        if (shData) {\r\n            const shTextureType = shCompressionLevel === 2 ? THREE.UnsignedByteType : THREE.HalfFloatType;\r\n\r\n            let paddedSHComponentCount = shComponentCount;\r\n            if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\r\n            const shElementsPerTexel = this.minSphericalHarmonicsDegree === 2 ? 4 : 2;\r\n            const texelFormat = shElementsPerTexel === 4 ? THREE.RGBAFormat : THREE.RGFormat;\r\n            let shTexSize = computeDataTextureSize(shElementsPerTexel, paddedSHComponentCount);\r\n\r\n            // Use one texture for all spherical harmonics data\r\n            if (shTexSize.x * shTexSize.y <= MAX_TEXTURE_TEXELS) {\r\n                const paddedSHArraySize = shTexSize.x * shTexSize.y * shElementsPerTexel;\r\n                const paddedSHArray = new SphericalHarmonicsArrayType(paddedSHArraySize);\r\n                for (let c = 0; c < splatCount; c++) {\r\n                    const srcBase = shComponentCount * c;\r\n                    const destBase = paddedSHComponentCount * c;\r\n                    for (let i = 0; i < shComponentCount; i++) {\r\n                        paddedSHArray[destBase + i] = shData[srcBase + i];\r\n                    }\r\n                }\r\n\r\n                const shTexture = new THREE.DataTexture(paddedSHArray, shTexSize.x, shTexSize.y, texelFormat, shTextureType);\r\n                shTexture.needsUpdate = true;\r\n                this.material.uniforms.sphericalHarmonicsTexture.value = shTexture;\r\n                this.splatDataTextures['sphericalHarmonics'] = {\r\n                    'componentCount': shComponentCount,\r\n                    'paddedComponentCount': paddedSHComponentCount,\r\n                    'data': paddedSHArray,\r\n                    'textureCount': 1,\r\n                    'texture': shTexture,\r\n                    'size': shTexSize,\r\n                    'compressionLevel': shCompressionLevel,\r\n                    'elementsPerTexel': shElementsPerTexel\r\n                };\r\n            // Use three textures for spherical harmonics data, one per color channel\r\n            } else {\r\n                const shComponentCountPerChannel = shComponentCount / 3;\r\n                paddedSHComponentCount = shComponentCountPerChannel;\r\n                if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\r\n                shTexSize = computeDataTextureSize(shElementsPerTexel, paddedSHComponentCount);\r\n\r\n                const paddedSHArraySize = shTexSize.x * shTexSize.y * shElementsPerTexel;\r\n                const textureUniforms = [this.material.uniforms.sphericalHarmonicsTextureR,\r\n                                         this.material.uniforms.sphericalHarmonicsTextureG,\r\n                                         this.material.uniforms.sphericalHarmonicsTextureB];\r\n                const paddedSHArrays = [];\r\n                const shTextures = [];\r\n                for (let t = 0; t < 3; t++) {\r\n                    const paddedSHArray = new SphericalHarmonicsArrayType(paddedSHArraySize);\r\n                    paddedSHArrays.push(paddedSHArray);\r\n                    for (let c = 0; c < splatCount; c++) {\r\n                        const srcBase = shComponentCount * c;\r\n                        const destBase = paddedSHComponentCount * c;\r\n                        if (shComponentCountPerChannel >= 3) {\r\n                            for (let i = 0; i < 3; i++) paddedSHArray[destBase + i] = shData[srcBase + t * 3 + i];\r\n                            if (shComponentCountPerChannel >= 8) {\r\n                                for (let i = 0; i < 5; i++) paddedSHArray[destBase + 3 + i] = shData[srcBase + 9 + t * 5 + i];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    const shTexture = new THREE.DataTexture(paddedSHArray, shTexSize.x, shTexSize.y, texelFormat, shTextureType);\r\n                    shTextures.push(shTexture);\r\n                    shTexture.needsUpdate = true;\r\n                    textureUniforms[t].value = shTexture;\r\n                }\r\n\r\n                this.material.uniforms.sphericalHarmonicsMultiTextureMode.value = 1;\r\n                this.splatDataTextures['sphericalHarmonics'] = {\r\n                    'componentCount': shComponentCount,\r\n                    'componentCountPerChannel': shComponentCountPerChannel,\r\n                    'paddedComponentCount': paddedSHComponentCount,\r\n                    'data': paddedSHArrays,\r\n                    'textureCount': 3,\r\n                    'textures': shTextures,\r\n                    'size': shTexSize,\r\n                    'compressionLevel': shCompressionLevel,\r\n                    'elementsPerTexel': shElementsPerTexel\r\n                };\r\n            }\r\n\r\n            this.material.uniforms.sphericalHarmonicsTextureSize.value.copy(shTexSize);\r\n            this.material.uniforms.sphericalHarmonics8BitMode.value = shCompressionLevel === 2 ? 1 : 0;\r\n            for (let s = 0; s < this.scenes.length; s++) {\r\n                const splatBuffer = this.scenes[s].splatBuffer;\r\n                this.material.uniforms.sphericalHarmonics8BitCompressionRangeMin.value[s] =\r\n                    splatBuffer.minSphericalHarmonicsCoeff;\r\n                this.material.uniforms.sphericalHarmonics8BitCompressionRangeMax.value[s] =\r\n                    splatBuffer.maxSphericalHarmonicsCoeff;\r\n            }\r\n            this.material.uniformsNeedUpdate = true;\r\n        }\r\n\r\n        const sceneIndexesTexSize = computeDataTextureSize(SCENE_INDEXES_ELEMENTS_PER_TEXEL, 4);\r\n        const paddedTransformIndexes = new Uint32Array(sceneIndexesTexSize.x *\r\n                                                       sceneIndexesTexSize.y * SCENE_INDEXES_ELEMENTS_PER_TEXEL);\r\n        for (let c = 0; c < splatCount; c++) paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\r\n        const sceneIndexesTexture = new THREE.DataTexture(paddedTransformIndexes, sceneIndexesTexSize.x, sceneIndexesTexSize.y,\r\n                                                          THREE.RedIntegerFormat, THREE.UnsignedIntType);\r\n        sceneIndexesTexture.internalFormat = 'R32UI';\r\n        sceneIndexesTexture.needsUpdate = true;\r\n        this.material.uniforms.sceneIndexesTexture.value = sceneIndexesTexture;\r\n        this.material.uniforms.sceneIndexesTextureSize.value.copy(sceneIndexesTexSize);\r\n        this.material.uniformsNeedUpdate = true;\r\n        this.splatDataTextures['sceneIndexes'] = {\r\n            'data': paddedTransformIndexes,\r\n            'texture': sceneIndexesTexture,\r\n            'size': sceneIndexesTexSize\r\n        };\r\n        this.material.uniforms.sceneCount.value = this.scenes.length;\r\n    }\r\n\r\n    updateBaseDataFromSplatBuffers(fromSplat, toSplat) {\r\n        const covarancesTextureDesc = this.splatDataTextures['covariances'];\r\n        const covarianceCompressionLevel = covarancesTextureDesc ? covarancesTextureDesc.compressionLevel : undefined;\r\n        const scaleRotationsTextureDesc = this.splatDataTextures['scaleRotations'];\r\n        const scaleRotationCompressionLevel = scaleRotationsTextureDesc ? scaleRotationsTextureDesc.compressionLevel : undefined;\r\n        const shITextureDesc = this.splatDataTextures['sphericalHarmonics'];\r\n        const shCompressionLevel = shITextureDesc ? shITextureDesc.compressionLevel : 0;\r\n\r\n        this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances, this.splatDataTextures.baseData.scales,\r\n                                 this.splatDataTextures.baseData.rotations, this.splatDataTextures.baseData.centers,\r\n                                 this.splatDataTextures.baseData.colors, this.splatDataTextures.baseData.sphericalHarmonics, undefined,\r\n                                 covarianceCompressionLevel, scaleRotationCompressionLevel, shCompressionLevel,\r\n                                 fromSplat, toSplat, fromSplat);\r\n    }\r\n\r\n    updateDataTexturesFromBaseData(fromSplat, toSplat) {\r\n        const covarancesTextureDesc = this.splatDataTextures['covariances'];\r\n        const covarianceCompressionLevel = covarancesTextureDesc ? covarancesTextureDesc.compressionLevel : undefined;\r\n        const scaleRotationsTextureDesc = this.splatDataTextures['scaleRotations'];\r\n        const scaleRotationCompressionLevel = scaleRotationsTextureDesc ? scaleRotationsTextureDesc.compressionLevel : undefined;\r\n        const shTextureDesc = this.splatDataTextures['sphericalHarmonics'];\r\n        const shCompressionLevel = shTextureDesc ? shTextureDesc.compressionLevel : 0;\r\n\r\n        // Update center & color data texture\r\n        const centerColorsTextureDescriptor = this.splatDataTextures['centerColors'];\r\n        const paddedCenterColors = centerColorsTextureDescriptor.data;\r\n        const centerColorsTexture = centerColorsTextureDescriptor.texture;\r\n        SplatMesh.updateCenterColorsPaddedData(fromSplat, toSplat, this.splatDataTextures.baseData.centers,\r\n                                               this.splatDataTextures.baseData.colors, paddedCenterColors);\r\n        const centerColorsTextureProps = this.renderer ? this.renderer.properties.get(centerColorsTexture) : null;\r\n        if (!centerColorsTextureProps || !centerColorsTextureProps.__webglTexture) {\r\n            centerColorsTexture.needsUpdate = true;\r\n        } else {\r\n            this.updateDataTexture(paddedCenterColors, centerColorsTextureDescriptor.texture, centerColorsTextureDescriptor.size,\r\n                                   centerColorsTextureProps, CENTER_COLORS_ELEMENTS_PER_TEXEL, CENTER_COLORS_ELEMENTS_PER_SPLAT, 4,\r\n                                   fromSplat, toSplat);\r\n        }\r\n\r\n        // update covariance data texture\r\n        if (covarancesTextureDesc) {\r\n            const covariancesTexture = covarancesTextureDesc.texture;\r\n            const covarancesStartElement = fromSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\r\n            const covariancesEndElement = toSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\r\n\r\n            if (covarianceCompressionLevel === 0) {\r\n                for (let i = covarancesStartElement; i <= covariancesEndElement; i++) {\r\n                    const covariance = this.splatDataTextures.baseData.covariances[i];\r\n                    covarancesTextureDesc.data[i] = covariance;\r\n                }\r\n            } else {\r\n                SplatMesh.updatePaddedCompressedCovariancesTextureData(this.splatDataTextures.baseData.covariances,\r\n                                                                       covarancesTextureDesc.data,\r\n                                                                       fromSplat * covarancesTextureDesc.elementsPerTexelAllocated,\r\n                                                                       covarancesStartElement, covariancesEndElement);\r\n            }\r\n\r\n            const covariancesTextureProps = this.renderer ? this.renderer.properties.get(covariancesTexture) : null;\r\n            if (!covariancesTextureProps || !covariancesTextureProps.__webglTexture) {\r\n                covariancesTexture.needsUpdate = true;\r\n            } else {\r\n                if (covarianceCompressionLevel === 0) {\r\n                    this.updateDataTexture(covarancesTextureDesc.data, covarancesTextureDesc.texture, covarancesTextureDesc.size,\r\n                                           covariancesTextureProps, covarancesTextureDesc.elementsPerTexelStored,\r\n                                           COVARIANCES_ELEMENTS_PER_SPLAT, 4, fromSplat, toSplat);\r\n                } else {\r\n                    this.updateDataTexture(covarancesTextureDesc.data, covarancesTextureDesc.texture, covarancesTextureDesc.size,\r\n                                           covariancesTextureProps, covarancesTextureDesc.elementsPerTexelAllocated,\r\n                                           covarancesTextureDesc.elementsPerTexelAllocated, 2, fromSplat, toSplat);\r\n                }\r\n            }\r\n        }\r\n\r\n        // update scale and rotation data texture\r\n        if (scaleRotationsTextureDesc) {\r\n            const paddedScaleRotations = scaleRotationsTextureDesc.data;\r\n            const scaleRotationsTexture = scaleRotationsTextureDesc.texture;\r\n            const elementsPerSplat = 6;\r\n            const bytesPerElement = scaleRotationCompressionLevel === 0 ? 4 : 2;\r\n\r\n            SplatMesh.updateScaleRotationsPaddedData(fromSplat, toSplat, this.splatDataTextures.baseData.scales,\r\n                                                     this.splatDataTextures.baseData.rotations, paddedScaleRotations);\r\n            const scaleRotationsTextureProps = this.renderer ? this.renderer.properties.get(scaleRotationsTexture) : null;\r\n            if (!scaleRotationsTextureProps || !scaleRotationsTextureProps.__webglTexture) {\r\n                scaleRotationsTexture.needsUpdate = true;\r\n            } else {\r\n                this.updateDataTexture(paddedScaleRotations, scaleRotationsTextureDesc.texture, scaleRotationsTextureDesc.size,\r\n                                       scaleRotationsTextureProps, SCALES_ROTATIONS_ELEMENTS_PER_TEXEL, elementsPerSplat, bytesPerElement,\r\n                                       fromSplat, toSplat);\r\n            }\r\n        }\r\n\r\n        // update spherical harmonics data texture\r\n        const shData = this.splatDataTextures.baseData.sphericalHarmonics;\r\n        if (shData) {\r\n            let shBytesPerElement = 4;\r\n            if (shCompressionLevel === 1) shBytesPerElement = 2;\r\n            else if (shCompressionLevel === 2) shBytesPerElement = 1;\r\n\r\n            const updateTexture = (shTexture, shTextureSize, elementsPerTexel, paddedSHArray, paddedSHComponentCount) => {\r\n                const shTextureProps = this.renderer ? this.renderer.properties.get(shTexture) : null;\r\n                if (!shTextureProps || !shTextureProps.__webglTexture) {\r\n                    shTexture.needsUpdate = true;\r\n                } else {\r\n                    this.updateDataTexture(paddedSHArray, shTexture, shTextureSize, shTextureProps, elementsPerTexel,\r\n                                           paddedSHComponentCount, shBytesPerElement, fromSplat, toSplat);\r\n                }\r\n            };\r\n\r\n            const shComponentCount = shTextureDesc.componentCount;\r\n            const paddedSHComponentCount = shTextureDesc.paddedComponentCount;\r\n\r\n            // Update for the case of a single texture for all spherical harmonics data\r\n            if (shTextureDesc.textureCount === 1) {\r\n                const paddedSHArray = shTextureDesc.data;\r\n                for (let c = fromSplat; c <= toSplat; c++) {\r\n                    const srcBase = shComponentCount * c;\r\n                    const destBase = paddedSHComponentCount * c;\r\n                    for (let i = 0; i < shComponentCount; i++) {\r\n                        paddedSHArray[destBase + i] = shData[srcBase + i];\r\n                    }\r\n                }\r\n                updateTexture(shTextureDesc.texture, shTextureDesc.size,\r\n                              shTextureDesc.elementsPerTexel, paddedSHArray, paddedSHComponentCount);\r\n            // Update for the case of spherical harmonics data split among three textures, one for each color channel\r\n            } else {\r\n                const shComponentCountPerChannel = shTextureDesc.componentCountPerChannel;\r\n                for (let t = 0; t < 3; t++) {\r\n                    const paddedSHArray = shTextureDesc.data[t];\r\n                    for (let c = fromSplat; c <= toSplat; c++) {\r\n                        const srcBase = shComponentCount * c;\r\n                        const destBase = paddedSHComponentCount * c;\r\n                        if (shComponentCountPerChannel >= 3) {\r\n                            for (let i = 0; i < 3; i++) paddedSHArray[destBase + i] = shData[srcBase + t * 3 + i];\r\n                            if (shComponentCountPerChannel >= 8) {\r\n                                for (let i = 0; i < 5; i++) paddedSHArray[destBase + 3 + i] = shData[srcBase + 9 + t * 5 + i];\r\n                            }\r\n                        }\r\n                    }\r\n                    updateTexture(shTextureDesc.textures[t], shTextureDesc.size,\r\n                                  shTextureDesc.elementsPerTexel, paddedSHArray, paddedSHComponentCount);\r\n                }\r\n            }\r\n        }\r\n\r\n        // update scene index & transform data\r\n        const sceneIndexesTexDesc = this.splatDataTextures['sceneIndexes'];\r\n        const paddedSceneIndexes = sceneIndexesTexDesc.data;\r\n        for (let c = this.lastBuildSplatCount; c <= toSplat; c++) {\r\n            paddedSceneIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\r\n        }\r\n        const sceneIndexesTexture = sceneIndexesTexDesc.texture;\r\n        const sceneIndexesTextureProps = this.renderer ? this.renderer.properties.get(sceneIndexesTexture) : null;\r\n        if (!sceneIndexesTextureProps || !sceneIndexesTextureProps.__webglTexture) {\r\n            sceneIndexesTexture.needsUpdate = true;\r\n        } else {\r\n            this.updateDataTexture(paddedSceneIndexes, sceneIndexesTexDesc.texture, sceneIndexesTexDesc.size,\r\n                                   sceneIndexesTextureProps, 1, 1, 1, this.lastBuildSplatCount, toSplat);\r\n        }\r\n    }\r\n\r\n    getTargetCovarianceCompressionLevel() {\r\n        return this.halfPrecisionCovariancesOnGPU ? 1 : 0;\r\n    }\r\n\r\n    getTargetSphericalHarmonicsCompressionLevel() {\r\n        return Math.max(1, this.getMaximumSplatBufferCompressionLevel());\r\n    }\r\n\r\n    getMaximumSplatBufferCompressionLevel() {\r\n        let maxCompressionLevel;\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            const scene = this.getScene(i);\r\n            const splatBuffer = scene.splatBuffer;\r\n            if (i === 0 || splatBuffer.compressionLevel > maxCompressionLevel) {\r\n                maxCompressionLevel = splatBuffer.compressionLevel;\r\n            }\r\n        }\r\n        return maxCompressionLevel;\r\n    }\r\n\r\n    getMinimumSplatBufferCompressionLevel() {\r\n        let minCompressionLevel;\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            const scene = this.getScene(i);\r\n            const splatBuffer = scene.splatBuffer;\r\n            if (i === 0 || splatBuffer.compressionLevel < minCompressionLevel) {\r\n                minCompressionLevel = splatBuffer.compressionLevel;\r\n            }\r\n        }\r\n        return minCompressionLevel;\r\n    }\r\n\r\n    static computeTextureUpdateRegion(startSplat, endSplat, textureWidth, elementsPerTexel, elementsPerSplat) {\r\n        const texelsPerSplat = elementsPerSplat / elementsPerTexel;\r\n\r\n        const startSplatTexels = startSplat * texelsPerSplat;\r\n        const startRow = Math.floor(startSplatTexels / textureWidth);\r\n        const startRowElement = startRow * textureWidth * elementsPerTexel;\r\n\r\n        const endSplatTexels = endSplat * texelsPerSplat;\r\n        const endRow = Math.floor(endSplatTexels / textureWidth);\r\n        const endRowEndElement = endRow * textureWidth * elementsPerTexel + (textureWidth * elementsPerTexel);\r\n\r\n        return {\r\n            'dataStart': startRowElement,\r\n            'dataEnd': endRowEndElement,\r\n            'startRow': startRow,\r\n            'endRow': endRow\r\n        };\r\n    }\r\n\r\n    updateDataTexture(paddedData, texture, textureSize, textureProps, elementsPerTexel, elementsPerSplat, bytesPerElement, from, to) {\r\n        const gl = this.renderer.getContext();\r\n        const updateRegion = SplatMesh.computeTextureUpdateRegion(from, to, textureSize.x, elementsPerTexel, elementsPerSplat);\r\n        const updateElementCount = updateRegion.dataEnd - updateRegion.dataStart;\r\n        const updateDataView = new paddedData.constructor(paddedData.buffer,\r\n                                                          updateRegion.dataStart * bytesPerElement, updateElementCount);\r\n        const updateHeight = updateRegion.endRow - updateRegion.startRow + 1;\r\n        const glType = this.webGLUtils.convert(texture.type);\r\n        const glFormat = this.webGLUtils.convert(texture.format, texture.colorSpace);\r\n        const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\r\n        gl.bindTexture(gl.TEXTURE_2D, textureProps.__webglTexture);\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, updateRegion.startRow,\r\n                         textureSize.x, updateHeight, glFormat, glType, updateDataView);\r\n        gl.bindTexture(gl.TEXTURE_2D, currentTexture);\r\n    }\r\n\r\n    static updatePaddedCompressedCovariancesTextureData(sourceData, textureData, textureDataStartIndex, fromElement, toElement) {\r\n        let textureDataView = new DataView(textureData.buffer);\r\n        let textureDataIndex = textureDataStartIndex;\r\n        let sequentialCount = 0;\r\n        for (let i = fromElement; i <= toElement; i+=2) {\r\n            textureDataView.setUint16(textureDataIndex * 2, sourceData[i], true);\r\n            textureDataView.setUint16(textureDataIndex * 2 + 2, sourceData[i + 1], true);\r\n            textureDataIndex += 2;\r\n            sequentialCount++;\r\n            if (sequentialCount >= 3) {\r\n                textureDataIndex += 2;\r\n                sequentialCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    static updateCenterColorsPaddedData(from, to, centers, colors, paddedCenterColors) {\r\n        for (let c = from; c <= to; c++) {\r\n            const colorsBase = c * 4;\r\n            const centersBase = c * 3;\r\n            const centerColorsBase = c * 4;\r\n            paddedCenterColors[centerColorsBase] = rgbaArrayToInteger(colors, colorsBase);\r\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\r\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\r\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\r\n        }\r\n    }\r\n\r\n    static updateScaleRotationsPaddedData(from, to, scales, rotations, paddedScaleRotations) {\r\n        const combinedSize = 6;\r\n        for (let c = from; c <= to; c++) {\r\n            const scaleBase = c * 3;\r\n            const rotationBase = c * 4;\r\n            const scaleRotationsBase = c * combinedSize;\r\n\r\n            paddedScaleRotations[scaleRotationsBase] = scales[scaleBase];\r\n            paddedScaleRotations[scaleRotationsBase + 1] = scales[scaleBase + 1];\r\n            paddedScaleRotations[scaleRotationsBase + 2] = scales[scaleBase + 2];\r\n\r\n            paddedScaleRotations[scaleRotationsBase + 3] = rotations[rotationBase];\r\n            paddedScaleRotations[scaleRotationsBase + 4] = rotations[rotationBase + 1];\r\n            paddedScaleRotations[scaleRotationsBase + 5] = rotations[rotationBase + 2];\r\n        }\r\n    }\r\n\r\n    updateVisibleRegion(sinceLastBuildOnly) {\r\n        const splatCount = this.getSplatCount(true);\r\n        const tempCenter = new THREE.Vector3();\r\n        if (!sinceLastBuildOnly) {\r\n            const avgCenter = new THREE.Vector3();\r\n            this.scenes.forEach((scene) => {\r\n                avgCenter.add(scene.splatBuffer.sceneCenter);\r\n            });\r\n            avgCenter.multiplyScalar(1.0 / this.scenes.length);\r\n            this.calculatedSceneCenter.copy(avgCenter);\r\n            this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter);\r\n            this.material.uniformsNeedUpdate = true;\r\n        }\r\n\r\n        const startSplatFormMaxDistanceCalc = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\r\n        for (let i = startSplatFormMaxDistanceCalc; i < splatCount; i++) {\r\n            this.getSplatCenter(i, tempCenter, true);\r\n            const distFromCSceneCenter = tempCenter.sub(this.calculatedSceneCenter).length();\r\n            if (distFromCSceneCenter > this.maxSplatDistanceFromSceneCenter) this.maxSplatDistanceFromSceneCenter = distFromCSceneCenter;\r\n        }\r\n\r\n        if (this.maxSplatDistanceFromSceneCenter - this.visibleRegionBufferRadius > VISIBLE_REGION_EXPANSION_DELTA) {\r\n            this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\r\n            this.visibleRegionRadius = Math.max(this.visibleRegionBufferRadius - VISIBLE_REGION_EXPANSION_DELTA, 0.0);\r\n        }\r\n        if (this.finalBuild) this.visibleRegionRadius = this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\r\n        this.updateVisibleRegionFadeDistance();\r\n    }\r\n\r\n    updateVisibleRegionFadeDistance(sceneRevealMode = SceneRevealMode.Default) {\r\n        const fastFadeRate = SCENE_FADEIN_RATE_FAST * this.sceneFadeInRateMultiplier;\r\n        const gradualFadeRate = SCENE_FADEIN_RATE_GRADUAL * this.sceneFadeInRateMultiplier;\r\n        const defaultFadeInRate = this.finalBuild ? fastFadeRate : gradualFadeRate;\r\n        const fadeInRate = sceneRevealMode === SceneRevealMode.Default ? defaultFadeInRate : gradualFadeRate;\r\n        this.visibleRegionFadeStartRadius = (this.visibleRegionRadius - this.visibleRegionFadeStartRadius) *\r\n                                             fadeInRate + this.visibleRegionFadeStartRadius;\r\n        const fadeInPercentage = (this.visibleRegionBufferRadius > 0) ?\r\n                                 (this.visibleRegionFadeStartRadius / this.visibleRegionBufferRadius) : 0;\r\n        const fadeInComplete = fadeInPercentage > 0.99;\r\n        const shaderFadeInComplete = (fadeInComplete || sceneRevealMode === SceneRevealMode.Instant) ? 1 : 0;\r\n\r\n        this.material.uniforms.visibleRegionFadeStartRadius.value = this.visibleRegionFadeStartRadius;\r\n        this.material.uniforms.visibleRegionRadius.value = this.visibleRegionRadius;\r\n        this.material.uniforms.firstRenderTime.value = this.firstRenderTime;\r\n        this.material.uniforms.currentTime.value = performance.now();\r\n        this.material.uniforms.fadeInComplete.value = shaderFadeInComplete;\r\n        this.material.uniformsNeedUpdate = true;\r\n        this.visibleRegionChanging = !fadeInComplete;\r\n    }\r\n\r\n    /**\r\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\r\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\r\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\r\n     *                                  every splat.\r\n     */\r\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\r\n        const geometry = this.geometry;\r\n        geometry.attributes.splatIndex.set(globalIndexes);\r\n        geometry.attributes.splatIndex.needsUpdate = true;\r\n        if (renderSplatCount > 0 && this.firstRenderTime === -1) this.firstRenderTime = performance.now();\r\n        geometry.instanceCount = renderSplatCount;\r\n        geometry.setDrawRange(0, renderSplatCount);\r\n    }\r\n\r\n    /**\r\n     * Update the transforms for each scene in this splat mesh from their individual components (position,\r\n     * quaternion, and scale)\r\n     */\r\n    updateTransforms() {\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            const scene = this.getScene(i);\r\n            scene.updateTransform(this.dynamicMode);\r\n        }\r\n    }\r\n\r\n    updateUniforms = function() {\r\n\r\n        const viewport = new THREE.Vector2();\r\n\r\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY,\r\n                        orthographicMode, orthographicZoom, inverseFocalAdjustment) {\r\n            const splatCount = this.getSplatCount();\r\n            if (splatCount > 0) {\r\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\r\n                             renderDimensions.y * this.devicePixelRatio);\r\n                this.material.uniforms.viewport.value.copy(viewport);\r\n                this.material.uniforms.basisViewport.value.set(1.0 / viewport.x, 1.0 / viewport.y);\r\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\r\n                this.material.uniforms.orthographicMode.value = orthographicMode ? 1 : 0;\r\n                this.material.uniforms.orthoZoom.value = orthographicZoom;\r\n                this.material.uniforms.inverseFocalAdjustment.value = inverseFocalAdjustment;\r\n                if (this.dynamicMode) {\r\n                    for (let i = 0; i < this.scenes.length; i++) {\r\n                        this.material.uniforms.transforms.value[i].copy(this.getScene(i).transform);\r\n                    }\r\n                }\r\n                if (this.enableOptionalEffects) {\r\n                    for (let i = 0; i < this.scenes.length; i++) {\r\n                        this.material.uniforms.sceneOpacity.value[i] = clamp(this.getScene(i).opacity, 0.0, 1.0);\r\n                        this.material.uniforms.sceneVisibility.value[i] = this.getScene(i).visible ? 1 : 0;\r\n                        this.material.uniformsNeedUpdate = true;\r\n                    }\r\n                }\r\n                this.material.uniformsNeedUpdate = true;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    setSplatScale(splatScale = 1) {\r\n        this.splatScale = splatScale;\r\n        this.material.uniforms.splatScale.value = splatScale;\r\n        this.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getSplatScale() {\r\n        return this.splatScale;\r\n    }\r\n\r\n    setPointCloudModeEnabled(enabled) {\r\n        this.pointCloudModeEnabled = enabled;\r\n        this.material.uniforms.pointCloudModeEnabled.value = enabled ? 1 : 0;\r\n        this.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getPointCloudModeEnabled() {\r\n        return this.pointCloudModeEnabled;\r\n    }\r\n\r\n    getSplatDataTextures() {\r\n        return this.splatDataTextures;\r\n    }\r\n\r\n    getSplatCount(includeSinceLastBuild = false) {\r\n        if (!includeSinceLastBuild) return this.lastBuildSplatCount;\r\n        else return SplatMesh.getTotalSplatCountForScenes(this.scenes);\r\n    }\r\n\r\n    static getTotalSplatCountForScenes(scenes) {\r\n        let totalSplatCount = 0;\r\n        for (let scene of scenes) {\r\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getSplatCount();\r\n        }\r\n        return totalSplatCount;\r\n    }\r\n\r\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\r\n        let totalSplatCount = 0;\r\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\r\n        return totalSplatCount;\r\n    }\r\n\r\n    getMaxSplatCount() {\r\n        return SplatMesh.getTotalMaxSplatCountForScenes(this.scenes);\r\n    }\r\n\r\n    static getTotalMaxSplatCountForScenes(scenes) {\r\n        let totalSplatCount = 0;\r\n        for (let scene of scenes) {\r\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getMaxSplatCount();\r\n        }\r\n        return totalSplatCount;\r\n    }\r\n\r\n    static getTotalMaxSplatCountForSplatBuffers(splatBuffers) {\r\n        let totalSplatCount = 0;\r\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getMaxSplatCount();\r\n        return totalSplatCount;\r\n    }\r\n\r\n    disposeDistancesComputationGPUResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.vao) {\r\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\r\n            this.distancesTransformFeedback.vao = null;\r\n        }\r\n        if (this.distancesTransformFeedback.program) {\r\n            gl.deleteProgram(this.distancesTransformFeedback.program);\r\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\r\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\r\n            this.distancesTransformFeedback.program = null;\r\n            this.distancesTransformFeedback.vertexShader = null;\r\n            this.distancesTransformFeedback.fragmentShader = null;\r\n        }\r\n        this.disposeDistancesComputationGPUBufferResources();\r\n        if (this.distancesTransformFeedback.id) {\r\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\r\n            this.distancesTransformFeedback.id = null;\r\n        }\r\n    }\r\n\r\n    disposeDistancesComputationGPUBufferResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.centersBuffer) {\r\n            this.distancesTransformFeedback.centersBuffer = null;\r\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\r\n        }\r\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\r\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\r\n            this.distancesTransformFeedback.outDistancesBuffer = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the Three.js renderer used by this splat mesh\r\n     * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\r\n     */\r\n    setRenderer(renderer) {\r\n        if (renderer !== this.renderer) {\r\n            this.renderer = renderer;\r\n            const gl = this.renderer.getContext();\r\n            const extensions = new WebGLExtensions(gl);\r\n            const capabilities = new WebGLCapabilities(gl, extensions, {});\r\n            extensions.init(capabilities);\r\n            this.webGLUtils = new THREE.WebGLUtils(gl, extensions, capabilities);\r\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\r\n                this.setupDistancesComputationTransformFeedback();\r\n                const { centers, sceneIndexes } = this.getDataForDistancesComputation(0, this.getSplatCount() - 1);\r\n                this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes);\r\n            }\r\n        }\r\n    }\r\n\r\n    setupDistancesComputationTransformFeedback = function() {\r\n\r\n        let currentMaxSplatCount;\r\n\r\n        return function() {\r\n            const maxSplatCount = this.getMaxSplatCount();\r\n\r\n            if (!this.renderer) return;\r\n\r\n            const rebuildGPUObjects = (this.lastRenderer !== this.renderer);\r\n            const rebuildBuffers = currentMaxSplatCount !== maxSplatCount;\r\n\r\n            if (!rebuildGPUObjects && !rebuildBuffers) return;\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.disposeDistancesComputationGPUResources();\r\n            } else if (rebuildBuffers) {\r\n                this.disposeDistancesComputationGPUBufferResources();\r\n            }\r\n\r\n            const gl = this.renderer.getContext();\r\n\r\n            const createShader = (gl, type, source) => {\r\n                const shader = gl.createShader(type);\r\n                if (!shader) {\r\n                    console.error('Fatal error: gl could not create a shader object.');\r\n                    return null;\r\n                }\r\n\r\n                gl.shaderSource(shader, source);\r\n                gl.compileShader(shader);\r\n\r\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n                if (!compiled) {\r\n                    let typeName = 'unknown';\r\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\r\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\r\n                    const errors = gl.getShaderInfoLog(shader);\r\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\r\n                    gl.deleteShader(shader);\r\n                    return null;\r\n                }\r\n\r\n                return shader;\r\n            };\r\n\r\n            let vsSource;\r\n            if (this.integerBasedDistancesComputation) {\r\n                vsSource =\r\n                `#version 300 es\r\n                in ivec4 center;\r\n                flat out int distance;`;\r\n                if (this.dynamicMode) {\r\n                    vsSource += `\r\n                        in uint sceneIndex;\r\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\r\n                        void main(void) {\r\n                            ivec4 transform = transforms[sceneIndex];\r\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\r\n                        }\r\n                    `;\r\n                } else {\r\n                    vsSource += `\r\n                        uniform ivec3 modelViewProj;\r\n                        void main(void) {\r\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\r\n                        }\r\n                    `;\r\n                }\r\n            } else {\r\n                vsSource =\r\n                `#version 300 es\r\n                in vec4 center;\r\n                flat out float distance;`;\r\n                if (this.dynamicMode) {\r\n                    vsSource += `\r\n                        in uint sceneIndex;\r\n                        uniform mat4 transforms[${Constants.MaxScenes}];\r\n                        void main(void) {\r\n                            vec4 transformedCenter = transforms[sceneIndex] * vec4(center.xyz, 1.0);\r\n                            distance = transformedCenter.z;\r\n                        }\r\n                    `;\r\n                } else {\r\n                    vsSource += `\r\n                        uniform vec3 modelViewProj;\r\n                        void main(void) {\r\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\r\n                        }\r\n                    `;\r\n                }\r\n            }\r\n\r\n            const fsSource =\r\n            `#version 300 es\r\n                precision lowp float;\r\n                out vec4 fragColor;\r\n                void main(){}\r\n            `;\r\n\r\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\r\n            }\r\n\r\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n            if (rebuildGPUObjects) {\r\n                const program = gl.createProgram();\r\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\r\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n                if (!vertexShader || !fragmentShader) {\r\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\r\n                }\r\n                gl.attachShader(program, vertexShader);\r\n                gl.attachShader(program, fragmentShader);\r\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\r\n                gl.linkProgram(program);\r\n\r\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n                if (!linked) {\r\n                    const error = gl.getProgramInfoLog(program);\r\n                    console.error('Fatal error: Failed to link program: ' + error);\r\n                    gl.deleteProgram(program);\r\n                    gl.deleteShader(fragmentShader);\r\n                    gl.deleteShader(vertexShader);\r\n                    throw new Error('Could not link shaders for distances computation on GPU.');\r\n                }\r\n\r\n                this.distancesTransformFeedback.program = program;\r\n                this.distancesTransformFeedback.vertexShader = vertexShader;\r\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\r\n            }\r\n\r\n            gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n            this.distancesTransformFeedback.centersLoc =\r\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\r\n            if (this.dynamicMode) {\r\n                this.distancesTransformFeedback.sceneIndexesLoc =\r\n                    gl.getAttribLocation(this.distancesTransformFeedback.program, 'sceneIndex');\r\n                for (let i = 0; i < this.scenes.length; i++) {\r\n                    this.distancesTransformFeedback.transformsLocs[i] =\r\n                        gl.getUniformLocation(this.distancesTransformFeedback.program, `transforms[${i}]`);\r\n                }\r\n            } else {\r\n                this.distancesTransformFeedback.modelViewProjLoc =\r\n                    gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\r\n            }\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n                if (this.integerBasedDistancesComputation) {\r\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\r\n                } else {\r\n                    gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\r\n                }\r\n\r\n                if (this.dynamicMode) {\r\n                    this.distancesTransformFeedback.sceneIndexesBuffer = gl.createBuffer();\r\n                    gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.sceneIndexesBuffer);\r\n                    gl.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc);\r\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\r\n                }\r\n            }\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\r\n            }\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, maxSplatCount * 4, gl.STATIC_READ);\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\r\n            }\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\r\n            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n            this.lastRenderer = this.renderer;\r\n            currentMaxSplatCount = maxSplatCount;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\r\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\r\n     * @param {Array<number>} centers The splat centers data\r\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\r\n     */\r\n    updateGPUCentersBufferForDistancesComputation(isUpdate, centers, offsetSplats) {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n        const ArrayType = this.integerBasedDistancesComputation ? Uint32Array : Float32Array;\r\n        const attributeBytesPerCenter = 16;\r\n        const subBufferOffset = offsetSplats * attributeBytesPerCenter;\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n\r\n        if (isUpdate) {\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, centers);\r\n        } else {\r\n            const maxArray = new ArrayType(this.getMaxSplatCount() * attributeBytesPerCenter);\r\n            maxArray.set(centers);\r\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\r\n        }\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n    }\r\n\r\n    /**\r\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\r\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\r\n     * @param {Array<number>} sceneIndexes The splat scene indexes\r\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\r\n     */\r\n    updateGPUTransformIndexesBufferForDistancesComputation(isUpdate, sceneIndexes, offsetSplats) {\r\n\r\n        if (!this.renderer || !this.dynamicMode) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n        const subBufferOffset = offsetSplats * 4;\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.sceneIndexesBuffer);\r\n\r\n        if (isUpdate) {\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, sceneIndexes);\r\n        } else {\r\n            const maxArray = new Uint32Array(this.getMaxSplatCount() * 4);\r\n            maxArray.set(sceneIndexes);\r\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n    }\r\n\r\n    /**\r\n     * Get a typed array containing a mapping from global splat indexes to their scene index.\r\n     * @param {number} start Starting splat index to store\r\n     * @param {number} end Ending splat index to store\r\n     * @return {Uint32Array}\r\n     */\r\n    getSceneIndexes(start, end) {\r\n\r\n        let sceneIndexes;\r\n        const fillCount = end - start + 1;\r\n        sceneIndexes = new Uint32Array(fillCount);\r\n        for (let i = start; i <= end; i++) {\r\n            sceneIndexes[i] = this.globalSplatIndexToSceneIndexMap[i];\r\n        }\r\n\r\n        return sceneIndexes;\r\n    }\r\n\r\n    /**\r\n     * Fill 'array' with the transforms for each scene in this splat mesh.\r\n     * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\r\n     */\r\n    fillTransformsArray = function() {\r\n\r\n        const tempArray = [];\r\n\r\n        return function(array) {\r\n            if (tempArray.length !== array.length) tempArray.length = array.length;\r\n            for (let i = 0; i < this.scenes.length; i++) {\r\n                const sceneTransform = this.getScene(i).transform;\r\n                const sceneTransformElements = sceneTransform.elements;\r\n                for (let j = 0; j < 16; j++) {\r\n                    tempArray[i * 16 + j] = sceneTransformElements[j];\r\n                }\r\n            }\r\n            array.set(tempArray);\r\n        };\r\n\r\n    }();\r\n\r\n    computeDistancesOnGPU = function() {\r\n\r\n        const tempMatrix = new THREE.Matrix4();\r\n\r\n        return function(modelViewProjMatrix, outComputedDistances) {\r\n            if (!this.renderer) return;\r\n\r\n            // console.time(\"gpu_compute_distances\");\r\n            const gl = this.renderer.getContext();\r\n\r\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\r\n\r\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n            gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n            gl.enable(gl.RASTERIZER_DISCARD);\r\n\r\n            if (this.dynamicMode) {\r\n                for (let i = 0; i < this.scenes.length; i++) {\r\n                    tempMatrix.copy(this.getScene(i).transform);\r\n                    tempMatrix.premultiply(modelViewProjMatrix);\r\n\r\n                    if (this.integerBasedDistancesComputation) {\r\n                        const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\r\n                        const iTransform = [iTempMatrix[2], iTempMatrix[6], iTempMatrix[10], iTempMatrix[14]];\r\n                        gl.uniform4i(this.distancesTransformFeedback.transformsLocs[i], iTransform[0], iTransform[1],\r\n                                                                                        iTransform[2], iTransform[3]);\r\n                    } else {\r\n                        gl.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[i], false, tempMatrix.elements);\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.integerBasedDistancesComputation) {\r\n                    const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\r\n                    const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\r\n                    gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\r\n                } else {\r\n                    const viewProj = [modelViewProjMatrix.elements[2], modelViewProjMatrix.elements[6], modelViewProjMatrix.elements[10]];\r\n                    gl.uniform3f(this.distancesTransformFeedback.modelViewProjLoc, viewProj[0], viewProj[1], viewProj[2]);\r\n                }\r\n            }\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n            gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n            if (this.integerBasedDistancesComputation) {\r\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\r\n            } else {\r\n                gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\r\n            }\r\n\r\n            if (this.dynamicMode) {\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.sceneIndexesBuffer);\r\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc);\r\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\r\n            }\r\n\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n            gl.beginTransformFeedback(gl.POINTS);\r\n            gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\r\n            gl.endTransformFeedback();\r\n\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\r\n\r\n            gl.disable(gl.RASTERIZER_DISCARD);\r\n\r\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n            gl.flush();\r\n\r\n            const promise = new Promise((resolve) => {\r\n                const checkSync = () => {\r\n                    if (this.disposed) {\r\n                        resolve();\r\n                    } else {\r\n                        const timeout = 0;\r\n                        const bitflags = 0;\r\n                        const status = gl.clientWaitSync(sync, bitflags, timeout);\r\n                        switch (status) {\r\n                            case gl.TIMEOUT_EXPIRED:\r\n                                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\r\n                                return this.computeDistancesOnGPUSyncTimeout;\r\n                            case gl.WAIT_FAILED:\r\n                                throw new Error('should never get here');\r\n                            default:\r\n                                this.computeDistancesOnGPUSyncTimeout = null;\r\n                                gl.deleteSync(sync);\r\n                                const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n                                gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n                                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n                                gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\r\n                                gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n                                if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n                                // console.timeEnd(\"gpu_compute_distances\");\r\n\r\n                                resolve();\r\n                        }\r\n                    }\r\n                };\r\n                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\r\n            });\r\n\r\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\r\n            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n            return promise;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\r\n     * buffer, and the corresponding transform)\r\n     * @param {number} globalIndex Global splat index\r\n     * @param {object} paramsObj Object in which to store local data\r\n     * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\r\n     *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\r\n     *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\r\n     *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\r\n     *                                       be null.\r\n     */\r\n    getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\r\n        if (returnSceneTransform === undefined || returnSceneTransform === null) {\r\n            returnSceneTransform = this.dynamicMode ? false : true;\r\n        }\r\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\r\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\r\n        paramsObj.sceneTransform = returnSceneTransform ? this.getSceneTransformForSplat(globalIndex) : null;\r\n    }\r\n\r\n    /**\r\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\r\n     * @param {Float32Array} covariances Target storage for splat covariances\r\n     * @param {Float32Array} scales Target storage for splat scales\r\n     * @param {Float32Array} rotations Target storage for splat rotations\r\n     * @param {Float32Array} centers Target storage for splat centers\r\n     * @param {Uint8Array} colors Target storage for splat colors\r\n     * @param {Float32Array} sphericalHarmonics Target storage for spherical harmonics\r\n     * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\r\n     *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\r\n     *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\r\n     * @param {number} covarianceCompressionLevel The compression level for covariances in the destination array\r\n     * @param {number} sphericalHarmonicsCompressionLevel The compression level for spherical harmonics in the destination array\r\n     * @param {number} srcStart The start location from which to pull source data\r\n     * @param {number} srcEnd The end location from which to pull source data\r\n     * @param {number} destStart The start location from which to write data\r\n     */\r\n    fillSplatDataArrays(covariances, scales, rotations, centers, colors, sphericalHarmonics, applySceneTransform,\r\n                        covarianceCompressionLevel = 0, scaleRotationCompressionLevel = 0, sphericalHarmonicsCompressionLevel = 1,\r\n                        srcStart, srcEnd, destStart = 0, sceneIndex) {\r\n        const scaleOverride = new THREE.Vector3();\r\n        scaleOverride.x = undefined;\r\n        scaleOverride.y = undefined;\r\n        if (this.splatRenderMode === SplatRenderMode.ThreeD) {\r\n            scaleOverride.z = undefined;\r\n        } else {\r\n            scaleOverride.z = 1;\r\n        }\r\n        const tempTransform = new THREE.Matrix4();\r\n\r\n        let startSceneIndex = 0;\r\n        let endSceneIndex = this.scenes.length - 1;\r\n        if (sceneIndex !== undefined && sceneIndex !== null && sceneIndex >= 0 && sceneIndex <= this.scenes.length) {\r\n            startSceneIndex = sceneIndex;\r\n            endSceneIndex = sceneIndex;\r\n        }\r\n        for (let i = startSceneIndex; i <= endSceneIndex; i++) {\r\n            if (applySceneTransform === undefined || applySceneTransform === null) {\r\n                applySceneTransform = this.dynamicMode ? false : true;\r\n            }\r\n\r\n            const scene = this.getScene(i);\r\n            const splatBuffer = scene.splatBuffer;\r\n            let sceneTransform;\r\n            if (applySceneTransform) {\r\n                this.getSceneTransform(i, tempTransform);\r\n                sceneTransform = tempTransform;\r\n            }\r\n            if (covariances) {\r\n                splatBuffer.fillSplatCovarianceArray(covariances, sceneTransform, srcStart, srcEnd, destStart, covarianceCompressionLevel);\r\n            }\r\n            if (scales || rotations) {\r\n                if (!scales || !rotations) {\r\n                    throw new Error('SplatMesh::fillSplatDataArrays() -> \"scales\" and \"rotations\" must both be valid.');\r\n                }\r\n                splatBuffer.fillSplatScaleRotationArray(scales, rotations, sceneTransform,\r\n                                                        srcStart, srcEnd, destStart, scaleRotationCompressionLevel, scaleOverride);\r\n            }\r\n            if (centers) splatBuffer.fillSplatCenterArray(centers, sceneTransform, srcStart, srcEnd, destStart);\r\n            if (colors) splatBuffer.fillSplatColorArray(colors, scene.minimumAlpha, srcStart, srcEnd, destStart);\r\n            if (sphericalHarmonics) {\r\n                splatBuffer.fillSphericalHarmonicsArray(sphericalHarmonics, this.minSphericalHarmonicsDegree,\r\n                                                        sceneTransform, srcStart, srcEnd, destStart, sphericalHarmonicsCompressionLevel);\r\n            }\r\n            destStart += splatBuffer.getSplatCount();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\r\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\r\n     * @param {number} start The index at which to start retrieving data\r\n     * @param {number} end The index at which to stop retrieving data\r\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\r\n     * @return {Int32Array}\r\n     */\r\n    getIntegerCenters(start, end, padFour = false) {\r\n        const splatCount = end - start + 1;\r\n        const floatCenters = new Float32Array(splatCount * 3);\r\n        this.fillSplatDataArrays(null, null, null, floatCenters, null, null, undefined, undefined, undefined, undefined, start);\r\n        let intCenters;\r\n        let componentCount = padFour ? 4 : 3;\r\n        intCenters = new Int32Array(splatCount * componentCount);\r\n        for (let i = 0; i < splatCount; i++) {\r\n            for (let t = 0; t < 3; t++) {\r\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\r\n            }\r\n            if (padFour) intCenters[i * componentCount + 3] = 1000;\r\n        }\r\n        return intCenters;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of splat centers, transformed as appropriate, optionally padded.\r\n     * @param {number} start The index at which to start retrieving data\r\n     * @param {number} end The index at which to stop retrieving data\r\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\r\n     * @return {Float32Array}\r\n     */\r\n    getFloatCenters(start, end, padFour = false) {\r\n        const splatCount = end - start + 1;\r\n        const floatCenters = new Float32Array(splatCount * 3);\r\n        this.fillSplatDataArrays(null, null, null, floatCenters, null, null, undefined, undefined, undefined, undefined, start);\r\n        if (!padFour) return floatCenters;\r\n        let paddedFloatCenters = new Float32Array(splatCount * 4);\r\n        for (let i = 0; i < splatCount; i++) {\r\n            for (let t = 0; t < 3; t++) {\r\n                paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\r\n            }\r\n            paddedFloatCenters[i * 4 + 3] = 1.0;\r\n        }\r\n        return paddedFloatCenters;\r\n    }\r\n\r\n    /**\r\n     * Get the center for a splat, transformed as appropriate.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\r\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\r\n     *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\r\n     *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\r\n     *                                      scene transform will never be applied. If undefined, the default behavior will apply.\r\n     */\r\n    getSplatCenter = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outCenter, applySceneTransform) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\r\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.sceneTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Get the scale and rotation for a splat, transformed as appropriate.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\r\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\r\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\r\n     *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\r\n     *                                      'applySceneTransform' is true, the scene transform will always be applied and if\r\n     *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\r\n     *                                      the default behavior will apply.\r\n     */\r\n    getSplatScaleAndRotation = function() {\r\n\r\n        const paramsObj = {};\r\n        const scaleOverride = new THREE.Vector3();\r\n\r\n        return function(globalIndex, outScale, outRotation, applySceneTransform) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\r\n            scaleOverride.x = undefined;\r\n            scaleOverride.y = undefined;\r\n            scaleOverride.z = undefined;\r\n            if (this.splatRenderMode === SplatRenderMode.TwoD) scaleOverride.z = 0;\r\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation,\r\n                                                           paramsObj.sceneTransform, scaleOverride);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Get the color for a splat.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\r\n     */\r\n    getSplatColor = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outColor) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj);\r\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\r\n     * @param {number} sceneIndex Index of the desired scene\r\n     * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\r\n     */\r\n    getSceneTransform(sceneIndex, outTransform) {\r\n        const scene = this.getScene(sceneIndex);\r\n        scene.updateTransform(this.dynamicMode);\r\n        outTransform.copy(scene.transform);\r\n    }\r\n\r\n    /**\r\n     * Get the scene at 'sceneIndex'.\r\n     * @param {number} sceneIndex Index of the desired scene\r\n     * @return {SplatScene}\r\n     */\r\n    getScene(sceneIndex) {\r\n        if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\r\n            throw new Error('SplatMesh::getScene() -> Invalid scene index.');\r\n        }\r\n        return this.scenes[sceneIndex];\r\n    }\r\n\r\n    getSceneCount() {\r\n        return this.scenes.length;\r\n    }\r\n\r\n    getSplatBufferForSplat(globalIndex) {\r\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).splatBuffer;\r\n    }\r\n\r\n    getSceneIndexForSplat(globalIndex) {\r\n        return this.globalSplatIndexToSceneIndexMap[globalIndex];\r\n    }\r\n\r\n    getSceneTransformForSplat(globalIndex) {\r\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).transform;\r\n    }\r\n\r\n    getSplatLocalIndex(globalIndex) {\r\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\r\n    }\r\n\r\n    static getIntegerMatrixArray(matrix) {\r\n        const matrixElements = matrix.elements;\r\n        const intMatrixArray = [];\r\n        for (let i = 0; i < 16; i++) {\r\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\r\n        }\r\n        return intMatrixArray;\r\n    }\r\n\r\n    computeBoundingBox(applySceneTransforms = false, sceneIndex) {\r\n        let splatCount = this.getSplatCount();\r\n        if (sceneIndex !== undefined && sceneIndex !== null) {\r\n            if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\r\n                throw new Error('SplatMesh::computeBoundingBox() -> Invalid scene index.');\r\n            }\r\n            splatCount = this.scenes[sceneIndex].splatBuffer.getSplatCount();\r\n        }\r\n\r\n        const floatCenters = new Float32Array(splatCount * 3);\r\n        this.fillSplatDataArrays(null, null, null, floatCenters, null, null, applySceneTransforms,\r\n                                 undefined, undefined, undefined, undefined, sceneIndex);\r\n\r\n        const min = new THREE.Vector3();\r\n        const max = new THREE.Vector3();\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const offset = i * 3;\r\n            const x = floatCenters[offset];\r\n            const y = floatCenters[offset + 1];\r\n            const z = floatCenters[offset + 2];\r\n            if (i === 0 || x < min.x) min.x = x;\r\n            if (i === 0 || y < min.y) min.y = y;\r\n            if (i === 0 || z < min.z) min.z = z;\r\n            if (i === 0 || x > max.x) max.x = x;\r\n            if (i === 0 || y > max.y) max.y = y;\r\n            if (i === 0 || z > max.z) max.z = z;\r\n        }\r\n\r\n        return new THREE.Box3(min, max);\r\n    }\r\n}\r\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u0007T\u0004\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0004\u0001|\u0003{\u0003\u0003} \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \n \u0005 \nH\u001b!\n \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0015j(\u0002\u0000\"\u0016A\u0002tj(\u0002\u0000\"\u0014G\u0004@\u0002 \u0005�\t\u00028 \b \u0014A\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u0014!\u000f\u000b \u0003 \u0015j \u0001 \u0016A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0017 \u0005*\u0002\u0018!\u0018 \u0005*\u0002\b!\u0019A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0017 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0019 \u0002*\u0002\u0000� \u0018 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\u000eG\u0004@ \u0005�\t\u00028 \b \u000eA\u0006tj\"\u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001!\u0011 \u000e!\u000f\u000b \u0003 \u0014j\u0002 \u0011�\u001f\u0003 \u0001 \u0015A\u0002t\"\u000eA\frj*\u0002\u0000� \u0011�\u001f\u0002 \u0001 \u000eA\brj*\u0002\u0000� \u0011�\u001f\u0000 \u0001 \u000ej*\u0002\u0000� \u0011�\u001f\u0001 \u0001 \u000eA\u0004rj*\u0002\u0000�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0017 \f!\r\u0003@\u0002 \u0017 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0018�C\u0000\u0000\u0000O]\u0004@ \u0018�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K!\u0002 \u0001!\n \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","import SorterWasm from './sorter.wasm';\r\nimport SorterWasmNoSIMD from './sorter_no_simd.wasm';\r\nimport SorterWasmNonShared from './sorter_non_shared.wasm';\r\nimport SorterWasmNoSIMDNonShared from './sorter_no_simd_non_shared.wasm';\r\nimport { isIOS, getIOSSemever } from '../Util.js';\r\nimport { Constants } from '../Constants.js';\r\n\r\nfunction sortWorker(self) {\r\n\r\n    let wasmInstance;\r\n    let wasmMemory;\r\n    let useSharedMemory;\r\n    let integerBasedSort;\r\n    let dynamicMode;\r\n    let splatCount;\r\n    let indexesToSortOffset;\r\n    let sortedIndexesOffset;\r\n    let sceneIndexesOffset;\r\n    let transformsOffset;\r\n    let precomputedDistancesOffset;\r\n    let mappedDistancesOffset;\r\n    let frequenciesOffset;\r\n    let centersOffset;\r\n    let modelViewProjOffset;\r\n    let countsZero;\r\n    let sortedIndexesOut;\r\n    let distanceMapRange;\r\n    let uploadedSplatCount;\r\n    let Constants;\r\n\r\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\r\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances, copyTransforms) {\r\n        const sortStartTime = performance.now();\r\n\r\n        if (!useSharedMemory) {\r\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / Constants.BytesPerInt);\r\n            indexesToSort.set(copyIndexesToSort);\r\n            const transforms = new Float32Array(wasmMemory, transformsOffset, copyTransforms.byteLength / Constants.BytesPerFloat);\r\n            transforms.set(copyTransforms);\r\n            if (usePrecomputedDistances) {\r\n                let precomputedDistances;\r\n                if (integerBasedSort) {\r\n                    precomputedDistances = new Int32Array(wasmMemory, precomputedDistancesOffset,\r\n                                                          copyPrecomputedDistances.byteLength / Constants.BytesPerInt);\r\n                } else {\r\n                    precomputedDistances = new Float32Array(wasmMemory, precomputedDistancesOffset,\r\n                                                            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat);\r\n                }\r\n                precomputedDistances.set(copyPrecomputedDistances);\r\n            }\r\n        }\r\n\r\n        if (!countsZero) countsZero = new Uint32Array(distanceMapRange);\r\n        new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\r\n        new Uint32Array(wasmMemory, frequenciesOffset, distanceMapRange).set(countsZero);\r\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\r\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\r\n                                         sortedIndexesOffset, sceneIndexesOffset, transformsOffset, distanceMapRange,\r\n                                         splatSortCount, splatRenderCount, splatCount, usePrecomputedDistances, integerBasedSort,\r\n                                         dynamicMode);\r\n\r\n        const sortMessage = {\r\n            'sortDone': true,\r\n            'splatSortCount': splatSortCount,\r\n            'splatRenderCount': splatRenderCount,\r\n            'sortTime': 0\r\n        };\r\n        if (!useSharedMemory) {\r\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\r\n            if (!sortedIndexesOut || sortedIndexesOut.length < splatRenderCount) {\r\n                sortedIndexesOut = new Uint32Array(splatRenderCount);\r\n            }\r\n            sortedIndexesOut.set(sortedIndexes);\r\n            sortMessage.sortedIndexes = sortedIndexesOut;\r\n        }\r\n        const sortEndTime = performance.now();\r\n\r\n        sortMessage.sortTime = sortEndTime - sortStartTime;\r\n\r\n        self.postMessage(sortMessage);\r\n    }\r\n\r\n    self.onmessage = (e) => {\r\n        if (e.data.centers) {\r\n            centers = e.data.centers;\r\n            sceneIndexes = e.data.sceneIndexes;\r\n            if (integerBasedSort) {\r\n                new Int32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerInt * 4,\r\n                               e.data.range.count * 4).set(new Int32Array(centers));\r\n            } else {\r\n                new Float32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerFloat * 4,\r\n                                 e.data.range.count * 4).set(new Float32Array(centers));\r\n            }\r\n            if (dynamicMode) {\r\n                new Uint32Array(wasmMemory, sceneIndexesOffset + e.data.range.from * 4,\r\n                                e.data.range.count).set(new Uint32Array(sceneIndexes));\r\n            }\r\n            uploadedSplatCount = e.data.range.from + e.data.range.count;\r\n        } else if (e.data.sort) {\r\n            const renderCount = Math.min(e.data.sort.splatRenderCount || 0, uploadedSplatCount);\r\n            const sortCount = Math.min(e.data.sort.splatSortCount || 0, uploadedSplatCount);\r\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\r\n\r\n            let copyIndexesToSort;\r\n            let copyPrecomputedDistances;\r\n            let copyTransforms;\r\n            if (!useSharedMemory) {\r\n                copyIndexesToSort = e.data.sort.indexesToSort;\r\n                copyTransforms = e.data.sort.transforms;\r\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\r\n            }\r\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\r\n                 copyIndexesToSort, copyPrecomputedDistances, copyTransforms);\r\n        } else if (e.data.init) {\r\n            // Yep, this is super hacky and gross :(\r\n            Constants = e.data.init.Constants;\r\n\r\n            splatCount = e.data.init.splatCount;\r\n            useSharedMemory = e.data.init.useSharedMemory;\r\n            integerBasedSort = e.data.init.integerBasedSort;\r\n            dynamicMode = e.data.init.dynamicMode;\r\n            distanceMapRange = e.data.init.distanceMapRange;\r\n            uploadedSplatCount = 0;\r\n\r\n            const CENTERS_BYTES_PER_ENTRY = integerBasedSort ? (Constants.BytesPerInt * 4) : (Constants.BytesPerFloat * 4);\r\n\r\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\r\n\r\n            const matrixSize = 16 * Constants.BytesPerFloat;\r\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\r\n            const memoryRequiredForModelViewProjectionMatrix = matrixSize;\r\n            const memoryRequiredForPrecomputedDistances = integerBasedSort ?\r\n                                                          (splatCount * Constants.BytesPerInt) : (splatCount * Constants.BytesPerFloat);\r\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForIntermediateSortBuffers = integerBasedSort ? (distanceMapRange * Constants.BytesPerInt * 2) :\r\n                                                                                (distanceMapRange * Constants.BytesPerFloat * 2);\r\n            const memoryRequiredforTransformIndexes = dynamicMode ? (splatCount * Constants.BytesPerInt) : 0;\r\n            const memoryRequiredforTransforms = dynamicMode ? (Constants.MaxScenes * matrixSize) : 0;\r\n            const extraMemory = Constants.MemoryPageSize * 32;\r\n\r\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\r\n                                        memoryRequiredForCenters +\r\n                                        memoryRequiredForModelViewProjectionMatrix +\r\n                                        memoryRequiredForPrecomputedDistances +\r\n                                        memoryRequiredForMappedDistances +\r\n                                        memoryRequiredForIntermediateSortBuffers +\r\n                                        memoryRequiredForSortedIndexes +\r\n                                        memoryRequiredforTransformIndexes +\r\n                                        memoryRequiredforTransforms +\r\n                                        extraMemory;\r\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\r\n            const sorterWasmImport = {\r\n                module: {},\r\n                env: {\r\n                    memory: new WebAssembly.Memory({\r\n                        initial: totalPagesRequired,\r\n                        maximum: totalPagesRequired,\r\n                        shared: true,\r\n                    }),\r\n                }\r\n            };\r\n            WebAssembly.compile(sorterWasmBytes)\r\n            .then((wasmModule) => {\r\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\r\n            })\r\n            .then((instance) => {\r\n                wasmInstance = instance;\r\n                indexesToSortOffset = 0;\r\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\r\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\r\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\r\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\r\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\r\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\r\n                sceneIndexesOffset = sortedIndexesOffset + memoryRequiredForSortedIndexes;\r\n                transformsOffset = sceneIndexesOffset + memoryRequiredforTransformIndexes;\r\n                wasmMemory = sorterWasmImport.env.memory.buffer;\r\n                if (useSharedMemory) {\r\n                    self.postMessage({\r\n                        'sortSetupPhase1Complete': true,\r\n                        'indexesToSortBuffer': wasmMemory,\r\n                        'indexesToSortOffset': indexesToSortOffset,\r\n                        'sortedIndexesBuffer': wasmMemory,\r\n                        'sortedIndexesOffset': sortedIndexesOffset,\r\n                        'precomputedDistancesBuffer': wasmMemory,\r\n                        'precomputedDistancesOffset': precomputedDistancesOffset,\r\n                        'transformsBuffer': wasmMemory,\r\n                        'transformsOffset': transformsOffset\r\n                    });\r\n                } else {\r\n                    self.postMessage({\r\n                        'sortSetupPhase1Complete': true\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport function createSortWorker(splatCount, useSharedMemory, enableSIMDInSort, integerBasedSort, dynamicMode,\r\n                                 splatSortDistanceMapPrecision = Constants.DefaultSplatSortDistanceMapPrecision) {\r\n    const worker = new Worker(\r\n        URL.createObjectURL(\r\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\r\n                type: 'application/javascript',\r\n            }),\r\n        ),\r\n    );\r\n\r\n    let sourceWasm = SorterWasm;\r\n\r\n    // iOS makes choosing the right WebAssembly configuration tricky :(\r\n    const iOSSemVer = isIOS() ? getIOSSemever() : null;\r\n    if (!enableSIMDInSort && !useSharedMemory) {\r\n        sourceWasm = SorterWasmNoSIMD;\r\n        // Testing on various devices has shown that even when shared memory is disabled, the WASM module with shared\r\n        // memory can still be used most of the time -- the exception seems to be iOS devices below 16.4\r\n        if (iOSSemVer && iOSSemVer.major <= 16 && iOSSemVer.minor < 4) {\r\n            sourceWasm = SorterWasmNoSIMDNonShared;\r\n        }\r\n    } else if (!enableSIMDInSort) {\r\n        sourceWasm = SorterWasmNoSIMD;\r\n    } else if (!useSharedMemory) {\r\n        // Same issue with shared memory as above on iOS devices\r\n        if (iOSSemVer && iOSSemVer.major <= 16 && iOSSemVer.minor < 4) {\r\n            sourceWasm = SorterWasmNonShared;\r\n        }\r\n    }\r\n\r\n    const sorterWasmBinaryString = atob(sourceWasm);\r\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\r\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\r\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\r\n    }\r\n\r\n    worker.postMessage({\r\n        'init': {\r\n            'sorterWasmBytes': sorterWasmBytes.buffer,\r\n            'splatCount': splatCount,\r\n            'useSharedMemory': useSharedMemory,\r\n            'integerBasedSort': integerBasedSort,\r\n            'dynamicMode': dynamicMode,\r\n            'distanceMapRange': 1 << splatSortDistanceMapPrecision,\r\n            // Super hacky\r\n            'Constants': {\r\n                'BytesPerFloat': Constants.BytesPerFloat,\r\n                'BytesPerInt': Constants.BytesPerInt,\r\n                'MemoryPageSize': Constants.MemoryPageSize,\r\n                'MaxScenes': Constants.MaxScenes\r\n            }\r\n        }\r\n    });\r\n    return worker;\r\n}\r\n","export const WebXRMode = {\r\n    None: 0,\r\n    VR: 1,\r\n    AR: 2\r\n};\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nexport class VRButton {\r\n\r\n    static createButton( renderer, sessionInit = {} ) {\r\n\r\n        const button = document.createElement( 'button' );\r\n\r\n        function showEnterVR( /* device */ ) {\r\n\r\n            let currentSession = null;\r\n\r\n            async function onSessionStarted( session ) {\r\n\r\n                session.addEventListener( 'end', onSessionEnded );\r\n\r\n                await renderer.xr.setSession( session );\r\n                button.textContent = 'EXIT VR';\r\n\r\n                currentSession = session;\r\n\r\n            }\r\n\r\n            function onSessionEnded( /* event */ ) {\r\n\r\n                currentSession.removeEventListener( 'end', onSessionEnded );\r\n\r\n                button.textContent = 'ENTER VR';\r\n\r\n                currentSession = null;\r\n\r\n            }\r\n\r\n            //\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'pointer';\r\n            button.style.left = 'calc(50% - 50px)';\r\n            button.style.width = '100px';\r\n\r\n            button.textContent = 'ENTER VR';\r\n\r\n            // WebXR's requestReferenceSpace only works if the corresponding feature\r\n            // was requested at session creation time. For simplicity, just ask for\r\n            // the interesting ones as optional features, but be aware that the\r\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\r\n            // ('local' is always available for immersive sessions and doesn't need to\r\n            // be requested separately.)\r\n\r\n            const sessionOptions = {\r\n                ...sessionInit,\r\n                optionalFeatures: [\r\n                    'local-floor',\r\n                    'bounded-floor',\r\n                    'layers',\r\n                    ...( sessionInit.optionalFeatures || [] )\r\n                ],\r\n            };\r\n\r\n            button.onmouseenter = function() {\r\n\r\n                button.style.opacity = '1.0';\r\n\r\n            };\r\n\r\n            button.onmouseleave = function() {\r\n\r\n                button.style.opacity = '0.5';\r\n\r\n            };\r\n\r\n            button.onclick = function() {\r\n\r\n                if ( currentSession === null ) {\r\n\r\n                    navigator.xr.requestSession( 'immersive-vr', sessionOptions ).then( onSessionStarted );\r\n\r\n                } else {\r\n\r\n                    currentSession.end();\r\n\r\n                    if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                        navigator.xr.offerSession( 'immersive-vr', sessionOptions )\r\n                            .then( onSessionStarted )\r\n                            .catch( ( err ) => {\r\n\r\n                                console.warn( err );\r\n\r\n                            } );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            };\r\n\r\n            if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                navigator.xr.offerSession( 'immersive-vr', sessionOptions )\r\n                    .then( onSessionStarted )\r\n                    .catch( ( err ) => {\r\n\r\n                        console.warn( err );\r\n\r\n                    } );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function disableButton() {\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'auto';\r\n            button.style.left = 'calc(50% - 75px)';\r\n            button.style.width = '150px';\r\n\r\n            button.onmouseenter = null;\r\n            button.onmouseleave = null;\r\n\r\n            button.onclick = null;\r\n\r\n        }\r\n\r\n        function showWebXRNotFound() {\r\n\r\n            disableButton();\r\n\r\n            button.textContent = 'VR NOT SUPPORTED';\r\n\r\n        }\r\n\r\n        function showVRNotAllowed( exception ) {\r\n\r\n            disableButton();\r\n\r\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\r\n\r\n            button.textContent = 'VR NOT ALLOWED';\r\n\r\n        }\r\n\r\n        function stylizeElement( element ) {\r\n\r\n            element.style.position = 'absolute';\r\n            element.style.bottom = '20px';\r\n            element.style.padding = '12px 6px';\r\n            element.style.border = '1px solid #fff';\r\n            element.style.borderRadius = '4px';\r\n            element.style.background = 'rgba(0,0,0,0.1)';\r\n            element.style.color = '#fff';\r\n            element.style.font = 'normal 13px sans-serif';\r\n            element.style.textAlign = 'center';\r\n            element.style.opacity = '0.5';\r\n            element.style.outline = 'none';\r\n            element.style.zIndex = '999';\r\n\r\n        }\r\n\r\n        if ( 'xr' in navigator ) {\r\n\r\n            button.id = 'VRButton';\r\n            button.style.display = 'none';\r\n\r\n            stylizeElement( button );\r\n\r\n            navigator.xr.isSessionSupported( 'immersive-vr' ).then( function( supported ) {\r\n\r\n                supported ? showEnterVR() : showWebXRNotFound();\r\n\r\n                if ( supported && VRButton.xrSessionIsGranted ) {\r\n\r\n                    button.click();\r\n\r\n                }\r\n\r\n            } ).catch( showVRNotAllowed );\r\n\r\n            return button;\r\n\r\n        } else {\r\n\r\n            const message = document.createElement( 'a' );\r\n\r\n            if ( window.isSecureContext === false ) {\r\n\r\n                message.href = document.location.href.replace( /^http:/, 'https:' );\r\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\r\n\r\n            } else {\r\n\r\n                message.href = 'https://immersiveweb.dev/';\r\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\r\n\r\n            }\r\n\r\n            message.style.left = 'calc(50% - 90px)';\r\n            message.style.width = '180px';\r\n            message.style.textDecoration = 'none';\r\n\r\n            stylizeElement( message );\r\n\r\n            return message;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    static registerSessionGrantedListener() {\r\n\r\n        if ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\r\n\r\n            // WebXRViewer (based on Firefox) has a bug where addEventListener\r\n            // throws a silent exception and aborts execution entirely.\r\n            if ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\r\n\r\n            navigator.xr.addEventListener( 'sessiongranted', () => {\r\n\r\n                VRButton.xrSessionIsGranted = true;\r\n\r\n            } );\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nVRButton.xrSessionIsGranted = false;\r\nVRButton.registerSessionGrantedListener();\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nexport class ARButton {\r\n\r\n    static createButton( renderer, sessionInit = {} ) {\r\n\r\n        const button = document.createElement( 'button' );\r\n\r\n        function showStartAR( /* device */ ) {\r\n\r\n            if ( sessionInit.domOverlay === undefined ) {\r\n\r\n                const overlay = document.createElement( 'div' );\r\n                overlay.style.display = 'none';\r\n                document.body.appendChild( overlay );\r\n\r\n                const svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' );\r\n                svg.setAttribute( 'width', 38 );\r\n                svg.setAttribute( 'height', 38 );\r\n                svg.style.position = 'absolute';\r\n                svg.style.right = '20px';\r\n                svg.style.top = '20px';\r\n                svg.addEventListener( 'click', function() {\r\n\r\n                    currentSession.end();\r\n\r\n                } );\r\n                overlay.appendChild( svg );\r\n\r\n                const path = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\r\n                path.setAttribute( 'd', 'M 12,12 L 28,28 M 28,12 12,28' );\r\n                path.setAttribute( 'stroke', '#fff' );\r\n                path.setAttribute( 'stroke-width', 2 );\r\n                svg.appendChild( path );\r\n\r\n                if ( sessionInit.optionalFeatures === undefined ) {\r\n\r\n                    sessionInit.optionalFeatures = [];\r\n\r\n                }\r\n\r\n                sessionInit.optionalFeatures.push( 'dom-overlay' );\r\n                sessionInit.domOverlay = { root: overlay };\r\n\r\n            }\r\n\r\n            //\r\n\r\n            let currentSession = null;\r\n\r\n            async function onSessionStarted( session ) {\r\n\r\n                session.addEventListener( 'end', onSessionEnded );\r\n\r\n                renderer.xr.setReferenceSpaceType( 'local' );\r\n\r\n                await renderer.xr.setSession( session );\r\n\r\n                button.textContent = 'STOP AR';\r\n                sessionInit.domOverlay.root.style.display = '';\r\n\r\n                currentSession = session;\r\n\r\n            }\r\n\r\n            function onSessionEnded( /* event */ ) {\r\n\r\n                currentSession.removeEventListener( 'end', onSessionEnded );\r\n\r\n                button.textContent = 'START AR';\r\n                sessionInit.domOverlay.root.style.display = 'none';\r\n\r\n                currentSession = null;\r\n\r\n            }\r\n\r\n            //\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'pointer';\r\n            button.style.left = 'calc(50% - 50px)';\r\n            button.style.width = '100px';\r\n\r\n            button.textContent = 'START AR';\r\n\r\n            button.onmouseenter = function() {\r\n\r\n                button.style.opacity = '1.0';\r\n\r\n            };\r\n\r\n            button.onmouseleave = function() {\r\n\r\n                button.style.opacity = '0.5';\r\n\r\n            };\r\n\r\n            button.onclick = function() {\r\n\r\n                if ( currentSession === null ) {\r\n\r\n                    navigator.xr.requestSession( 'immersive-ar', sessionInit ).then( onSessionStarted );\r\n\r\n                } else {\r\n\r\n                    currentSession.end();\r\n\r\n                    if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                        navigator.xr.offerSession( 'immersive-ar', sessionInit )\r\n                            .then( onSessionStarted )\r\n                            .catch( ( err ) => {\r\n\r\n                                console.warn( err );\r\n\r\n                            } );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            };\r\n\r\n            if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                navigator.xr.offerSession( 'immersive-ar', sessionInit )\r\n                    .then( onSessionStarted )\r\n                    .catch( ( err ) => {\r\n\r\n                        console.warn( err );\r\n\r\n                    } );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function disableButton() {\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'auto';\r\n            button.style.left = 'calc(50% - 75px)';\r\n            button.style.width = '150px';\r\n\r\n            button.onmouseenter = null;\r\n            button.onmouseleave = null;\r\n\r\n            button.onclick = null;\r\n\r\n        }\r\n\r\n        function showARNotSupported() {\r\n\r\n            disableButton();\r\n\r\n            button.textContent = 'AR NOT SUPPORTED';\r\n\r\n        }\r\n\r\n        function showARNotAllowed( exception ) {\r\n\r\n            disableButton();\r\n\r\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\r\n\r\n            button.textContent = 'AR NOT ALLOWED';\r\n\r\n        }\r\n\r\n        function stylizeElement( element ) {\r\n\r\n            element.style.position = 'absolute';\r\n            element.style.bottom = '20px';\r\n            element.style.padding = '12px 6px';\r\n            element.style.border = '1px solid #fff';\r\n            element.style.borderRadius = '4px';\r\n            element.style.background = 'rgba(0,0,0,0.1)';\r\n            element.style.color = '#fff';\r\n            element.style.font = 'normal 13px sans-serif';\r\n            element.style.textAlign = 'center';\r\n            element.style.opacity = '0.5';\r\n            element.style.outline = 'none';\r\n            element.style.zIndex = '999';\r\n\r\n        }\r\n\r\n        if ( 'xr' in navigator ) {\r\n\r\n            button.id = 'ARButton';\r\n            button.style.display = 'none';\r\n\r\n            stylizeElement( button );\r\n\r\n            navigator.xr.isSessionSupported( 'immersive-ar' ).then( function( supported ) {\r\n\r\n                supported ? showStartAR() : showARNotSupported();\r\n\r\n            } ).catch( showARNotAllowed );\r\n\r\n            return button;\r\n\r\n        } else {\r\n\r\n            const message = document.createElement( 'a' );\r\n\r\n            if ( window.isSecureContext === false ) {\r\n\r\n                message.href = document.location.href.replace( /^http:/, 'https:' );\r\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\r\n\r\n            } else {\r\n\r\n                message.href = 'https://immersiveweb.dev/';\r\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\r\n\r\n            }\r\n\r\n            message.style.left = 'calc(50% - 90px)';\r\n            message.style.width = '180px';\r\n            message.style.textDecoration = 'none';\r\n\r\n            stylizeElement( message );\r\n\r\n            return message;\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","export const RenderMode = {\r\n    Always: 0,\r\n    OnChange: 1,\r\n    Never: 2\r\n};\r\n","import * as THREE from 'three';\r\nimport { OrbitControls } from './OrbitControls.js';\r\nimport { PlyLoader } from './loaders/ply/PlyLoader.js';\r\nimport { SplatLoader } from './loaders/splat/SplatLoader.js';\r\nimport { KSplatLoader } from './loaders/ksplat/KSplatLoader.js';\r\nimport { sceneFormatFromPath } from './loaders/Utils.js';\r\nimport { LoadingSpinner } from './ui/LoadingSpinner.js';\r\nimport { LoadingProgressBar } from './ui/LoadingProgressBar.js';\r\nimport { InfoPanel } from './ui/InfoPanel.js';\r\nimport { SceneHelper } from './SceneHelper.js';\r\nimport { Raycaster } from './raycaster/Raycaster.js';\r\nimport { SplatMesh } from './splatmesh/SplatMesh.js';\r\nimport { createSortWorker } from './worker/SortWorker.js';\r\nimport { Constants } from './Constants.js';\r\nimport { getCurrentTime, isIOS, getIOSSemever, clamp } from './Util.js';\r\nimport { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\r\nimport { SceneFormat } from './loaders/SceneFormat.js';\r\nimport { WebXRMode } from './webxr/WebXRMode.js';\r\nimport { VRButton } from './webxr/VRButton.js';\r\nimport { ARButton } from './webxr/ARButton.js';\r\nimport { delayedExecute, abortablePromiseWithExtractedComponents } from './Util.js';\r\nimport { LoaderStatus } from './loaders/LoaderStatus.js';\r\nimport { DirectLoadError } from './loaders/DirectLoadError.js';\r\nimport { RenderMode } from './RenderMode.js';\r\nimport { LogLevel } from './LogLevel.js';\r\nimport { SceneRevealMode } from './SceneRevealMode.js';\r\nimport { SplatRenderMode } from './SplatRenderMode.js';\r\n\r\nconst THREE_CAMERA_FOV = 50;\r\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\r\nconst MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER = 1500000;\r\nconst FOCUS_MARKER_FADE_IN_SPEED = 10.0;\r\nconst FOCUS_MARKER_FADE_OUT_SPEED = 2.5;\r\nconst CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION = 60;\r\n\r\n/**\r\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\r\n * that performs the sort for its splats.\r\n */\r\nexport class Viewer {\r\n\r\n    constructor(options = {}) {\r\n\r\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\r\n        // when the viewer uses its own camera).\r\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\r\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\r\n\r\n        // The camera's initial position (only used when the viewer uses its own camera).\r\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\r\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\r\n\r\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\r\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\r\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\r\n\r\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\r\n        this.dropInMode = options.dropInMode || false;\r\n\r\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\r\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\r\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\r\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\r\n\r\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\r\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\r\n        this.useBuiltInControls = options.useBuiltInControls;\r\n\r\n        // parent element of the Three.js renderer canvas\r\n        this.rootElement = options.rootElement;\r\n\r\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\r\n        // at a small cost to visual quality\r\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\r\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : (window.devicePixelRatio || 1);\r\n\r\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\r\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU || false;\r\n\r\n        // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\r\n        this.threeScene = options.threeScene;\r\n        // Allows for usage of an external Three.js renderer\r\n        this.renderer = options.renderer;\r\n        // Allows for usage of an external Three.js camera\r\n        this.camera = options.camera;\r\n\r\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\r\n        // Currently this means pre-computing splat distances from the camera on the GPU\r\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort || false;\r\n\r\n        // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\r\n        // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\r\n        // overflow in larger scenes.\r\n        if (options.integerBasedSort === undefined || options.integerBasedSort === null) {\r\n            options.integerBasedSort = true;\r\n        }\r\n        this.integerBasedSort = options.integerBasedSort;\r\n\r\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\r\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\r\n        // https://web.dev/articles/cross-origin-isolation-guide\r\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\r\n        // loading the application. More information is available in the README.\r\n        if (options.sharedMemoryForWorkers === undefined || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = true;\r\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\r\n\r\n        // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\r\n        // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\r\n        // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\r\n        // SplatMesh.getSplatCenter() by default.\r\n        this.dynamicScene = !!options.dynamicScene;\r\n\r\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\r\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\r\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\r\n        // https://github.com/nerfstudio-project/gsplat/pull/117\r\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\r\n        this.antialiased = options.antialiased || false;\r\n\r\n        // This constant is added to the projected 2D screen-space splat scales\r\n        this.kernel2DSize = (options.kernel2DSize === undefined) ? 0.3 : options.kernel2DSize;\r\n\r\n        this.webXRMode = options.webXRMode || WebXRMode.None;\r\n        if (this.webXRMode !== WebXRMode.None) {\r\n            this.gpuAcceleratedSort = false;\r\n        }\r\n        this.webXRActive = false;\r\n\r\n        this.webXRSessionInit = options.webXRSessionInit || {};\r\n\r\n        // if 'renderMode' is RenderMode.Always, then the viewer will rrender the scene on every update. If it is RenderMode.OnChange,\r\n        // it will only render when something in the scene has changed.\r\n        this.renderMode = options.renderMode || RenderMode.Always;\r\n\r\n        // SceneRevealMode.Default results in a nice, slow fade-in effect for progressively loaded scenes,\r\n        // and a fast fade-in for non progressively loaded scenes.\r\n        // SceneRevealMode.Gradual will force a slow fade-in for all scenes.\r\n        // SceneRevealMode.Instant will force all loaded scene data to be immediately visible.\r\n        this.sceneRevealMode = options.sceneRevealMode || SceneRevealMode.Default;\r\n\r\n        // Hacky, experimental, non-scientific parameter for tweaking focal length related calculations. For scenes with very\r\n        // small gaussians, small details, and small dimensions -- increasing this value can help improve visual quality.\r\n        this.focalAdjustment = options.focalAdjustment || 1.0;\r\n\r\n        // Specify the maximum screen-space splat size, can help deal with large splats that get too unwieldy\r\n        this.maxScreenSpaceSplatSize = options.maxScreenSpaceSplatSize || 1024;\r\n\r\n        // The verbosity of console logging\r\n        this.logLevel = options.logLevel || LogLevel.None;\r\n\r\n        // Degree of spherical harmonics to utilize in rendering splats (assuming the data is present in the splat scene).\r\n        // Valid values are 0 - 2. Default value is 0.\r\n        this.sphericalHarmonicsDegree = options.sphericalHarmonicsDegree || 0;\r\n\r\n        // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\r\n        // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\r\n        // that are enabled by the 'dynamicScene' parameter.\r\n        this.enableOptionalEffects = options.enableOptionalEffects || false;\r\n\r\n        // Enable the usage of SIMD WebAssembly instructions for the splat sort\r\n        if (options.enableSIMDInSort === undefined || options.enableSIMDInSort === null) options.enableSIMDInSort = true;\r\n        this.enableSIMDInSort = options.enableSIMDInSort;\r\n\r\n        // Level to compress non KSPLAT files when loading them for direct rendering\r\n        if (options.inMemoryCompressionLevel === undefined || options.inMemoryCompressionLevel === null) {\r\n            options.inMemoryCompressionLevel = 0;\r\n        }\r\n        this.inMemoryCompressionLevel = options.inMemoryCompressionLevel;\r\n\r\n        // Reorder splat data in memory after loading is complete to optimize cache utilization. Default is true.\r\n        // Does not apply if splat scene is progressively loaded.\r\n        if (options.optimizeSplatData === undefined || options.optimizeSplatData === null) {\r\n            options.optimizeSplatData = true;\r\n        }\r\n        this.optimizeSplatData = options.optimizeSplatData;\r\n\r\n        // When true, the intermediate splat data that is the result of decompressing splat bufffer(s) and is used to\r\n        // populate the data textures will be freed. This will reduces memory usage, but if that data needs to be modified\r\n        // it will need to be re-populated from the splat buffer(s). Default is false.\r\n        if (options.freeIntermediateSplatData === undefined || options.freeIntermediateSplatData === null) {\r\n            options.freeIntermediateSplatData = false;\r\n        }\r\n        this.freeIntermediateSplatData = options.freeIntermediateSplatData;\r\n\r\n        // It appears that for certain iOS versions, special actions need to be taken with the\r\n        // usage of SIMD instructions and shared memory\r\n        if (isIOS()) {\r\n            const semver = getIOSSemever();\r\n            if (semver.major < 17) {\r\n                this.enableSIMDInSort = false;\r\n            }\r\n            if (semver.major < 16) {\r\n                this.sharedMemoryForWorkers = false;\r\n            }\r\n        }\r\n\r\n        // Tell the viewer how to render the splats\r\n        if (options.splatRenderMode === undefined || options.splatRenderMode === null) {\r\n            options.splatRenderMode = SplatRenderMode.ThreeD;\r\n        }\r\n        this.splatRenderMode = options.splatRenderMode;\r\n\r\n        // Customize the speed at which the scene is revealed\r\n        this.sceneFadeInRateMultiplier = options.sceneFadeInRateMultiplier || 1.0;\r\n\r\n        // Set the range for the depth map for the counting sort used to sort the splats\r\n        this.splatSortDistanceMapPrecision = options.splatSortDistanceMapPrecision || Constants.DefaultSplatSortDistanceMapPrecision;\r\n        const maxPrecision = this.integerBasedSort ? 20 : 24;\r\n        this.splatSortDistanceMapPrecision = clamp(this.splatSortDistanceMapPrecision, 10, maxPrecision);\r\n\r\n        this.onSplatMeshChangedCallback = null;\r\n        this.createSplatMesh();\r\n\r\n        this.controls = null;\r\n        this.perspectiveControls = null;\r\n        this.orthographicControls = null;\r\n\r\n        this.orthographicCamera = null;\r\n        this.perspectiveCamera = null;\r\n\r\n        this.showMeshCursor = false;\r\n        this.showControlPlane = false;\r\n        this.showInfo = false;\r\n\r\n        this.sceneHelper = null;\r\n\r\n        this.sortWorker = null;\r\n        this.sortRunning = false;\r\n        this.splatRenderCount = 0;\r\n        this.splatSortCount = 0;\r\n        this.lastSplatSortCount = 0;\r\n        this.sortWorkerIndexesToSort = null;\r\n        this.sortWorkerSortedIndexes = null;\r\n        this.sortWorkerPrecomputedDistances = null;\r\n        this.sortWorkerTransforms = null;\r\n        this.preSortMessages = [];\r\n        this.runAfterNextSort = [];\r\n\r\n        this.selfDrivenModeRunning = false;\r\n        this.splatRenderReady = false;\r\n\r\n        this.raycaster = new Raycaster();\r\n\r\n        this.infoPanel = null;\r\n\r\n        this.startInOrthographicMode = false;\r\n\r\n        this.currentFPS = 0;\r\n        this.lastSortTime = 0;\r\n        this.consecutiveRenderFrames = 0;\r\n\r\n        this.previousCameraTarget = new THREE.Vector3();\r\n        this.nextCameraTarget = new THREE.Vector3();\r\n\r\n        this.mousePosition = new THREE.Vector2();\r\n        this.mouseDownPosition = new THREE.Vector2();\r\n        this.mouseDownTime = null;\r\n\r\n        this.resizeObserver = null;\r\n        this.mouseMoveListener = null;\r\n        this.mouseDownListener = null;\r\n        this.mouseUpListener = null;\r\n        this.keyDownListener = null;\r\n\r\n        this.sortPromise = null;\r\n        this.sortPromiseResolver = null;\r\n        this.splatSceneDownloadPromises = {};\r\n        this.splatSceneDownloadAndBuildPromise = null;\r\n        this.splatSceneRemovalPromise = null;\r\n\r\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\r\n        this.loadingSpinner.hide();\r\n        this.loadingProgressBar = new LoadingProgressBar(this.rootElement || document.body);\r\n        this.loadingProgressBar.hide();\r\n        this.infoPanel = new InfoPanel(this.rootElement || document.body);\r\n        this.infoPanel.hide();\r\n\r\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\r\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\r\n\r\n        this.initialized = false;\r\n        this.disposing = false;\r\n        this.disposed = false;\r\n        this.disposePromise = null;\r\n        if (!this.dropInMode) this.init();\r\n    }\r\n\r\n    createSplatMesh() {\r\n        this.splatMesh = new SplatMesh(this.splatRenderMode, this.dynamicScene, this.enableOptionalEffects,\r\n                                       this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio, this.gpuAcceleratedSort,\r\n                                       this.integerBasedSort, this.antialiased, this.maxScreenSpaceSplatSize, this.logLevel,\r\n                                       this.sphericalHarmonicsDegree, this.sceneFadeInRateMultiplier, this.kernel2DSize);\r\n        this.splatMesh.frustumCulled = false;\r\n        if (this.onSplatMeshChangedCallback) this.onSplatMeshChangedCallback();\r\n    }\r\n\r\n    init() {\r\n\r\n        if (this.initialized) return;\r\n\r\n        if (!this.rootElement) {\r\n            if (!this.usingExternalRenderer) {\r\n                this.rootElement = document.createElement('div');\r\n                this.rootElement.style.width = '100%';\r\n                this.rootElement.style.height = '100%';\r\n                this.rootElement.style.position = 'absolute';\r\n                document.body.appendChild(this.rootElement);\r\n            } else {\r\n                this.rootElement = this.renderer.domElement || document.body;\r\n            }\r\n        }\r\n\r\n        this.setupCamera();\r\n        this.setupRenderer();\r\n        this.setupWebXR(this.webXRSessionInit);\r\n        this.setupControls();\r\n        this.setupEventHandlers();\r\n\r\n        this.threeScene = this.threeScene || new THREE.Scene();\r\n        this.sceneHelper = new SceneHelper(this.threeScene);\r\n        this.sceneHelper.setupMeshCursor();\r\n        this.sceneHelper.setupFocusMarker();\r\n        this.sceneHelper.setupControlPlane();\r\n\r\n        this.loadingProgressBar.setContainer(this.rootElement);\r\n        this.loadingSpinner.setContainer(this.rootElement);\r\n        this.infoPanel.setContainer(this.rootElement);\r\n\r\n        this.initialized = true;\r\n    }\r\n\r\n    setupCamera() {\r\n        if (!this.usingExternalCamera) {\r\n            const renderDimensions = new THREE.Vector2();\r\n            this.getRenderDimensions(renderDimensions);\r\n\r\n            this.perspectiveCamera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 1000);\r\n            this.orthographicCamera = new THREE.OrthographicCamera(renderDimensions.x / -2, renderDimensions.x / 2,\r\n                                                                   renderDimensions.y / 2, renderDimensions.y / -2, 0.1, 1000 );\r\n            this.camera = this.startInOrthographicMode ? this.orthographicCamera : this.perspectiveCamera;\r\n            this.camera.position.copy(this.initialCameraPosition);\r\n            this.camera.up.copy(this.cameraUp).normalize();\r\n            this.camera.lookAt(this.initialCameraLookAt);\r\n        }\r\n    }\r\n\r\n    setupRenderer() {\r\n        if (!this.usingExternalRenderer) {\r\n            const renderDimensions = new THREE.Vector2();\r\n            this.getRenderDimensions(renderDimensions);\r\n\r\n            this.renderer = new THREE.WebGLRenderer({\r\n                antialias: false,\r\n                precision: 'highp'\r\n            });\r\n            this.renderer.setPixelRatio(this.devicePixelRatio);\r\n            this.renderer.autoClear = true;\r\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\r\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n\r\n            this.resizeObserver = new ResizeObserver(() => {\r\n                this.getRenderDimensions(renderDimensions);\r\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n                this.forceRenderNextFrame();\r\n            });\r\n            this.resizeObserver.observe(this.rootElement);\r\n            this.rootElement.appendChild(this.renderer.domElement);\r\n        }\r\n\r\n    }\r\n\r\n    setupWebXR(webXRSessionInit) {\r\n        if (this.webXRMode) {\r\n            if (this.webXRMode === WebXRMode.VR) {\r\n                this.rootElement.appendChild(VRButton.createButton(this.renderer, webXRSessionInit));\r\n            } else if (this.webXRMode === WebXRMode.AR) {\r\n                this.rootElement.appendChild(ARButton.createButton(this.renderer, webXRSessionInit));\r\n            }\r\n            this.renderer.xr.addEventListener('sessionstart', (e) => {\r\n                this.webXRActive = true;\r\n            });\r\n            this.renderer.xr.addEventListener('sessionend', (e) => {\r\n                this.webXRActive = false;\r\n            });\r\n            this.renderer.xr.enabled = true;\r\n            this.camera.position.copy(this.initialCameraPosition);\r\n            this.camera.up.copy(this.cameraUp).normalize();\r\n            this.camera.lookAt(this.initialCameraLookAt);\r\n        }\r\n    }\r\n\r\n    setupControls() {\r\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\r\n            if (!this.usingExternalCamera) {\r\n                this.perspectiveControls = new OrbitControls(this.perspectiveCamera, this.renderer.domElement);\r\n                this.orthographicControls = new OrbitControls(this.orthographicCamera, this.renderer.domElement);\r\n            } else {\r\n                if (this.camera.isOrthographicCamera) {\r\n                    this.orthographicControls = new OrbitControls(this.camera, this.renderer.domElement);\r\n                } else {\r\n                    this.perspectiveControls = new OrbitControls(this.camera, this.renderer.domElement);\r\n                }\r\n            }\r\n            for (let controls of [this.orthographicControls, this.perspectiveControls,]) {\r\n                if (controls) {\r\n                    controls.listenToKeyEvents(window);\r\n                    controls.rotateSpeed = 0.5;\r\n                    controls.maxPolarAngle = Math.PI * .75;\r\n                    controls.minPolarAngle = 0.1;\r\n                    controls.enableDamping = true;\r\n                    controls.dampingFactor = 0.05;\r\n                    controls.target.copy(this.initialCameraLookAt);\r\n                    controls.update();\r\n                }\r\n            }\r\n            this.controls = this.camera.isOrthographicCamera ? this.orthographicControls : this.perspectiveControls;\r\n            this.controls.update();\r\n        }\r\n    }\r\n\r\n    setupEventHandlers() {\r\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\r\n            this.mouseMoveListener = this.onMouseMove.bind(this);\r\n            this.renderer.domElement.addEventListener('pointermove', this.mouseMoveListener, false);\r\n            this.mouseDownListener = this.onMouseDown.bind(this);\r\n            this.renderer.domElement.addEventListener('pointerdown', this.mouseDownListener, false);\r\n            this.mouseUpListener = this.onMouseUp.bind(this);\r\n            this.renderer.domElement.addEventListener('pointerup', this.mouseUpListener, false);\r\n            this.keyDownListener = this.onKeyDown.bind(this);\r\n            window.addEventListener('keydown', this.keyDownListener, false);\r\n        }\r\n    }\r\n\r\n    removeEventHandlers() {\r\n        if (this.useBuiltInControls) {\r\n            this.renderer.domElement.removeEventListener('pointermove', this.mouseMoveListener);\r\n            this.mouseMoveListener = null;\r\n            this.renderer.domElement.removeEventListener('pointerdown', this.mouseDownListener);\r\n            this.mouseDownListener = null;\r\n            this.renderer.domElement.removeEventListener('pointerup', this.mouseUpListener);\r\n            this.mouseUpListener = null;\r\n            window.removeEventListener('keydown', this.keyDownListener);\r\n            this.keyDownListener = null;\r\n        }\r\n    }\r\n\r\n    setRenderMode(renderMode) {\r\n        this.renderMode = renderMode;\r\n    }\r\n\r\n    setActiveSphericalHarmonicsDegrees(activeSphericalHarmonicsDegrees) {\r\n        this.splatMesh.material.uniforms.sphericalHarmonicsDegree.value = activeSphericalHarmonicsDegrees;\r\n        this.splatMesh.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    onSplatMeshChanged(callback) {\r\n        this.onSplatMeshChangedCallback = callback;\r\n    }\r\n\r\n    onKeyDown = function() {\r\n\r\n        const forward = new THREE.Vector3();\r\n        const tempMatrixLeft = new THREE.Matrix4();\r\n        const tempMatrixRight = new THREE.Matrix4();\r\n\r\n        return function(e) {\r\n            forward.set(0, 0, -1);\r\n            forward.transformDirection(this.camera.matrixWorld);\r\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\r\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\r\n            switch (e.code) {\r\n                case 'KeyG':\r\n                    this.focalAdjustment += 0.02;\r\n                    this.forceRenderNextFrame();\r\n                break;\r\n                case 'KeyF':\r\n                    this.focalAdjustment -= 0.02;\r\n                    this.forceRenderNextFrame();\r\n                break;\r\n                case 'ArrowLeft':\r\n                    this.camera.up.transformDirection(tempMatrixLeft);\r\n                break;\r\n                case 'ArrowRight':\r\n                    this.camera.up.transformDirection(tempMatrixRight);\r\n                break;\r\n                case 'KeyC':\r\n                    this.showMeshCursor = !this.showMeshCursor;\r\n                break;\r\n                case 'KeyU':\r\n                    this.showControlPlane = !this.showControlPlane;\r\n                break;\r\n                case 'KeyI':\r\n                    this.showInfo = !this.showInfo;\r\n                    if (this.showInfo) {\r\n                        this.infoPanel.show();\r\n                    } else {\r\n                        this.infoPanel.hide();\r\n                    }\r\n                break;\r\n                case 'KeyO':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.setOrthographicMode(!this.camera.isOrthographicCamera);\r\n                    }\r\n                break;\r\n                case 'KeyP':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.splatMesh.setPointCloudModeEnabled(!this.splatMesh.getPointCloudModeEnabled());\r\n                    }\r\n                break;\r\n                case 'Equal':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.splatMesh.setSplatScale(this.splatMesh.getSplatScale() + 0.05);\r\n                    }\r\n                break;\r\n                case 'Minus':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.splatMesh.setSplatScale(Math.max(this.splatMesh.getSplatScale() - 0.05, 0.0));\r\n                    }\r\n                break;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    onMouseMove(mouse) {\r\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n    }\r\n\r\n    onMouseDown() {\r\n        this.mouseDownPosition.copy(this.mousePosition);\r\n        this.mouseDownTime = getCurrentTime();\r\n    }\r\n\r\n    onMouseUp = function() {\r\n\r\n        const clickOffset = new THREE.Vector2();\r\n\r\n        return function(mouse) {\r\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\r\n            const mouseUpTime = getCurrentTime();\r\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\r\n            if (wasClick) {\r\n                this.onMouseClick(mouse);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    onMouseClick(mouse) {\r\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n        this.checkForFocalPointChange();\r\n    }\r\n\r\n    checkForFocalPointChange = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        const toNewFocalPoint = new THREE.Vector3();\r\n        const outHits = [];\r\n\r\n        return function() {\r\n            if (!this.transitioningCameraTarget) {\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    const hit = outHits[0];\r\n                    const intersectionPoint = hit.origin;\r\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\r\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\r\n                        this.previousCameraTarget.copy(this.controls.target);\r\n                        this.nextCameraTarget.copy(intersectionPoint);\r\n                        this.transitioningCameraTarget = true;\r\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getRenderDimensions(outDimensions) {\r\n        if (this.rootElement) {\r\n            outDimensions.x = this.rootElement.offsetWidth;\r\n            outDimensions.y = this.rootElement.offsetHeight;\r\n        } else {\r\n            this.renderer.getSize(outDimensions);\r\n        }\r\n    }\r\n\r\n    setOrthographicMode(orthographicMode) {\r\n        if (orthographicMode === this.camera.isOrthographicCamera) return;\r\n        const fromCamera = this.camera;\r\n        const toCamera = orthographicMode ? this.orthographicCamera : this.perspectiveCamera;\r\n        toCamera.position.copy(fromCamera.position);\r\n        toCamera.up.copy(fromCamera.up);\r\n        toCamera.rotation.copy(fromCamera.rotation);\r\n        toCamera.quaternion.copy(fromCamera.quaternion);\r\n        toCamera.matrix.copy(fromCamera.matrix);\r\n        this.camera = toCamera;\r\n\r\n        if (this.controls) {\r\n\r\n            const resetControls = (controls) => {\r\n                controls.saveState();\r\n                controls.reset();\r\n            };\r\n\r\n            const fromControls = this.controls;\r\n            const toControls = orthographicMode ? this.orthographicControls : this.perspectiveControls;\r\n\r\n            resetControls(toControls);\r\n            resetControls(fromControls);\r\n\r\n            toControls.target.copy(fromControls.target);\r\n            if (orthographicMode) {\r\n                Viewer.setCameraZoomFromPosition(toCamera, fromCamera, fromControls);\r\n            } else {\r\n                Viewer.setCameraPositionFromZoom(toCamera, fromCamera, toControls);\r\n            }\r\n            this.controls = toControls;\r\n            this.camera.lookAt(this.controls.target);\r\n        }\r\n    }\r\n\r\n    static setCameraPositionFromZoom = function() {\r\n\r\n        const tempVector = new THREE.Vector3();\r\n\r\n        return function(positionCamera, zoomedCamera, controls) {\r\n            const toLookAtDistance = 1 / (zoomedCamera.zoom * 0.001);\r\n            tempVector.copy(controls.target).sub(positionCamera.position).normalize().multiplyScalar(toLookAtDistance).negate();\r\n            positionCamera.position.copy(controls.target).add(tempVector);\r\n        };\r\n\r\n    }();\r\n\r\n\r\n    static setCameraZoomFromPosition = function() {\r\n\r\n        const tempVector = new THREE.Vector3();\r\n\r\n        return function(zoomCamera, positionZamera, controls) {\r\n            const toLookAtDistance = tempVector.copy(controls.target).sub(positionZamera.position).length();\r\n            zoomCamera.zoom = 1 / (toLookAtDistance * .001);\r\n        };\r\n\r\n    }();\r\n\r\n    updateSplatMesh = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.splatMesh) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            if (splatCount > 0) {\r\n                this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode);\r\n                this.splatMesh.updateTransforms();\r\n                this.getRenderDimensions(renderDimensions);\r\n                const focalLengthX = this.camera.projectionMatrix.elements[0] * 0.5 *\r\n                                     this.devicePixelRatio * renderDimensions.x;\r\n                const focalLengthY = this.camera.projectionMatrix.elements[5] * 0.5 *\r\n                                     this.devicePixelRatio * renderDimensions.y;\r\n\r\n                const focalMultiplier = this.camera.isOrthographicCamera ? (1.0 / this.devicePixelRatio) : 1.0;\r\n                const focalAdjustment = this.focalAdjustment * focalMultiplier;\r\n                const inverseFocalAdjustment = 1.0 / focalAdjustment;\r\n\r\n                this.adjustForWebXRStereo(renderDimensions);\r\n                this.splatMesh.updateUniforms(renderDimensions, focalLengthX * focalAdjustment, focalLengthY * focalAdjustment,\r\n                                              this.camera.isOrthographicCamera, this.camera.zoom || 1.0, inverseFocalAdjustment);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    adjustForWebXRStereo(renderDimensions) {\r\n        // TODO: Figure out a less hacky way to determine if stereo rendering is active\r\n        if (this.camera && this.webXRActive) {\r\n            const xrCamera = this.renderer.xr.getCamera();\r\n            const xrCameraProj00 = xrCamera.projectionMatrix.elements[0];\r\n            const cameraProj00 = this.camera.projectionMatrix.elements[0];\r\n            renderDimensions.x *= (cameraProj00 / xrCameraProj00);\r\n        }\r\n    }\r\n\r\n    isLoadingOrUnloading() {\r\n        return Object.keys(this.splatSceneDownloadPromises).length > 0 || this.splatSceneDownloadAndBuildPromise !== null ||\r\n                           this.splatSceneRemovalPromise !== null;\r\n    }\r\n\r\n    isDisposingOrDisposed() {\r\n        return this.disposing || this.disposed;\r\n    }\r\n\r\n    addSplatSceneDownloadPromise(promise) {\r\n        this.splatSceneDownloadPromises[promise.id] = promise;\r\n    }\r\n\r\n    removeSplatSceneDownloadPromise(promise) {\r\n        delete this.splatSceneDownloadPromises[promise.id];\r\n    }\r\n\r\n    setSplatSceneDownloadAndBuildPromise(promise) {\r\n        this.splatSceneDownloadAndBuildPromise = promise;\r\n    }\r\n\r\n    clearSplatSceneDownloadAndBuildPromise() {\r\n        this.splatSceneDownloadAndBuildPromise = null;\r\n    }\r\n\r\n    /**\r\n     * Add a splat scene to the viewer and display any loading UI if appropriate.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {object} options {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         onProgress:                 Function to be called as file data are received, or other processing occurs\r\n     *\r\n     *         headers:                    Optional HTTP headers to be sent along with splat requests\r\n     * }\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScene(path, options = {}) {\r\n\r\n        if (this.isLoadingOrUnloading()) {\r\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\r\n        }\r\n\r\n        if (this.isDisposingOrDisposed()) {\r\n            throw new Error('Cannot add splat scene after dispose() is called.');\r\n        }\r\n\r\n        if (options.progressiveLoad && this.splatMesh.scenes && this.splatMesh.scenes.length > 0) {\r\n            console.log('addSplatScene(): \"progressiveLoad\" option ignore because there are multiple splat scenes');\r\n            options.progressiveLoad = false;\r\n        }\r\n\r\n        const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(path);\r\n        const progressiveLoad = Viewer.isProgressivelyLoadable(format) && options.progressiveLoad;\r\n        const showLoadingUI = (options.showLoadingUI !== undefined && options.showLoadingUI !== null) ? options.showLoadingUI : true;\r\n\r\n        let loadingUITaskId = null;\r\n        if (showLoadingUI) {\r\n            this.loadingSpinner.removeAllTasks();\r\n            loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\r\n        }\r\n        const hideLoadingUI = () => {\r\n            this.loadingProgressBar.hide();\r\n            this.loadingSpinner.removeAllTasks();\r\n        };\r\n\r\n        const onProgressUIUpdate = (percentComplete, percentCompleteLabel, loaderStatus) => {\r\n            if (showLoadingUI) {\r\n                if (loaderStatus === LoaderStatus.Downloading) {\r\n                    if (percentComplete == 100) {\r\n                        this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Download complete!');\r\n                    } else {\r\n                        if (progressiveLoad) {\r\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Downloading splats...');\r\n                        } else {\r\n                            const suffix = percentCompleteLabel ? `: ${percentCompleteLabel}` : `...`;\r\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, `Downloading${suffix}`);\r\n                        }\r\n                    }\r\n                } else if (loaderStatus === LoaderStatus.Processing) {\r\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Processing splats...');\r\n                }\r\n            }\r\n        };\r\n\r\n        let downloadDone = false;\r\n        let downloadedPercentage = 0;\r\n        const splatBuffersAddedUIUpdate = (firstBuild, finalBuild) => {\r\n            if (showLoadingUI) {\r\n                if (firstBuild && progressiveLoad || finalBuild && !progressiveLoad) {\r\n                    this.loadingSpinner.removeTask(loadingUITaskId);\r\n                    if (!finalBuild && !downloadDone) this.loadingProgressBar.show();\r\n                }\r\n                if (progressiveLoad) {\r\n                    if (finalBuild) {\r\n                        downloadDone = true;\r\n                        this.loadingProgressBar.hide();\r\n                    } else {\r\n                        this.loadingProgressBar.setProgress(downloadedPercentage);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const onProgress = (percentComplete, percentCompleteLabel, loaderStatus) => {\r\n            downloadedPercentage = percentComplete;\r\n            onProgressUIUpdate(percentComplete, percentCompleteLabel, loaderStatus);\r\n            if (options.onProgress) options.onProgress(percentComplete, percentCompleteLabel, loaderStatus);\r\n        };\r\n\r\n        const buildSection = (splatBuffer, firstBuild, finalBuild) => {\r\n            if (!progressiveLoad && options.onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\r\n            const addSplatBufferOptions = {\r\n                'rotation': options.rotation || options.orientation,\r\n                'position': options.position,\r\n                'scale': options.scale,\r\n                'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\r\n            };\r\n            return this.addSplatBuffers([splatBuffer], [addSplatBufferOptions],\r\n                                         finalBuild, firstBuild && showLoadingUI, showLoadingUI,\r\n                                         progressiveLoad, progressiveLoad).then(() => {\r\n                if (!progressiveLoad && options.onProgress) options.onProgress(100, '100%', LoaderStatus.Processing);\r\n                splatBuffersAddedUIUpdate(firstBuild, finalBuild);\r\n            });\r\n        };\r\n\r\n        const loadFunc = progressiveLoad ? this.downloadAndBuildSingleSplatSceneProgressiveLoad.bind(this) :\r\n                                           this.downloadAndBuildSingleSplatSceneStandardLoad.bind(this);\r\n        return loadFunc(path, format, options.splatAlphaRemovalThreshold, buildSection.bind(this),\r\n                        onProgress, hideLoadingUI.bind(this), options.headers);\r\n    }\r\n\r\n    /**\r\n     * Download a single splat scene, convert to splat buffer and then rebuild the viewer's splat mesh\r\n     * by calling 'buildFunc' -- all before displaying the scene. Also sets/clears relevant instance synchronization objects,\r\n     * and calls appropriate functions on success or failure.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {SceneFormat} format Format of the splat scene file\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\r\n     * @param {function} buildFunc Function to build the viewer's splat mesh with the downloaded splat buffer\r\n     * @param {function} onProgress Function to be called as file data are received, or other processing occurs\r\n     * @param {function} onException Function to be called when exception occurs\r\n     * @param {object} headers Optional HTTP headers to pass to use for downloading splat scene\r\n     * @return {AbortablePromise}\r\n     */\r\n    downloadAndBuildSingleSplatSceneStandardLoad(path, format, splatAlphaRemovalThreshold, buildFunc, onProgress, onException, headers) {\r\n\r\n        const downloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onProgress, false,\r\n                                                                     undefined, format, headers);\r\n        const downloadAndBuildPromise = abortablePromiseWithExtractedComponents(downloadPromise.abortHandler);\r\n\r\n        downloadPromise.then((splatBuffer) => {\r\n            this.removeSplatSceneDownloadPromise(downloadPromise);\r\n            return buildFunc(splatBuffer, true, true).then(() => {\r\n                downloadAndBuildPromise.resolve();\r\n                this.clearSplatSceneDownloadAndBuildPromise();\r\n            });\r\n        })\r\n        .catch((e) => {\r\n            if (onException) onException();\r\n            this.clearSplatSceneDownloadAndBuildPromise();\r\n            this.removeSplatSceneDownloadPromise(downloadPromise);\r\n            const error = (e instanceof AbortedPromiseError) ? e : new Error(`Viewer::addSplatScene -> Could not load file ${path}`);\r\n            downloadAndBuildPromise.reject(error);\r\n        });\r\n\r\n        this.addSplatSceneDownloadPromise(downloadPromise);\r\n        this.setSplatSceneDownloadAndBuildPromise(downloadAndBuildPromise.promise);\r\n\r\n        return downloadAndBuildPromise.promise;\r\n    }\r\n\r\n    /**\r\n     * Download a single splat scene and convert to splat buffer in a progressive manner, allowing rendering as the file downloads.\r\n     * As each section is downloaded, the viewer's splat mesh is rebuilt by calling 'buildFunc'\r\n     * Also sets/clears relevant instance synchronization objects, and calls appropriate functions on success or failure.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {SceneFormat} format Format of the splat scene file\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\r\n     * @param {function} buildFunc Function to rebuild the viewer's splat mesh after a new splat buffer section is downloaded\r\n     * @param {function} onDownloadProgress Function to be called as file data are received\r\n     * @param {function} onDownloadException Function to be called when exception occurs at any point during the full download\r\n     * @param {object} headers Optional HTTP headers to pass to use for downloading splat scene\r\n     * @return {AbortablePromise}\r\n     */\r\n    downloadAndBuildSingleSplatSceneProgressiveLoad(path, format, splatAlphaRemovalThreshold, buildFunc,\r\n                                                    onDownloadProgress, onDownloadException, headers) {\r\n        let progressiveLoadedSectionBuildCount = 0;\r\n        let progressiveLoadedSectionBuilding = false;\r\n        const queuedProgressiveLoadSectionBuilds = [];\r\n\r\n        const checkAndBuildProgressiveLoadSections = () => {\r\n            if (queuedProgressiveLoadSectionBuilds.length > 0 &&\r\n                !progressiveLoadedSectionBuilding &&\r\n                !this.isDisposingOrDisposed()) {\r\n                progressiveLoadedSectionBuilding = true;\r\n                const queuedBuild = queuedProgressiveLoadSectionBuilds.shift();\r\n                buildFunc(queuedBuild.splatBuffer, queuedBuild.firstBuild, queuedBuild.finalBuild)\r\n                .then(() => {\r\n                    progressiveLoadedSectionBuilding = false;\r\n                    if (queuedBuild.firstBuild) {\r\n                        progressiveLoadFirstSectionBuildPromise.resolve();\r\n                    } else if (queuedBuild.finalBuild) {\r\n                        splatSceneDownloadAndBuildPromise.resolve();\r\n                        this.clearSplatSceneDownloadAndBuildPromise();\r\n                    }\r\n                    if (queuedProgressiveLoadSectionBuilds.length > 0) {\r\n                        delayedExecute(() => checkAndBuildProgressiveLoadSections());\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        const onProgressiveLoadSectionProgress = (splatBuffer, finalBuild) => {\r\n            if (!this.isDisposingOrDisposed()) {\r\n                if (finalBuild || queuedProgressiveLoadSectionBuilds.length === 0 ||\r\n                    splatBuffer.getSplatCount() > queuedProgressiveLoadSectionBuilds[0].splatBuffer.getSplatCount()) {\r\n                    queuedProgressiveLoadSectionBuilds.push({\r\n                        splatBuffer,\r\n                        firstBuild: progressiveLoadedSectionBuildCount === 0,\r\n                        finalBuild\r\n                    });\r\n                    progressiveLoadedSectionBuildCount++;\r\n                    checkAndBuildProgressiveLoadSections();\r\n                }\r\n            }\r\n        };\r\n\r\n        const splatSceneDownloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onDownloadProgress, true,\r\n                                                                               onProgressiveLoadSectionProgress, format, headers);\r\n\r\n        const progressiveLoadFirstSectionBuildPromise = abortablePromiseWithExtractedComponents(splatSceneDownloadPromise.abortHandler);\r\n        const splatSceneDownloadAndBuildPromise = abortablePromiseWithExtractedComponents();\r\n\r\n        this.addSplatSceneDownloadPromise(splatSceneDownloadPromise);\r\n        this.setSplatSceneDownloadAndBuildPromise(splatSceneDownloadAndBuildPromise.promise);\r\n\r\n        splatSceneDownloadPromise.then(() => {\r\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\r\n        })\r\n        .catch((e) => {\r\n            this.clearSplatSceneDownloadAndBuildPromise();\r\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\r\n            const error = (e instanceof AbortedPromiseError) ? e : new Error(`Viewer::addSplatScene -> Could not load one or more scenes`);\r\n            progressiveLoadFirstSectionBuildPromise.reject(error);\r\n            if (onDownloadException) onDownloadException(error);\r\n        });\r\n\r\n        return progressiveLoadFirstSectionBuildPromise.promise;\r\n    }\r\n\r\n    /**\r\n     * Add multiple splat scenes to the viewer and display any loading UI if appropriate.\r\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\r\n     *\r\n     *         path: Path to splat scene to be loaded\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         headers:                    Optional HTTP headers to be sent along with splat requests\r\n     *\r\n     *         format (SceneFormat)        Optional, the format of the scene data (.ply, .ksplat, .splat). If not present, the\r\n     *                                     file extension in 'path' will be used to determine the format (if it is present)\r\n     * }\r\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\r\n     * @param {function} onProgress Function to be called as file data are received\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScenes(sceneOptions, showLoadingUI = true, onProgress = undefined) {\r\n\r\n        if (this.isLoadingOrUnloading()) {\r\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\r\n        }\r\n\r\n        if (this.isDisposingOrDisposed()) {\r\n            throw new Error('Cannot add splat scene after dispose() is called.');\r\n        }\r\n\r\n        const fileCount = sceneOptions.length;\r\n        const percentComplete = [];\r\n\r\n        let loadingUITaskId;\r\n        if (showLoadingUI) {\r\n            this.loadingSpinner.removeAllTasks();\r\n            loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\r\n        }\r\n\r\n        const onLoadProgress = (fileIndex, percent, percentLabel, loaderStatus) => {\r\n            percentComplete[fileIndex] = percent;\r\n            let totalPercent = 0;\r\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\r\n            totalPercent = totalPercent / fileCount;\r\n            percentLabel = `${totalPercent.toFixed(2)}%`;\r\n            if (showLoadingUI) {\r\n                if (loaderStatus === LoaderStatus.Downloading) {\r\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, totalPercent == 100 ?\r\n                                                          `Download complete!` : `Downloading: ${percentLabel}`);\r\n                }\r\n            }\r\n            if (onProgress) onProgress(totalPercent, percentLabel, loaderStatus);\r\n        };\r\n\r\n        const baseDownloadPromises = [];\r\n        const nativeDownloadPromises = [];\r\n        for (let i = 0; i < sceneOptions.length; i++) {\r\n            const options = sceneOptions[i];\r\n            const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(options.path);\r\n            const baseDownloadPromise = this.downloadSplatSceneToSplatBuffer(options.path, options.splatAlphaRemovalThreshold,\r\n                                                                             onLoadProgress.bind(this, i), false, undefined,\r\n                                                                             format, options.headers);\r\n            baseDownloadPromises.push(baseDownloadPromise);\r\n            nativeDownloadPromises.push(baseDownloadPromise.promise);\r\n        }\r\n\r\n        const downloadAndBuildPromise = new AbortablePromise((resolve, reject) => {\r\n            Promise.all(nativeDownloadPromises)\r\n            .then((splatBuffers) => {\r\n                if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\r\n                if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n                this.addSplatBuffers(splatBuffers, sceneOptions, true, showLoadingUI, showLoadingUI, false, false).then(() => {\r\n                    if (onProgress) onProgress(100, '100%', LoaderStatus.Processing);\r\n                    this.clearSplatSceneDownloadAndBuildPromise();\r\n                    resolve();\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\r\n                this.clearSplatSceneDownloadAndBuildPromise();\r\n                const error = (e instanceof AbortedPromiseError) ? e :\r\n                               new Error(`Viewer::addSplatScenes -> Could not load one or more splat scenes.`);\r\n                reject(error);\r\n            })\r\n            .finally(() => {\r\n                this.removeSplatSceneDownloadPromise(downloadAndBuildPromise);\r\n            });\r\n        }, (reason) => {\r\n            for (let baseDownloadPromise of baseDownloadPromises) {\r\n                baseDownloadPromise.abort(reason);\r\n            }\r\n        });\r\n        this.addSplatSceneDownloadPromise(downloadAndBuildPromise);\r\n        this.setSplatSceneDownloadAndBuildPromise(downloadAndBuildPromise);\r\n        return downloadAndBuildPromise;\r\n    }\r\n\r\n    /**\r\n     * Download a splat scene and convert to SplatBuffer instance.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\r\n     *                                            value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     * @param {function} onProgress Function to be called as file data are received\r\n     * @param {boolean} progressiveBuild Construct file sections into splat buffers as they are downloaded\r\n     * @param {function} onSectionBuilt Function to be called when new section is added to the file\r\n     * @param {string} format File format of the scene\r\n     * @param {object} headers Optional HTTP headers to pass to use for downloading splat scene\r\n     * @return {AbortablePromise}\r\n     */\r\n    downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined,\r\n                                    progressiveBuild = false, onSectionBuilt = undefined, format, headers) {\r\n\r\n        const optimizeSplatData = progressiveBuild ? false : this.optimizeSplatData;\r\n        try {\r\n            if (format === SceneFormat.Splat) {\r\n                return SplatLoader.loadFromURL(path, onProgress, progressiveBuild, onSectionBuilt, splatAlphaRemovalThreshold,\r\n                                               this.inMemoryCompressionLevel, optimizeSplatData, headers);\r\n            } else if (format === SceneFormat.KSplat) {\r\n                return KSplatLoader.loadFromURL(path, onProgress, progressiveBuild, onSectionBuilt, headers);\r\n            } else if (format === SceneFormat.Ply) {\r\n                return PlyLoader.loadFromURL(path, onProgress, progressiveBuild, onSectionBuilt, splatAlphaRemovalThreshold,\r\n                                             this.inMemoryCompressionLevel, optimizeSplatData, this.sphericalHarmonicsDegree, headers);\r\n            }\r\n        } catch (e) {\r\n            if (e instanceof DirectLoadError) {\r\n                throw new Error('File type or server does not support progressive loading.');\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n\r\n        throw new Error(`Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${path}`);\r\n    }\r\n\r\n    static isProgressivelyLoadable(format) {\r\n        return format === SceneFormat.Splat || format === SceneFormat.KSplat || format === SceneFormat.Ply;\r\n    }\r\n\r\n    /**\r\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\r\n     * This function will terminate the existing sort worker (if there is one).\r\n     */\r\n    addSplatBuffers = function() {\r\n\r\n        return function(splatBuffers, splatBufferOptions = [], finalBuild = true, showLoadingUI = true,\r\n                        showLoadingUIForSplatTreeBuild = true, replaceExisting = false,\r\n                        enableRenderBeforeFirstSort = false, preserveVisibleRegion = true) {\r\n\r\n            if (this.isDisposingOrDisposed()) return Promise.resolve();\r\n\r\n            let splatProcessingTaskId = null;\r\n            const removeSplatProcessingTask = () => {\r\n                if (splatProcessingTaskId !== null) {\r\n                    this.loadingSpinner.removeTask(splatProcessingTaskId);\r\n                    splatProcessingTaskId = null;\r\n                }\r\n            };\r\n\r\n            this.splatRenderReady = false;\r\n            return new Promise((resolve) => {\r\n                if (showLoadingUI) {\r\n                    splatProcessingTaskId = this.loadingSpinner.addTask('Processing splats...');\r\n                }\r\n                delayedExecute(() => {\r\n                    if (this.isDisposingOrDisposed()) {\r\n                        resolve();\r\n                    } else {\r\n                        const buildResults = this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions, finalBuild,\r\n                                                                        showLoadingUIForSplatTreeBuild, replaceExisting,\r\n                                                                        preserveVisibleRegion);\r\n\r\n                        const maxSplatCount = this.splatMesh.getMaxSplatCount();\r\n                        if (this.sortWorker && this.sortWorker.maxSplatCount !== maxSplatCount) this.disposeSortWorker();\r\n                        // If we aren't calculating the splat distances from the center on the GPU, the sorting worker needs\r\n                        // splat centers and transform indexes so that it can calculate those distance values.\r\n                        if (!this.gpuAcceleratedSort) {\r\n                            this.preSortMessages.push({\r\n                                'centers': buildResults.centers.buffer,\r\n                                'sceneIndexes': buildResults.sceneIndexes.buffer,\r\n                                'range': {\r\n                                    'from': buildResults.from,\r\n                                    'to': buildResults.to,\r\n                                    'count': buildResults.count\r\n                                }\r\n                            });\r\n                        }\r\n                        const sortWorkerSetupPromise = (!this.sortWorker && maxSplatCount > 0) ?\r\n                                                         this.setupSortWorker(this.splatMesh) : Promise.resolve();\r\n                        sortWorkerSetupPromise.then(() => {\r\n                            if (this.isDisposingOrDisposed()) return;\r\n                            this.runSplatSort(true, true).then((sortRunning) => {\r\n                                if (!this.sortWorker || !sortRunning) {\r\n                                    this.splatRenderReady = true;\r\n                                    removeSplatProcessingTask();\r\n                                    resolve();\r\n                                } else {\r\n                                    if (enableRenderBeforeFirstSort) {\r\n                                        this.splatRenderReady = true;\r\n                                    } else {\r\n                                        this.runAfterNextSort.push(() => {\r\n                                            this.splatRenderReady = true;\r\n                                        });\r\n                                    }\r\n                                    this.runAfterNextSort.push(() => {\r\n                                        removeSplatProcessingTask();\r\n                                        resolve();\r\n                                    });\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n                }, true);\r\n            });\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. By default, this function is additive;\r\n     * all splat buffers contained by the viewer's splat mesh before calling this function will be preserved. This behavior can be\r\n     * changed by passing 'true' for 'replaceExisting'.\r\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\r\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\r\n     * @param {boolean} showLoadingUIForSplatTreeBuild Whether or not to show the loading spinner during construction of the splat tree.\r\n     * @return {object} Object containing info about the splats that are updated\r\n     */\r\n    addSplatBuffersToMesh = function() {\r\n\r\n        let splatOptimizingTaskId;\r\n\r\n        return function(splatBuffers, splatBufferOptions, finalBuild = true, showLoadingUIForSplatTreeBuild = false,\r\n                        replaceExisting = false, preserveVisibleRegion = true) {\r\n            if (this.isDisposingOrDisposed()) return;\r\n            let allSplatBuffers = [];\r\n            let allSplatBufferOptions = [];\r\n            if (!replaceExisting) {\r\n                allSplatBuffers = this.splatMesh.scenes.map((scene) => scene.splatBuffer) || [];\r\n                allSplatBufferOptions = this.splatMesh.sceneOptions ? this.splatMesh.sceneOptions.map((sceneOptions) => sceneOptions) : [];\r\n            }\r\n            allSplatBuffers.push(...splatBuffers);\r\n            allSplatBufferOptions.push(...splatBufferOptions);\r\n            if (this.renderer) this.splatMesh.setRenderer(this.renderer);\r\n            const onSplatTreeIndexesUpload = (finished) => {\r\n                if (this.isDisposingOrDisposed()) return;\r\n                const splatCount = this.splatMesh.getSplatCount();\r\n                if (showLoadingUIForSplatTreeBuild && splatCount >= MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER) {\r\n                    if (!finished && !splatOptimizingTaskId) {\r\n                        this.loadingSpinner.setMinimized(true, true);\r\n                        splatOptimizingTaskId = this.loadingSpinner.addTask('Optimizing data structures...');\r\n                    }\r\n                }\r\n            };\r\n            const onSplatTreeReady = (finished) => {\r\n                if (this.isDisposingOrDisposed()) return;\r\n                if (finished && splatOptimizingTaskId) {\r\n                    this.loadingSpinner.removeTask(splatOptimizingTaskId);\r\n                    splatOptimizingTaskId = null;\r\n                }\r\n            };\r\n            const buildResults = this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true, finalBuild, onSplatTreeIndexesUpload,\r\n                                                      onSplatTreeReady, preserveVisibleRegion);\r\n            if (finalBuild && this.freeIntermediateSplatData) this.splatMesh.freeIntermediateSplatData();\r\n            return buildResults;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Set up the splat sorting web worker.\r\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\r\n     * @return {Promise}\r\n     */\r\n    setupSortWorker(splatMesh) {\r\n        if (this.isDisposingOrDisposed()) return;\r\n        return new Promise((resolve) => {\r\n            const DistancesArrayType = this.integerBasedSort ? Int32Array : Float32Array;\r\n            const splatCount = splatMesh.getSplatCount();\r\n            const maxSplatCount = splatMesh.getMaxSplatCount();\r\n            this.sortWorker = createSortWorker(maxSplatCount, this.sharedMemoryForWorkers, this.enableSIMDInSort,\r\n                                               this.integerBasedSort, this.splatMesh.dynamicMode, this.splatSortDistanceMapPrecision);\r\n            this.sortWorker.onmessage = (e) => {\r\n                if (e.data.sortDone) {\r\n                    this.sortRunning = false;\r\n                    if (this.sharedMemoryForWorkers) {\r\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\r\n                    } else {\r\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes.buffer, 0, e.data.splatRenderCount);\r\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\r\n                    }\r\n\r\n                    this.lastSplatSortCount = this.splatSortCount;\r\n\r\n                    this.lastSortTime = e.data.sortTime;\r\n                    this.sortPromiseResolver();\r\n                    this.sortPromiseResolver = null;\r\n                    this.forceRenderNextFrame();\r\n                    if (this.runAfterNextSort.length > 0) {\r\n                        this.runAfterNextSort.forEach((func) => {\r\n                            func();\r\n                        });\r\n                        this.runAfterNextSort.length = 0;\r\n                    }\r\n                } else if (e.data.sortCanceled) {\r\n                    this.sortRunning = false;\r\n                } else if (e.data.sortSetupPhase1Complete) {\r\n                    if (this.logLevel >= LogLevel.Info) console.log('Sorting web worker WASM setup complete.');\r\n                    if (this.sharedMemoryForWorkers) {\r\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\r\n                                                                       e.data.sortedIndexesOffset, maxSplatCount);\r\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\r\n                                                                       e.data.indexesToSortOffset, maxSplatCount);\r\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(e.data.precomputedDistancesBuffer,\r\n                                                                                     e.data.precomputedDistancesOffset,\r\n                                                                                     maxSplatCount);\r\n                         this.sortWorkerTransforms = new Float32Array(e.data.transformsBuffer,\r\n                                                                      e.data.transformsOffset, Constants.MaxScenes * 16);\r\n                    } else {\r\n                        this.sortWorkerIndexesToSort = new Uint32Array(maxSplatCount);\r\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(maxSplatCount);\r\n                        this.sortWorkerTransforms = new Float32Array(Constants.MaxScenes * 16);\r\n                    }\r\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\r\n                    this.sortWorker.maxSplatCount = maxSplatCount;\r\n\r\n                    if (this.logLevel >= LogLevel.Info) {\r\n                        console.log('Sorting web worker ready.');\r\n                        const splatDataTextures = this.splatMesh.getSplatDataTextures();\r\n                        const covariancesTextureSize = splatDataTextures.covariances.size;\r\n                        const centersColorsTextureSize = splatDataTextures.centerColors.size;\r\n                        console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\r\n                        console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\r\n                    }\r\n\r\n                    resolve();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    disposeSortWorker() {\r\n        if (this.sortWorker) this.sortWorker.terminate();\r\n        this.sortWorker = null;\r\n        this.sortPromise = null;\r\n        if (this.sortPromiseResolver) {\r\n            this.sortPromiseResolver();\r\n            this.sortPromiseResolver = null;\r\n        }\r\n        this.preSortMessages = [];\r\n        this.sortRunning = false;\r\n    }\r\n\r\n    removeSplatScene(indexToRemove, showLoadingUI = true) {\r\n        return this.removeSplatScenes([indexToRemove], showLoadingUI);\r\n    }\r\n\r\n    removeSplatScenes(indexesToRemove, showLoadingUI = true) {\r\n        if (this.isLoadingOrUnloading()) {\r\n            throw new Error('Cannot remove splat scene while another load or unload is already in progress.');\r\n        }\r\n\r\n        if (this.isDisposingOrDisposed()) {\r\n            throw new Error('Cannot remove splat scene after dispose() is called.');\r\n        }\r\n\r\n        let sortPromise;\r\n\r\n        this.splatSceneRemovalPromise = new Promise((resolve, reject) => {\r\n            let revmovalTaskId;\r\n\r\n            if (showLoadingUI) {\r\n                this.loadingSpinner.removeAllTasks();\r\n                this.loadingSpinner.show();\r\n                revmovalTaskId = this.loadingSpinner.addTask('Removing splat scene...');\r\n            }\r\n\r\n            const checkAndHideLoadingUI = () => {\r\n                if (showLoadingUI) {\r\n                    this.loadingSpinner.hide();\r\n                    this.loadingSpinner.removeTask(revmovalTaskId);\r\n                }\r\n            };\r\n\r\n            const onDone = (error) => {\r\n                checkAndHideLoadingUI();\r\n                this.splatSceneRemovalPromise = null;\r\n                if (!error) resolve();\r\n                else reject(error);\r\n            };\r\n\r\n            const checkForEarlyExit = () => {\r\n                if (this.isDisposingOrDisposed()) {\r\n                    onDone();\r\n                    return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            sortPromise = this.sortPromise || Promise.resolve();\r\n            sortPromise.then(() => {\r\n                if (checkForEarlyExit()) return;\r\n                const savedSplatBuffers = [];\r\n                const savedSceneOptions = [];\r\n                const savedSceneTransformComponents = [];\r\n                for (let i = 0; i < this.splatMesh.scenes.length; i++) {\r\n                    let shouldRemove = false;\r\n                    for (let indexToRemove of indexesToRemove) {\r\n                        if (indexToRemove === i) {\r\n                            shouldRemove = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!shouldRemove) {\r\n                        const scene = this.splatMesh.scenes[i];\r\n                        savedSplatBuffers.push(scene.splatBuffer);\r\n                        savedSceneOptions.push(this.splatMesh.sceneOptions[i]);\r\n                        savedSceneTransformComponents.push({\r\n                            'position': scene.position.clone(),\r\n                            'quaternion': scene.quaternion.clone(),\r\n                            'scale': scene.scale.clone()\r\n                        });\r\n                    }\r\n                }\r\n                this.disposeSortWorker();\r\n                this.splatMesh.dispose();\r\n                this.sceneRevealMode = SceneRevealMode.Instant;\r\n                this.createSplatMesh();\r\n                this.addSplatBuffers(savedSplatBuffers, savedSceneOptions, true, false, true)\r\n                .then(() => {\r\n                    if (checkForEarlyExit()) return;\r\n                    checkAndHideLoadingUI();\r\n                    this.splatMesh.scenes.forEach((scene, index) => {\r\n                        scene.position.copy(savedSceneTransformComponents[index].position);\r\n                        scene.quaternion.copy(savedSceneTransformComponents[index].quaternion);\r\n                        scene.scale.copy(savedSceneTransformComponents[index].scale);\r\n                    });\r\n                    this.splatMesh.updateTransforms();\r\n                    this.splatRenderReady = false;\r\n\r\n                    this.runSplatSort(true)\r\n                    .then(() => {\r\n                        if (checkForEarlyExit()) {\r\n                            this.splatRenderReady = true;\r\n                            return;\r\n                        }\r\n                        sortPromise = this.sortPromise || Promise.resolve();\r\n                        sortPromise.then(() => {\r\n                            this.splatRenderReady = true;\r\n                            onDone();\r\n                        });\r\n                    });\r\n                })\r\n                .catch((e) => {\r\n                    onDone(e);\r\n                });\r\n            });\r\n        });\r\n\r\n        return this.splatSceneRemovalPromise;\r\n    }\r\n\r\n    /**\r\n     * Start self-driven mode\r\n     */\r\n    start() {\r\n        if (this.selfDrivenMode) {\r\n            if (this.webXRMode) {\r\n                this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\r\n            } else {\r\n                this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n            }\r\n            this.selfDrivenModeRunning = true;\r\n        } else {\r\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop self-driven mode\r\n     */\r\n    stop() {\r\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\r\n            if (this.webXRMode) {\r\n                this.renderer.setAnimationLoop(null);\r\n            } else {\r\n                cancelAnimationFrame(this.requestFrameId);\r\n            }\r\n            this.selfDrivenModeRunning = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose of all resources held directly and indirectly by this viewer.\r\n     */\r\n    async dispose() {\r\n        if (this.isDisposingOrDisposed()) return this.disposePromise;\r\n\r\n        let waitPromises = [];\r\n        let promisesToAbort = [];\r\n        for (let promiseKey in this.splatSceneDownloadPromises) {\r\n            if (this.splatSceneDownloadPromises.hasOwnProperty(promiseKey)) {\r\n                const downloadPromiseToAbort = this.splatSceneDownloadPromises[promiseKey];\r\n                promisesToAbort.push(downloadPromiseToAbort);\r\n                waitPromises.push(downloadPromiseToAbort.promise);\r\n            }\r\n        }\r\n        if (this.sortPromise) {\r\n            waitPromises.push(this.sortPromise);\r\n        }\r\n\r\n        this.disposing = true;\r\n        this.disposePromise = Promise.all(waitPromises).finally(() => {\r\n            this.stop();\r\n            if (this.orthographicControls) {\r\n                this.orthographicControls.dispose();\r\n                this.orthographicControls = null;\r\n            }\r\n            if (this.perspectiveControls) {\r\n                this.perspectiveControls.dispose();\r\n                this.perspectiveControls = null;\r\n            }\r\n            this.controls = null;\r\n            if (this.splatMesh) {\r\n                this.splatMesh.dispose();\r\n                this.splatMesh = null;\r\n            }\r\n            if (this.sceneHelper) {\r\n                this.sceneHelper.dispose();\r\n                this.sceneHelper = null;\r\n            }\r\n            if (this.resizeObserver) {\r\n                this.resizeObserver.unobserve(this.rootElement);\r\n                this.resizeObserver = null;\r\n            }\r\n            this.disposeSortWorker();\r\n            this.removeEventHandlers();\r\n\r\n            this.loadingSpinner.removeAllTasks();\r\n            this.loadingSpinner.setContainer(null);\r\n            this.loadingProgressBar.hide();\r\n            this.loadingProgressBar.setContainer(null);\r\n            this.infoPanel.setContainer(null);\r\n\r\n            this.camera = null;\r\n            this.threeScene = null;\r\n            this.splatRenderReady = false;\r\n            this.initialized = false;\r\n            if (this.renderer) {\r\n                if (!this.usingExternalRenderer) {\r\n                    this.rootElement.removeChild(this.renderer.domElement);\r\n                    this.renderer.dispose();\r\n                }\r\n                this.renderer = null;\r\n            }\r\n\r\n            if (!this.usingExternalRenderer) {\r\n                document.body.removeChild(this.rootElement);\r\n            }\r\n\r\n            this.sortWorkerSortedIndexes = null;\r\n            this.sortWorkerIndexesToSort = null;\r\n            this.sortWorkerPrecomputedDistances = null;\r\n            this.sortWorkerTransforms = null;\r\n            this.disposed = true;\r\n            this.disposing = false;\r\n            this.disposePromise = null;\r\n        });\r\n        promisesToAbort.forEach((toAbort) => {\r\n            toAbort.abort('Scene disposed');\r\n        });\r\n        return this.disposePromise;\r\n    }\r\n\r\n    selfDrivenUpdate() {\r\n        if (this.selfDrivenMode && !this.webXRMode) {\r\n            this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n        }\r\n        this.update();\r\n        if (this.shouldRender()) {\r\n            this.render();\r\n            this.consecutiveRenderFrames++;\r\n        } else {\r\n            this.consecutiveRenderFrames = 0;\r\n        }\r\n        this.renderNextFrame = false;\r\n    }\r\n\r\n    forceRenderNextFrame() {\r\n        this.renderNextFrame = true;\r\n    }\r\n\r\n    shouldRender = function() {\r\n\r\n        let renderCount = 0;\r\n        const lastCameraPosition = new THREE.Vector3();\r\n        const lastCameraOrientation = new THREE.Quaternion();\r\n        const changeEpsilon = 0.0001;\r\n\r\n        return function() {\r\n            if (!this.initialized || !this.splatRenderReady || this.isDisposingOrDisposed()) return false;\r\n\r\n            let shouldRender = false;\r\n            let cameraChanged = false;\r\n            if (this.camera) {\r\n                const cp = this.camera.position;\r\n                const co = this.camera.quaternion;\r\n                cameraChanged = Math.abs(cp.x - lastCameraPosition.x) > changeEpsilon ||\r\n                                Math.abs(cp.y - lastCameraPosition.y) > changeEpsilon ||\r\n                                Math.abs(cp.z - lastCameraPosition.z) > changeEpsilon ||\r\n                                Math.abs(co.x - lastCameraOrientation.x) > changeEpsilon ||\r\n                                Math.abs(co.y - lastCameraOrientation.y) > changeEpsilon ||\r\n                                Math.abs(co.z - lastCameraOrientation.z) > changeEpsilon ||\r\n                                Math.abs(co.w - lastCameraOrientation.w) > changeEpsilon;\r\n            }\r\n\r\n            shouldRender = this.renderMode !== RenderMode.Never && (renderCount === 0 || this.splatMesh.visibleRegionChanging ||\r\n                           cameraChanged || this.renderMode === RenderMode.Always || this.dynamicMode === true || this.renderNextFrame);\r\n\r\n            if (this.camera) {\r\n                lastCameraPosition.copy(this.camera.position);\r\n                lastCameraOrientation.copy(this.camera.quaternion);\r\n            }\r\n\r\n            renderCount++;\r\n            return shouldRender;\r\n        };\r\n\r\n    }();\r\n\r\n    render = function() {\r\n\r\n        return function() {\r\n            if (!this.initialized || !this.splatRenderReady || this.isDisposingOrDisposed()) return;\r\n\r\n            const hasRenderables = (threeScene) => {\r\n                for (let child of threeScene.children) {\r\n                    if (child.visible) return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            const savedAuoClear = this.renderer.autoClear;\r\n            if (hasRenderables(this.threeScene)) {\r\n                this.renderer.render(this.threeScene, this.camera);\r\n                this.renderer.autoClear = false;\r\n            }\r\n            this.renderer.render(this.splatMesh, this.camera);\r\n            this.renderer.autoClear = false;\r\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\r\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\r\n            this.renderer.autoClear = savedAuoClear;\r\n        };\r\n\r\n    }();\r\n\r\n    update(renderer, camera) {\r\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\r\n\r\n        if (!this.initialized || !this.splatRenderReady || this.isDisposingOrDisposed()) return;\r\n\r\n        if (this.controls) {\r\n            this.controls.update();\r\n            if (this.camera.isOrthographicCamera && !this.usingExternalCamera) {\r\n                Viewer.setCameraPositionFromZoom(this.camera, this.camera, this.controls);\r\n            }\r\n        }\r\n        this.runSplatSort();\r\n        this.updateForRendererSizeChanges();\r\n        this.updateSplatMesh();\r\n        this.updateMeshCursor();\r\n        this.updateFPS();\r\n        this.timingSensitiveUpdates();\r\n        this.updateInfoPanel();\r\n        this.updateControlPlane();\r\n    }\r\n\r\n    updateForDropInMode(renderer, camera) {\r\n        this.renderer = renderer;\r\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\r\n        this.camera = camera;\r\n        if (this.controls) this.controls.object = camera;\r\n        this.init();\r\n    }\r\n\r\n    updateFPS = function() {\r\n\r\n        let lastCalcTime = getCurrentTime();\r\n        let frameCount = 0;\r\n\r\n        return function() {\r\n            if (this.consecutiveRenderFrames > CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION) {\r\n                const currentTime = getCurrentTime();\r\n                const calcDelta = currentTime - lastCalcTime;\r\n                if (calcDelta >= 1.0) {\r\n                    this.currentFPS = frameCount;\r\n                    frameCount = 0;\r\n                    lastCalcTime = currentTime;\r\n                } else {\r\n                    frameCount++;\r\n                }\r\n            } else {\r\n                this.currentFPS = null;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateForRendererSizeChanges = function() {\r\n\r\n        const lastRendererSize = new THREE.Vector2();\r\n        const currentRendererSize = new THREE.Vector2();\r\n        let lastCameraOrthographic;\r\n\r\n        return function() {\r\n            if (!this.usingExternalCamera) {\r\n                this.renderer.getSize(currentRendererSize);\r\n                if (lastCameraOrthographic === undefined || lastCameraOrthographic !== this.camera.isOrthographicCamera ||\r\n                    currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\r\n                    if (this.camera.isOrthographicCamera) {\r\n                        this.camera.left = -currentRendererSize.x / 2.0;\r\n                        this.camera.right = currentRendererSize.x / 2.0;\r\n                        this.camera.top = currentRendererSize.y / 2.0;\r\n                        this.camera.bottom = -currentRendererSize.y / 2.0;\r\n                    } else {\r\n                        this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\r\n                    }\r\n                    this.camera.updateProjectionMatrix();\r\n                    lastRendererSize.copy(currentRendererSize);\r\n                    lastCameraOrthographic = this.camera.isOrthographicCamera;\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    timingSensitiveUpdates = function() {\r\n\r\n        let lastUpdateTime;\r\n\r\n        return function() {\r\n            const currentTime = getCurrentTime();\r\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\r\n            const timeDelta = currentTime - lastUpdateTime;\r\n\r\n            this.updateCameraTransition(currentTime);\r\n            this.updateFocusMarker(timeDelta);\r\n\r\n            lastUpdateTime = currentTime;\r\n        };\r\n\r\n    }();\r\n\r\n    updateCameraTransition = function() {\r\n\r\n        let tempCameraTarget = new THREE.Vector3();\r\n        let toPreviousTarget = new THREE.Vector3();\r\n        let toNextTarget = new THREE.Vector3();\r\n\r\n        return function(currentTime) {\r\n            if (this.transitioningCameraTarget) {\r\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\r\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\r\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\r\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\r\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\r\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\r\n                this.camera.lookAt(tempCameraTarget);\r\n                this.controls.target.copy(tempCameraTarget);\r\n                if (t >= 1.0) {\r\n                    this.transitioningCameraTarget = false;\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        let wasTransitioning = false;\r\n\r\n        return function(timeDelta) {\r\n            this.getRenderDimensions(renderDimensions);\r\n            if (this.transitioningCameraTarget) {\r\n                this.sceneHelper.setFocusMarkerVisibility(true);\r\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\r\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + FOCUS_MARKER_FADE_IN_SPEED * timeDelta, 1.0);\r\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                wasTransitioning = true;\r\n                this.forceRenderNextFrame();\r\n            } else {\r\n                let currentFocusMarkerOpacity;\r\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\r\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\r\n                if (currentFocusMarkerOpacity > 0) {\r\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - FOCUS_MARKER_FADE_OUT_SPEED * timeDelta, 0.0);\r\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\r\n                }\r\n                if (currentFocusMarkerOpacity > 0.0) this.forceRenderNextFrame();\r\n                wasTransitioning = false;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateMeshCursor = function() {\r\n\r\n        const outHits = [];\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (this.showMeshCursor) {\r\n                this.forceRenderNextFrame();\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    this.sceneHelper.setMeshCursorVisibility(true);\r\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\r\n                } else {\r\n                    this.sceneHelper.setMeshCursorVisibility(false);\r\n                }\r\n            } else {\r\n                if (this.sceneHelper.getMeschCursorVisibility()) this.forceRenderNextFrame();\r\n                this.sceneHelper.setMeshCursorVisibility(false);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateInfoPanel = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.showInfo) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            this.getRenderDimensions(renderDimensions);\r\n            const cameraLookAtPosition = this.controls ? this.controls.target : null;\r\n            const meshCursorPosition = this.showMeshCursor ? this.sceneHelper.meshCursor.position : null;\r\n            const splatRenderCountPct = splatCount > 0 ? this.splatRenderCount / splatCount * 100 : 0;\r\n            this.infoPanel.update(renderDimensions, this.camera.position, cameraLookAtPosition,\r\n                                  this.camera.up, this.camera.isOrthographicCamera, meshCursorPosition,\r\n                                  this.currentFPS || 'N/A', splatCount, this.splatRenderCount, splatRenderCountPct,\r\n                                  this.lastSortTime, this.focalAdjustment, this.splatMesh.getSplatScale(),\r\n                                  this.splatMesh.getPointCloudModeEnabled());\r\n        };\r\n\r\n    }();\r\n\r\n    updateControlPlane() {\r\n        if (this.showControlPlane) {\r\n            this.sceneHelper.setControlPlaneVisibility(true);\r\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\r\n        } else {\r\n            this.sceneHelper.setControlPlaneVisibility(false);\r\n        }\r\n    }\r\n\r\n    runSplatSort = function() {\r\n\r\n        const mvpMatrix = new THREE.Matrix4();\r\n        const cameraPositionArray = [];\r\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const lastSortViewPos = new THREE.Vector3();\r\n        const sortViewOffset = new THREE.Vector3();\r\n        const queuedSorts = [];\r\n\r\n        const partialSorts = [\r\n            {\r\n                'angleThreshold': 0.55,\r\n                'sortFractions': [0.125, 0.33333, 0.75]\r\n            },\r\n            {\r\n                'angleThreshold': 0.65,\r\n                'sortFractions': [0.33333, 0.66667]\r\n            },\r\n            {\r\n                'angleThreshold': 0.8,\r\n                'sortFractions': [0.5]\r\n            }\r\n        ];\r\n\r\n        return function(force = false, forceSortAll = false) {\r\n            if (!this.initialized) return Promise.resolve(false);\r\n            if (this.sortRunning) return Promise.resolve(true);\r\n            if (this.splatMesh.getSplatCount() <= 0) {\r\n                this.splatRenderCount = 0;\r\n                return Promise.resolve(false);\r\n            }\r\n\r\n            let angleDiff = 0;\r\n            let positionDiff = 0;\r\n            let needsRefreshForRotation = false;\r\n            let needsRefreshForPosition = false;\r\n\r\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\r\n            angleDiff = sortViewDir.dot(lastSortViewDir);\r\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\r\n\r\n            if (!force) {\r\n                if (!this.splatMesh.dynamicMode && queuedSorts.length === 0) {\r\n                    if (angleDiff <= 0.99) needsRefreshForRotation = true;\r\n                    if (positionDiff >= 1.0) needsRefreshForPosition = true;\r\n                    if (!needsRefreshForRotation && !needsRefreshForPosition) return Promise.resolve(false);\r\n                }\r\n            }\r\n\r\n            this.sortRunning = true;\r\n            let { splatRenderCount, shouldSortAll } = this.gatherSceneNodesForSort();\r\n            shouldSortAll = shouldSortAll || forceSortAll;\r\n            this.splatRenderCount = splatRenderCount;\r\n\r\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\r\n            const mvpCamera = this.perspectiveCamera || this.camera;\r\n            mvpMatrix.premultiply(mvpCamera.projectionMatrix);\r\n            if (!this.splatMesh.dynamicMode) mvpMatrix.multiply(this.splatMesh.matrixWorld);\r\n\r\n            let gpuAcceleratedSortPromise = Promise.resolve(true);\r\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\r\n                gpuAcceleratedSortPromise = this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\r\n            }\r\n\r\n            gpuAcceleratedSortPromise.then(() => {\r\n                if (queuedSorts.length === 0) {\r\n                    if (this.splatMesh.dynamicMode || shouldSortAll) {\r\n                        queuedSorts.push(this.splatRenderCount);\r\n                    } else {\r\n                            for (let partialSort of partialSorts) {\r\n                            if (angleDiff < partialSort.angleThreshold) {\r\n                                for (let sortFraction of partialSort.sortFractions) {\r\n                                    queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                        queuedSorts.push(this.splatRenderCount);\r\n                    }\r\n                }\r\n                let sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\r\n                this.splatSortCount = sortCount;\r\n\r\n                cameraPositionArray[0] = this.camera.position.x;\r\n                cameraPositionArray[1] = this.camera.position.y;\r\n                cameraPositionArray[2] = this.camera.position.z;\r\n\r\n                const sortMessage = {\r\n                    'modelViewProj': mvpMatrix.elements,\r\n                    'cameraPosition': cameraPositionArray,\r\n                    'splatRenderCount': this.splatRenderCount,\r\n                    'splatSortCount': sortCount,\r\n                    'usePrecomputedDistances': this.gpuAcceleratedSort\r\n                };\r\n                if (this.splatMesh.dynamicMode) {\r\n                    this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\r\n                }\r\n                if (!this.sharedMemoryForWorkers) {\r\n                    sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\r\n                    sortMessage.transforms = this.sortWorkerTransforms;\r\n                    if (this.gpuAcceleratedSort) {\r\n                        sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\r\n                    }\r\n                }\r\n\r\n                this.sortPromise = new Promise((resolve) => {\r\n                    this.sortPromiseResolver = resolve;\r\n                });\r\n\r\n                if (this.preSortMessages.length > 0) {\r\n                    this.preSortMessages.forEach((message) => {\r\n                        this.sortWorker.postMessage(message);\r\n                    });\r\n                    this.preSortMessages = [];\r\n                }\r\n                this.sortWorker.postMessage({\r\n                    'sort': sortMessage\r\n                });\r\n\r\n                if (queuedSorts.length === 0) {\r\n                    lastSortViewPos.copy(this.camera.position);\r\n                    lastSortViewDir.copy(sortViewDir);\r\n                }\r\n\r\n                return true;\r\n            });\r\n\r\n            return gpuAcceleratedSortPromise;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Determine which splats to render by checking which are inside or close to the view frustum\r\n     */\r\n    gatherSceneNodesForSort = function() {\r\n\r\n        const nodeRenderList = [];\r\n        let allSplatsSortBuffer = null;\r\n        const tempVectorYZ = new THREE.Vector3();\r\n        const tempVectorXZ = new THREE.Vector3();\r\n        const tempVector = new THREE.Vector3();\r\n        const modelView = new THREE.Matrix4();\r\n        const baseModelView = new THREE.Matrix4();\r\n        const sceneTransform = new THREE.Matrix4();\r\n        const renderDimensions = new THREE.Vector3();\r\n        const forward = new THREE.Vector3(0, 0, -1);\r\n\r\n        const tempMax = new THREE.Vector3();\r\n        const nodeSize = (node) => {\r\n            return tempMax.copy(node.max).sub(node.min).length();\r\n        };\r\n\r\n        return function(gatherAllNodes = false) {\r\n\r\n            this.getRenderDimensions(renderDimensions);\r\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\r\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\r\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\r\n            const cosFovXOver2 = Math.cos(fovXOver2);\r\n            const cosFovYOver2 = Math.cos(fovYOver2);\r\n\r\n            const splatTree = this.splatMesh.getSplatTree();\r\n\r\n            if (splatTree) {\r\n                baseModelView.copy(this.camera.matrixWorld).invert();\r\n                if (!this.splatMesh.dynamicMode) baseModelView.multiply(this.splatMesh.matrixWorld);\r\n\r\n                let nodeRenderCount = 0;\r\n                let splatRenderCount = 0;\r\n\r\n                for (let s = 0; s < splatTree.subTrees.length; s++) {\r\n                    const subTree = splatTree.subTrees[s];\r\n                    modelView.copy(baseModelView);\r\n                    if (this.splatMesh.dynamicMode) {\r\n                        this.splatMesh.getSceneTransform(s, sceneTransform);\r\n                        modelView.multiply(sceneTransform);\r\n                    }\r\n                    const nodeCount = subTree.nodesWithIndexes.length;\r\n                    for (let i = 0; i < nodeCount; i++) {\r\n                        const node = subTree.nodesWithIndexes[i];\r\n                        if (!node.data || !node.data.indexes || node.data.indexes.length === 0) continue;\r\n                        tempVector.copy(node.center).applyMatrix4(modelView);\r\n\r\n                        const distanceToNode = tempVector.length();\r\n                        tempVector.normalize();\r\n\r\n                        tempVectorYZ.copy(tempVector).setX(0).normalize();\r\n                        tempVectorXZ.copy(tempVector).setY(0).normalize();\r\n\r\n                        const cameraAngleXZDot = forward.dot(tempVectorXZ);\r\n                        const cameraAngleYZDot = forward.dot(tempVectorYZ);\r\n\r\n                        const ns = nodeSize(node);\r\n                        const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\r\n                        const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\r\n                        if (!gatherAllNodes && ((outOfFovX || outOfFovY) && distanceToNode > ns)) {\r\n                            continue;\r\n                        }\r\n                        splatRenderCount += node.data.indexes.length;\r\n                        nodeRenderList[nodeRenderCount] = node;\r\n                        node.data.distanceToNode = distanceToNode;\r\n                        nodeRenderCount++;\r\n                    }\r\n                }\r\n\r\n                nodeRenderList.length = nodeRenderCount;\r\n                nodeRenderList.sort((a, b) => {\r\n                    if (a.data.distanceToNode < b.data.distanceToNode) return -1;\r\n                    else return 1;\r\n                });\r\n\r\n                let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\r\n                for (let i = 0; i < nodeRenderCount; i++) {\r\n                    const node = nodeRenderList[i];\r\n                    const windowSizeInts = node.data.indexes.length;\r\n                    const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\r\n                    let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer,\r\n                                                   currentByteOffset - windowSizeBytes, windowSizeInts);\r\n                    destView.set(node.data.indexes);\r\n                    currentByteOffset -= windowSizeBytes;\r\n                }\r\n\r\n                return {\r\n                    'splatRenderCount': splatRenderCount,\r\n                    'shouldSortAll': false\r\n                };\r\n            } else {\r\n                const totalSplatCount = this.splatMesh.getSplatCount();\r\n                if (!allSplatsSortBuffer || allSplatsSortBuffer.length !== totalSplatCount) {\r\n                    allSplatsSortBuffer = new Uint32Array(totalSplatCount);\r\n                    for (let i = 0; i < totalSplatCount; i++) {\r\n                        allSplatsSortBuffer[i] = i;\r\n                    }\r\n                }\r\n                this.sortWorkerIndexesToSort.set(allSplatsSortBuffer);\r\n                return {\r\n                    'splatRenderCount': totalSplatCount,\r\n                    'shouldSortAll': true\r\n                };\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatMesh() {\r\n        return this.splatMesh;\r\n    }\r\n\r\n    /**\r\n     * Get a reference to a splat scene.\r\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\r\n     * @return {SplatScene}\r\n     */\r\n    getSplatScene(sceneIndex) {\r\n        return this.splatMesh.getScene(sceneIndex);\r\n    }\r\n\r\n    getSceneCount() {\r\n        return this.splatMesh.getSceneCount();\r\n    }\r\n\r\n    isMobile() {\r\n        return navigator.userAgent.includes('Mobi');\r\n    }\r\n}\r\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0004\u0001|\u0003{\u0007}\u0003 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001cj(\u0002\u0000\"\u001dA\u0002tj(\u0002\u0000\"\u001bG\u0004@\u0002 \u0005�\t\u00028 \b \u001bA\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0001\u0002\u0003\u0000\u0001\u0002\u0003�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u001b!\u000f\u000b \u0003 \u001cj \u0001 \u001dA\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0014 \u0005*\u0002\u0018!\u0015 \u0005*\u0002\b!\u0016A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0014 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0016 \u0002*\u0002\u0000� \u0015 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001bj(\u0002\u0000A\u0002t\"\u001cj(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0014 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0015 \u000f*\u00028� \u0005*\u0002\b\"\u0016 \u000f*\u00020� \u0005*\u0002\u0018\"\u0017 \u000f*\u00024����!\u0018 \u0014 \u000f*\u0002,� \u0015 \u000f*\u0002(� \u0016 \u000f*\u0002 � \u0017 \u000f*\u0002$����!\u0019 \u0014 \u000f*\u0002\u001c� \u0015 \u000f*\u0002\u0018� \u0016 \u000f*\u0002\u0010� \u0017 \u000f*\u0002\u0014����!\u001a \u0014 \u000f*\u0002\f� \u0015 \u000f*\u0002\b� \u0016 \u000f*\u0002\u0000� \u0017 \u000f*\u0002\u0004����!\u0014 \u000e!\u000f\u000b \u0003 \u001bj\u0002 \u0018 \u0001 \u001cA\u0002tj\"\u000e*\u0002\f� \u0019 \u000e*\u0002\b� \u0014 \u000e*\u0002\u0000� \u001a \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0014 \f!\r\u0003@\u0002 \u0014 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0015�C\u0000\u0000\u0000O]\u0004@ \u0015�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","import * as THREE from 'three';\r\nimport { Viewer } from './Viewer.js';\r\n\r\n/**\r\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\r\n * any other Three.js scene object (Mesh, Object3D, etc.)\r\n */\r\nexport class DropInViewer extends THREE.Group {\r\n\r\n    constructor(options = {}) {\r\n        super();\r\n\r\n        options.selfDrivenMode = false;\r\n        options.useBuiltInControls = false;\r\n        options.rootElement = null;\r\n        options.dropInMode = true;\r\n        options.camera = undefined;\r\n        options.renderer = undefined;\r\n\r\n        this.viewer = new Viewer(options);\r\n        this.splatMesh = null;\r\n        this.updateSplatMesh();\r\n\r\n        this.callbackMesh = DropInViewer.createCallbackMesh();\r\n        this.add(this.callbackMesh);\r\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\r\n\r\n        this.viewer.onSplatMeshChanged(() => {\r\n            this.updateSplatMesh();\r\n        });\r\n\r\n    }\r\n\r\n    updateSplatMesh() {\r\n        if (this.splatMesh !== this.viewer.splatMesh) {\r\n            if (this.splatMesh) {\r\n                this.remove(this.splatMesh);\r\n            }\r\n            this.splatMesh = this.viewer.splatMesh;\r\n            this.add(this.viewer.splatMesh);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a single splat scene to the viewer.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {object} options {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         onProgress:                 Function to be called as file data are received\r\n     *\r\n     * }\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScene(path, options = {}) {\r\n        if (options.showLoadingUI !== false) options.showLoadingUI = true;\r\n        return this.viewer.addSplatScene(path, options);\r\n    }\r\n\r\n    /**\r\n     * Add multiple splat scenes to the viewer.\r\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\r\n     *\r\n     *         path: Path to splat scene to be loaded\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScenes(sceneOptions, showLoadingUI) {\r\n        if (showLoadingUI !== false) showLoadingUI = true;\r\n        return this.viewer.addSplatScenes(sceneOptions, showLoadingUI);\r\n    }\r\n\r\n    /**\r\n     * Get a reference to a splat scene.\r\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\r\n     * @return {SplatScene}\r\n     */\r\n    getSplatScene(sceneIndex) {\r\n        return this.viewer.getSplatScene(sceneIndex);\r\n    }\r\n\r\n    removeSplatScene(index, showLoadingUI = true) {\r\n        return this.viewer.removeSplatScene(index, showLoadingUI);\r\n    }\r\n\r\n    removeSplatScenes(indexes, showLoadingUI = true) {\r\n        return this.viewer.removeSplatScenes(indexes, showLoadingUI);\r\n    }\r\n\r\n    getSceneCount() {\r\n        return this.viewer.getSceneCount();\r\n    }\r\n\r\n    setActiveSphericalHarmonicsDegrees(activeSphericalHarmonicsDegrees) {\r\n        this.viewer.setActiveSphericalHarmonicsDegrees(activeSphericalHarmonicsDegrees);\r\n    }\r\n\r\n    async dispose() {\r\n        return await this.viewer.dispose();\r\n    }\r\n\r\n    static onBeforeRender(viewer, renderer, threeScene, camera) {\r\n        viewer.update(renderer, camera);\r\n    }\r\n\r\n    static createCallbackMesh() {\r\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\r\n        const material = new THREE.MeshBasicMaterial();\r\n        material.colorWrite = false;\r\n        material.depthWrite = false;\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.frustumCulled = false;\r\n        return mesh;\r\n    }\r\n\r\n}\r\n"],"names":["AbortablePromise","static","constructor","promiseFunc","abortHandler","resolver","rejecter","this","promise","Promise","resolve","reject","promiseResolve","bind","promiseReject","args","error","id","idGen","then","onResolve","onResolveResult","args2","catch","onFail","abort","reason","AbortedPromiseError","Error","msg","super","floatView","Float32Array","int32View","Int32Array","buffer","uintEncodedFloat","f","fetchWithProgress","path","onProgress","saveChunks","headers","abortController","AbortController","signal","aborted","fetchOptions","fetch","async","data","ok","errorText","text","status","statusText","reader","body","getReader","bytesDownloaded","_fileSize","get","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","push","clamp","val","min","max","Math","getCurrentTime","performance","now","disposeAllMeshes","object3D","geometry","dispose","material","children","child","delayedExecute","func","fast","window","setTimeout","getSphericalHarmonicsComponentCountForDegree","sphericalHarmonicsDegree","nativePromiseWithExtractedComponents","abortablePromiseWithExtractedComponents","Semver","major","minor","patch","toString","isIOS","ua","navigator","userAgent","indexOf","getIOSSemever","extract","match","UncompressedSplatArray","X","Y","Z","SCALE0","SCALE1","SCALE2","ROTATION0","ROTATION1","ROTATION2","ROTATION3","FDC0","FDC1","FDC2","OPACITY","FRC0","FRC1","FRC2","FRC3","FRC4","FRC5","FRC6","FRC7","FRC8","FRC9","FRC10","FRC11","FRC12","FRC13","FRC14","FRC15","FRC16","FRC17","FRC18","FRC19","FRC20","FRC21","FRC22","FRC23","sphericalHarmonicsCount","componentCount","defaultSphericalHarmonics","Array","fill","splats","splatCount","createSplat","baseSplat","shEntries","i","addSplat","splat","getSplat","index","addDefaultSplat","newSplat","addSplatFromComonents","x","y","z","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","opacity","rest","addSplatFromArray","src","srcIndex","srcSplat","Constants","DefaultSphericalHarmonics8BitCompressionHalfRange","SphericalHarmonics8BitCompressionRange","toHalfFloat","THREE","DataUtils","fromHalfFloat","toUncompressedFloat","compressionLevel","isSH","range8BitMin","range8BitMax","fromUint8","toUint8","v","rangeMin","rangeMax","range","floor","fromHalfFloatToUint8","fromUint8ToHalfFloat","dataViewFloatForCompressionLevel","dataView","floatIndex","getFloat32","getUint16","getUint8","convertBetweenCompressionLevels","noop","fromLevel","toLevel","outputConversionFunc","copyBetweenBuffers","srcBuffer","srcOffset","destBuffer","destOffset","byteCount","Uint8Array","dest","SplatBuffer","BytesPerCenter","BytesPerScale","BytesPerRotation","BytesPerColor","ScaleOffsetBytes","RotationffsetBytes","ColorOffsetBytes","SphericalHarmonicsOffsetBytes","ScaleRange","BytesPerSphericalHarmonicsComponent","SphericalHarmonicsOffsetFloat","SphericalHarmonicsDegrees","BytesPerSplat","bufferData","secLoadedCountsToMax","constructFromBuffer","getSplatCount","getMaxSplatCount","maxSplatCount","getMinSphericalHarmonicsDegree","minSphericalHarmonicsDegree","sections","section","getBucketIndex","localSplatIndex","bucketIndex","maxSplatIndexInFullBuckets","fullBucketCount","bucketSize","bucketSplatIndex","partiallyFullBucketIndex","currentPartiallyFilledBucketSize","partiallyFilledBucketLengths","getSplatCenter","globalSplatIndex","outCenter","transform","sectionIndex","globalSplatIndexToSectionMap","splatCountOffset","srcSplatCentersBase","bytesPerSplat","DataView","dataBase","bucketBase","BucketStorageSizeFloats","sf","compressionScaleFactor","sr","compressionScaleRange","bucketArray","applyMatrix4","getSplatScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","Vector3","scale","rotation","Quaternion","outScale","outRotation","scaleOverride","srcSplatScalesBase","CompressionLevels","set","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getSplatColor","outColor","srcSplatColorsBase","splatColorsArray","fillSplatCenterArray","outCenterArray","srcFrom","srcTo","destFrom","center","centerDestBase","CenterComponentCount","fillSplatScaleRotationArray","ensurePositiveW","quaternion","flip","w","outScaleArray","outRotationArray","desiredOutputCompressionLevel","outputConversion","srcCompressionLevel","scaleDestBase","ScaleComponentCount","rotationDestBase","RotationComponentCount","srcScaleX","srcScaleY","srcScaleZ","srcRotationW","srcRotationX","srcRotationY","srcRotationZ","normalize","identity","premultiply","tempMatrix4","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","outCovariance","outOffset","setFromMatrix4","transpose","elements","fillSplatCovarianceArray","covarianceArray","covarianceDestBase","CovarianceComponentCount","computeCovariance","fillSplatColorArray","outColorArray","minimumAlpha","colorDestBase","ColorComponentCount","alpha","fillSphericalHarmonicsArray","sphericalHarmonicVectors","tempMatrix3","tempTranslation","tempScale","tempRotation","sh11","sh12","sh13","sh21","sh22","sh23","sh24","sh25","shIn1","shIn2","shIn3","shIn4","shIn5","shOut1","shOut2","shOut3","shOut4","shOut5","set3","array","val1","val2","val3","set3FromArray","srcDestView","stride","srcBase","copy3","srcArray","destArray","setOutput3","destBase","conversionFunc","toUncompressedFloatArray3","outSphericalHarmonicsArray","outSphericalHarmonicsDegree","localFromHalfFloatToUint8","minSphericalHarmonicsCoeff","maxSphericalHarmonicsCoeff","localToUint8","outSphericalHarmonicsComponentsCount","srcSplatSHBase","shDestBase","compressionLevelForOutputConversion","minShCoeff","maxShCoeff","rotateSphericalHarmonics3","rotateSphericalHarmonics5","v1","v2","v3","transformRow","outArray","t0","t1","t2","addInto3","v4","v5","t3","t4","in1","in2","in3","tsh11","tsh12","tsh13","out1","out2","out3","dot3","in4","in5","tsh21","tsh22","tsh23","tsh24","tsh25","out4","out5","kSqrt0104","sqrt","kSqrt0304","kSqrt0103","kSqrt0403","kSqrt0112","dot5","parseHeader","headerArrayUint8","HeaderSizeBytes","headerArrayUint16","Uint16Array","headerArrayUint32","Uint32Array","headerArrayFloat32","versionMajor","versionMinor","maxSectionCount","sectionCount","sceneCenter","writeHeaderCountsToBuffer","writeHeaderToBuffer","header","parseSectionHeaders","offset","sectionHeaderArrayUint16","SectionHeaderSizeBytes","sectionHeaderArrayUint32","sectionHeaderArrayFloat32","sectionHeaders","sectionHeaderBase","sectionHeaderBaseUint16","sectionHeaderBaseUint32","sectionBase","bucketCount","bucketBlockSize","halfBucketBlockSize","bucketStorageSizeBytes","partiallyFilledBucketCount","bucketsMetaDataSizeBytes","bucketsStorageSizeBytes","calculateComponentStorage","splatDataStorageSizeBytes","storageSizeBytes","sectionHeader","base","bucketsBase","writeSectionHeaderToBuffer","sectionHeadeArrayUint16","sectionHeadeArrayUint32","sectionHeadeArrayFloat32","BucketStorageSizeBytes","writeSectionHeaderSplatCountToBuffer","globalSplatIndexToLocalSplatIndexMap","linkBufferArrays","buildMaps","bytesPerCenter","bytesPerScale","bytesPerRotation","bytesPerColor","sphericalHarmonicsComponentsPerSplat","sphericalHarmonicsBytesPerSplat","cumulativeSplatCount","j","updateLoadedCounts","newSectionCount","newSplatCount","updateSectionLoadedCounts","sectionHeaderOffset","tempCenterBuffer","ArrayBuffer","tempScaleBuffer","tempRotationBuffer","tempColorBuffer","tempSHBuffer","tempRot","bucketCenterDelta","OFFSET_X","OFFSET_Y","OFFSET_Z","OFFSET_SCALE0","OFFSET_SCALE1","OFFSET_SCALE2","OFFSET_ROT0","OFFSET_ROT1","OFFSET_ROT2","OFFSET_ROT3","OFFSET_FDC0","OFFSET_FDC1","OFFSET_FDC2","OFFSET_OPACITY","OFFSET_FRC0","OFFSET_FRC9","OFFSET","compressPositionOffset","doubleCompressionScaleRange","round","targetSplat","sectionBuffer","bufferOffset","bucketCenter","centerBase","scaleBase","rotationBase","colorBase","sphericalHarmonicsBase","rot","shOut","s","sub","bytesPerSHComponent","srcVal","degree1ByteCount","rgba","Uint8ClampedArray","generateFromUncompressedSplatArrays","splatArrays","blockSize","options","shDegree","sa","splatArray","sc","sectionBuffers","sectionHeaderBuffers","totalSplatCount","validSplats","sectionOptions","sectionBlockSize","blockSizeFactor","BucketBlockSize","sectionBucketSize","ceil","bucketSizeFactor","BucketSize","bucketInfo","computeBucketsForUncompressedSplatArray","fullBuckets","partiallyFullBucketLengths","partiallyFullBuckets","map","bucket","buckets","sectionDataSizeBytes","bucketMetaDataSizeBytes","bucketDataBytes","sectionSizeBytes","outSplatCount","fromArray","row","writeSplatDataToSectionBuffer","bucketMetaDataArray","pfb","sectionHeaderBuffer","sectionsCumulativeSizeBytes","byteLength","unifiedBufferSize","unifiedBuffer","currentUnifiedBase","halfBlockSize","dimensions","yBlocks","zBlocks","blockCenter","xBlock","yBlock","zBlock","bucketId","toArray","partiallyFullBucketArray","hasOwnProperty","HeaderMagicBytes","HeaderEndTokenBytes","HeaderEndToken","DataTypeMap","Map","Int8Array","Int16Array","Float64Array","unpackUnorm","bits","t","unpack111011","result","lerp","a","getElementPropStorage","element","name","properties","find","p","storage","PlayCanvasCompressedPlyParser","decodeHeaderText","headerText","chunkElement","vertexElement","headerLines","split","filter","line","startsWith","words","count","has","StorageType","storageSizeByes","BYTES_PER_ELEMENT","type","byteSize","headerSizeBytes","decodeHeader","plyBuffer","endHeaderTokenOffset","buf","search","endIndex","TextDecoder","decode","slice","readElementData","readBuffer","readOffset","fromIndex","toIndex","propertyFilter","e","property","requiredStorageSizeBytes","getInt8","getInt16","getInt32","getUint32","getFloat64","readPly","readIndex","getElementStorageArrays","minX","minY","minZ","maxX","maxY","maxZ","minScaleX","minScaleY","minScaleZ","positionExtremes","scaleExtremes","maxScaleX","maxScaleY","maxScaleZ","position","color","c","Vector4","chunkSplatIndexOffset","positionArray","scaleArray","rotationArray","colorArray","outSplat","chunkIndex","norm","m","unpackRot","exp","parseToUncompressedSplatBufferSection","vertexDataBuffer","veretxReadOffset","outBuffer","outBytesPerSplat","tempSplat","decompressSplat","outBase","parseToUncompressedSplatArraySection","parseToUncompressedSplatArray","PlyFormat","FieldSizeIdDouble","FieldSizeIdInt","FieldSizeIdUInt","FieldSizeIdFloat","FieldSizeIdShort","FieldSizeIdUShort","FieldSizeIdUChar","FieldSizeStringMap","double","int","uint","float","short","ushort","uchar","FieldSize","PlyParserUtils","decodeSectionHeader","fieldNameIdMap","headerStartLine","extractedLines","processingSection","headerEndLine","vertexCount","endOfHeader","sectionName","fieldIds","fieldTypes","allFieldNames","usedFieldNames","fieldTypesByName","trim","lineComponents","validComponents","lineComponent","trimmedComponent","fieldMatch","fieldTypeStr","fieldName","fieldId","fieldType","fieldOffsets","bytesPerVertex","sphericalHarmonics","decodeSphericalHarmonicsFromSectionHeader","dataSizeBytes","degree","sphericalHarmonicsCoefficientsPerChannel","coefficientsPerChannel","sphericalHarmonicsDegree1Fields","degree1Fields","sphericalHarmonicsDegree2Fields","degree2Fields","fieldNames","sphericalHarmonicsFieldCount","rgb","getHeaderSectionNames","sectionNames","headerLine","checkTextForEndHeader","endHeaderTestText","includes","checkBufferForEndHeader","searchOfset","chunkSize","decoder","endHeaderTestChunk","extractHeaderFromBufferToText","headerOffset","readChunkSize","headerChunk","readHeaderFromBuffer","convertHeaderTextToLines","prunedLines","determineHeaderFormatFromHeaderText","headertText","format","determineHeaderFormatFromPlyBuffer","readVertex","vertexData","dataOffset","fieldsToRead","rawVertex","BaseFieldNamesToRead","BaseFieldsToReadIndexes","SCALE_0","SCALE_1","SCALE_2","ROT_0","ROT_1","ROT_2","ROT_3","F_DC_0","F_DC_1","F_DC_2","RED","GREEN","BLUE","F_REST_0","INRIAV1PlyParser","plyParserutils","decodeHeaderLines","shLineCount","forEach","shFieldsToReadCount","shRemainingFieldNamesToRead","from","fieldNamesToRead","fieldsToReadIndexes","reduce","acc","decodeHeaderFromBuffer","findSplatData","fromSplat","toSplat","splatData","splatDataOffset","toBuffer","toOffset","parsedSplat","parseToUncompressedSplat","decodeSectionSplatData","sectionSplatData","rawSplat","OFFSET_ROTATION0","OFFSET_ROTATION1","OFFSET_ROTATION2","OFFSET_ROTATION3","OFFSET_FRC","readSplat","SH_C0","CodeBookEntryNamesToRead","CodeBookEntriesToReadIndexes","CB_FEATURES_DC","CB_FEATURES_REST_0","CB_FEATURES_REST_3","CB_OPACITY","CB_SCALING","CB_ROTATION_RE","CB_ROTATION_IM","FieldNamesToRead","FieldsToReadIndexes","PLY_SCALE_0","PLY_SCALE_1","PLY_SCALE_2","PLY_ROT_0","PLY_ROT_1","PLY_ROT_2","PLY_ROT_3","PLY_X","PLY_Y","PLY_Z","PLY_F_DC_0","PLY_F_DC_1","PLY_F_DC_2","PLY_OPACITY","PLY_RED","PLY_GREEN","PLY_BLUE","hf","NaN","pow","INRIAV2PlyParser","decodeSectionHeadersFromHeaderLines","codeBookEntriesToReadIdMap","codeBookSectionIndex","currentStartLine","lastSectionFound","decodeSectionHeadersFromHeaderText","getSplatCountFromSectionHeaders","decodeHeaderFromHeaderText","findVertexData","targetSection","byteOffset","decodeCodeBook","codeBookData","codeBook","codeBookElementOffset","codeBookPage","page","baseValue","unified","PlyParser","plyFormat","SplatPartitioner","sectionFilters","groupingParameters","partitionGenerator","partitionUncompressedSplatArray","results","newArrays","sectionSplats","sectionFilter","parameters","getStandardPartitioner","partitionSize","clampDistance","point","centerDist","lengthSq","sort","patitionCount","currentStartSplat","startSplat","splatIndex","blocksSize","SplatBufferGenerator","splatPartitioner","alphaRemovalThreshold","sectionSize","generateFromUncompressedSplatArray","partitionResults","getStandardGenerator","LoaderStatus","DirectLoadError","InternalLoadType","storeChunksInBuffer","inBytes","sizeBytes","finalize","optimizeSplatData","PlyLoader","loadFromURL","fileName","loadDirectoToSplatBuffer","onProgressiveLoadSectionProgress","internalLoadType","directLoadSectionSizeBytes","ProgressiveLoadSectionSize","splatDataOffsetBytes","directLoadBufferIn","directLoadBufferOut","directLoadSplatBuffer","compressedPlyHeaderChunksBuffer","headerLoaded","readyToLoadSplatData","compressed","loadPromise","standardLoadUncompressedSplatArray","numBytesStreamed","numBytesParsed","numBytesDownloaded","textDecoder","inriaV1PlyParser","chunkData","loadComplete","startBytes","endBytes","sizeRequiredForHeaderAndChunks","shDescriptor","splatBufferSizeBytes","CurrentMajorVersion","CurrentMinorVersion","numBytesToProcess","addedSplatCount","numBytesToParse","numBytesLeftOver","parsedDataViewOffset","dataToParse","keepChunks","keepSize","unshift","chunkDatas","plyFileData","loadFromFileData","SplatParser","fromBuffer","fromOffset","outBytesPerCenter","outBytesPerScale","outBytesPerRotation","inBase","RowSizeBytes","inCenter","inScale","CenterSizeBytes","inColor","ScaleSizeBytes","inRotation","RotationSizeBytes","quat","parseStandardSplatToUncompressedSplatArray","inBuffer","ColorSizeBytes","SplatLoader","numBytesLoaded","percentStr","bytesLoadedSinceLastSection","splatFileData","KSplatLoader","checkVersion","minVersionMajor","minVersionMinor","externalOnProgress","onSectionBuilt","directLoadBuffer","headerBuffer","sectionHeadersBuffer","headerLoading","sectionHeadersLoaded","sectionHeadersLoading","numBytesProgressivelyLoaded","totalBytesToDownload","downloadComplete","loadSectionQueued","directLoadPromise","queuedCheckAndLoadSectionsCount","checkAndLoadSectionHeaders","performLoad","totalSectionStorageStorageByes","totalStorageSizeBytes","checkAndLoadSections","baseDataOffset","reachedSections","loadedSplatCount","bytesRequiredToReachSectionSplatData","bytesPastSSectionSplatDataStart","loadedSplatsForSection","percentComplete","ProgressiveLoadSectionDelayDuration","fullBuffer","splatBuffer","fileData","downLoadLink","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","SceneFormat","Splat","KSplat","Ply","sceneFormatFromPath","endsWith","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","clearDampedRotation","clearDampedPan","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","sphericalDelta","panOffset","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","isFinite","makeSafe","addScaledVector","add","performCursorZoom","isOrthographicCamera","radius","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","console","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","angle","rotateUp","panLeft","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","container","taskIDGen","elementID","elementIDGen","tasks","spinnerContainerOuter","className","display","spinnerContainerPrimary","spinnerPrimary","classList","messageContainerPrimary","innerHTML","spinnerContainerMin","spinnerMin","messageContainerMin","setMinimized","fadeTransitions","addTask","newTask","removeTask","task","removeAllTasks","setMessageForTask","show","setMessage","hide","visible","setContainer","parentElement","removeChild","zIndex","minimized","instant","showHideSpinner","displayStyle","fadeTransitionsIndex","out","duration","onComplete","startTime","startOpacity","parseFloat","isNaN","interval","setInterval","elapsed","clearInterval","fadeElement","LoadingProgressBar","progressBarContainerOuter","progressBarBox","progressBarBackground","progressBar","setProgress","progress","InfoPanel","infoCells","layout","infoPanelContainer","append","infoPanel","infoTable","layoutEntry","labelCell","spacerCell","infoCell","renderDimensions","cameraPosition","cameraLookAtPosition","cameraUp","orthographicCamera","meshCursorPosition","currentFPS","splatRenderCount","splatRenderCountPct","lastSortTime","focalAdjustment","splatScale","pointCloudMode","cameraPosString","cla","cameraLookAtString","cameraLookAt","cameraUpString","cursPos","cursorPosString","cursorPosition","fps","renderWindow","renderSplatCount","sortTime","_axis","ArrowHelper","Object3D","dir","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","radians","acos","setFromAxisAngle","setColor","source","SceneHelper","threeScene","splatRenderTarget","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","debugRoot","secondaryDebugRoot","updateSplatRenderTargetForRenderDimensions","destroySplatRendertarget","WebGLRenderTarget","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","renderTargetCopyMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","destroyRenderTargetCopyObjects","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","destroyMeshCursor","remove","setMeshCursorVisibility","getMeschCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","destroyFocusMarker","updateFocusMarker","toCamera","viewport","matrixWorld","toCameraDistance","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","destroyControlPlane","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","createDebugMeshes","createSecondaryDebugMeshes","destroyDebugMeshes","renderOrder","debugMeshRoot","createMesh","sphereMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","Hit","hitClone","SplatRenderMode","ThreeD","TwoD","Raycaster","raycastAgainstTrueSplatEllipsoid","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","sceneTransform","localRay","tempPoint","splatMesh","outHits","splatTree","getSplatTree","subTrees","subTree","dynamicMode","getSceneTransform","outHitsForSubTree","rootNode","castRayAtSplatTreeNode","hit","tempColor","tempCenter","tempHit","scaleEpsilon","uniformScaleMatrix","toSphereSpace","fromSphereSpace","tempRay","node","boundingBox","indexes","splatGlobalIndex","splatSceneIndex","getSceneIndexForSplat","getScene","splatRenderMode","uniformScale","log10","SplatMaterial","buildVertexShaderBase","enableOptionalEffects","maxSphericalHarmonicsDegree","customVars","vertexShaderSource","MaxScenes","getVertexShaderFadeIn","getUniforms","pointCloudModeEnabled","fadeInComplete","orthographicMode","visibleRegionFadeStartRadius","visibleRegionRadius","currentTime","firstRenderTime","centersColorsTexture","sphericalHarmonicsTexture","sphericalHarmonicsTextureR","sphericalHarmonicsTextureG","sphericalHarmonicsTextureB","sphericalHarmonics8BitCompressionRangeMin","sphericalHarmonics8BitCompressionRangeMax","focal","orthoZoom","inverseFocalAdjustment","basisViewport","debugColor","centersColorsTextureSize","sphericalHarmonicsTextureSize","sphericalHarmonics8BitMode","sphericalHarmonicsMultiTextureMode","sceneIndexesTexture","sceneIndexesTextureSize","sceneCount","sceneOpacity","sceneVisibility","transformMatrices","SplatMaterial3D","build","antialiased","maxScreenSpaceSplatSize","kernel2DSize","buildVertexShaderProjection","fragmentShaderSource","buildFragmentShader","alphaTest","NormalBlending","SplatMaterial2D","referenceQuadGeneration","SplatGeometry","baseGeometry","BufferGeometry","setIndex","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","SplatScene","copyTransformData","otherScene","updateTransform","matrixWorldAutoUpdate","updateWorldMatrix","updateMatrix","SplatTreeNode","depth","Box3","SplatSubTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","nodesWithIndexes","convertWorkerSubTreeNode","workerSubTreeNode","minVector","maxVector","convertedNode","convertWorkerSubTree","workerSubTree","convertedSubTree","visitLeavesFromNode","visitFunc","createSplatTreeWorker","self","WorkerSplatTreeNodeIDGen","WorkerBox3","containsPoint","WorkerSplatSubTree","addedIndexes","disposed","WorkerSplatTreeNode","processSplatTreeNode","tree","indexToCenter","sceneCenters","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","childNode","buildSubTree","centerCount","onmessage","process","allCenters","postMessage","createSplatTree","centers","SplatTree","diposeSplatTreeWorker","splatTreeWorker","terminate","processSplatMesh","filterFunc","onIndexesUpload","onSplatTreeConstruction","Worker","addCentersForScene","splatOffset","addedCount","addBase","checkForEarlyExit","scenes","transferBuffers","workerProcessCenters","countLeaves","leafCount","visitLeaves","WebGLExtensions","gl","getExtension","extension","init","capabilities","isWebGL2","WebGLCapabilities","maxAnisotropy","getMaxPrecision","precision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","maxPrecision","drawBuffers","logarithmicDepthBuffer","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","MAX_SAMPLES","SceneRevealMode","Default","Gradual","Instant","LogLevel","None","Warning","Info","Debug","dummyGeometry","dummyMaterial","MAX_TEXTURE_TEXELS","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","integerBasedDistancesComputation","logLevel","sceneFadeInRateMultiplier","renderer","baseSplatTree","splatDataTextures","distancesTransformFeedback","program","centersBuffer","sceneIndexesBuffer","outDistancesBuffer","centersLoc","modelViewProjLoc","sceneIndexesLoc","transformsLocs","globalSplatIndexToSceneIndexMap","lastBuildSplatCount","lastBuildScenes","lastBuildMaxSplatCount","lastBuildSceneCount","finalBuild","webGLUtils","calculatedSceneCenter","maxSplatDistanceFromSceneCenter","visibleRegionBufferRadius","visibleRegionChanging","lastRenderer","buildScenes","parentObject","splatBuffers","sceneOptions","scene","createScene","splatAlphaRemovalThreshold","buildSplatIndexMaps","localSplatIndexMap","sceneIndexMap","buildSplatTree","minAlphas","onSplatTreeIndexesUpload","disposeSplatTree","buildStartTime","splatColor","sceneIndex","minAlpha","buildTime","log","leavesWithVertices","avgSplatCount","nodeCount","nodeSplatCount","keepSceneTransforms","preserveVisibleRegion","getTotalMaxSplatCountForSplatBuffers","newScenes","newScene","existingScene","splatBufferSphericalHarmonicsDegree","splatBuffersChanged","isUpdateBuild","disposeMeshData","indexMaps","splatBufferSplatCount","setupDistancesComputationTransformFeedback","dataUpdateResults","refreshGPUDataFromSplatBuffers","onSplatTreeReadyCallback","freeIntermediateSplatData","deleteTextureData","texture","image","onUpdate","baseData","covariances","colors","centerColors","sceneIndexes","textures","disposeTextures","computeDistancesOnGPUSyncTimeout","clearTimeout","disposeDistancesComputationGPUResources","textureKey","textureContainer","onSplatTreeReady","callback","getDataForDistancesComputation","start","end","getIntegerCenters","getFloatCenters","getSceneIndexes","sinceLastBuildOnly","refreshDataTexturesFromSplatBuffers","updateStart","refreshGPUBuffersForDistancesComputation","to","updateGPUCentersBufferForDistancesComputation","updateGPUTransformIndexesBufferForDistancesComputation","updateBaseDataFromSplatBuffers","setupDataTextures","updateDataTexturesFromBaseData","updateVisibleRegion","computeDataTextureSize","elementsPerTexel","elementsPerSplat","texSize","getCovariancesInitialTextureSpecs","elementsPerTexelStored","getCovariancesElementsPertexelStored","covarianceCompressionLevel","getTargetCovarianceCompressionLevel","shCompressionLevel","getTargetSphericalHarmonicsCompressionLevel","scales","rotations","initialCovTexSpecs","SphericalHarmonicsArrayType","shComponentCount","shData","centersColsTexSize","paddedCentersCols","updateCenterColorsPaddedData","centersColsTex","DataTexture","RGBAIntegerFormat","internalFormat","size","covTexSpecs","covariancesElementsPerTexelStored","covTexSize","covariancesElementsPerTexelAllocated","covariancesTextureData","covTex","updatePaddedCompressedCovariancesTextureData","covariancesTextureHalfFloat","FloatType","covariancesTexture","dummyTex","covariancesAreHalfFloat","covariancesTextureSize","elementsPerTexelAllocated","scaleRotationsTexSize","ScaleRotationsDataType","scaleRotationsTextureType","paddedScaleRotations","updateScaleRotationsPaddedData","scaleRotationsTex","scaleRotationsTexture","scaleRotationsTextureSize","shTextureType","UnsignedByteType","HalfFloatType","paddedSHComponentCount","shElementsPerTexel","texelFormat","RGFormat","shTexSize","paddedSHArray","shTexture","paddedComponentCount","textureCount","shComponentCountPerChannel","paddedSHArraySize","textureUniforms","paddedSHArrays","shTextures","componentCountPerChannel","sceneIndexesTexSize","paddedTransformIndexes","RedIntegerFormat","covarancesTextureDesc","scaleRotationsTextureDesc","scaleRotationCompressionLevel","shITextureDesc","fillSplatDataArrays","shTextureDesc","centerColorsTextureDescriptor","paddedCenterColors","centerColorsTexture","centerColorsTextureProps","__webglTexture","updateDataTexture","covarancesStartElement","covariancesEndElement","covariance","covariancesTextureProps","bytesPerElement","scaleRotationsTextureProps","shBytesPerElement","updateTexture","shTextureSize","shTextureProps","sceneIndexesTexDesc","paddedSceneIndexes","sceneIndexesTextureProps","getMaximumSplatBufferCompressionLevel","maxCompressionLevel","getMinimumSplatBufferCompressionLevel","minCompressionLevel","computeTextureUpdateRegion","endSplat","textureWidth","texelsPerSplat","startSplatTexels","startRow","startRowElement","endSplatTexels","endRow","dataStart","dataEnd","paddedData","textureSize","textureProps","getContext","updateRegion","updateElementCount","updateDataView","updateHeight","glType","convert","glFormat","colorSpace","currentTexture","TEXTURE_BINDING_2D","bindTexture","TEXTURE_2D","texSubImage2D","sourceData","textureData","textureDataStartIndex","fromElement","toElement","textureDataView","textureDataIndex","sequentialCount","setUint16","colorsBase","centersBase","centerColorsBase","arr","scaleRotationsBase","avgCenter","distFromCSceneCenter","updateVisibleRegionFadeDistance","sceneRevealMode","fastFadeRate","gradualFadeRate","defaultFadeInRate","fadeInRate","shaderFadeInComplete","updateRenderIndexes","globalIndexes","attributes","setDrawRange","updateTransforms","updateUniforms","cameraFocalLengthX","cameraFocalLengthY","orthographicZoom","transforms","setSplatScale","getSplatScale","setPointCloudModeEnabled","getPointCloudModeEnabled","getSplatDataTextures","includeSinceLastBuild","getTotalSplatCountForScenes","getTotalSplatCountForSplatBuffers","getTotalMaxSplatCountForScenes","vao","deleteVertexArray","deleteProgram","deleteShader","disposeDistancesComputationGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","WebGLUtils","currentMaxSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","errors","getShaderInfoLog","vsSource","currentVao","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","currentProgramDeleted","getProgramParameter","DELETE_STATUS","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","vertexAttribPointer","FLOAT","UNSIGNED_INT","STATIC_READ","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","isUpdate","offsetSplats","ArrayType","subBufferOffset","bufferSubData","maxArray","STATIC_DRAW","fillTransformsArray","tempArray","sceneTransformElements","computeDistancesOnGPU","modelViewProjMatrix","outComputedDistances","enable","RASTERIZER_DISCARD","iTempMatrix","getIntegerMatrixArray","iTransform","uniform4i","uniformMatrix4fv","iViewProjMatrix","iViewProj","uniform3i","viewProj","uniform3f","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","checkSync","timeout","bitflags","clientWaitSync","TIMEOUT_EXPIRED","WAIT_FAILED","deleteSync","getBufferSubData","getLocalSplatParameters","globalIndex","paramsObj","returnSceneTransform","getSplatBufferForSplat","localIndex","getSplatLocalIndex","getSceneTransformForSplat","applySceneTransform","sphericalHarmonicsCompressionLevel","srcStart","srcEnd","destStart","tempTransform","startSceneIndex","endSceneIndex","padFour","floatCenters","intCenters","paddedFloatCenters","outTransform","getSceneCount","matrixElements","intMatrixArray","computeBoundingBox","applySceneTransforms","SorterWasmNoSIMD","sortWorker","wasmInstance","wasmMemory","useSharedMemory","integerBasedSort","indexesToSortOffset","sortedIndexesOffset","sceneIndexesOffset","transformsOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","modelViewProjOffset","countsZero","sortedIndexesOut","distanceMapRange","uploadedSplatCount","BytesPerInt","BytesPerFloat","renderCount","sortCount","splatSortCount","usePrecomputedDistances","copyIndexesToSort","copyPrecomputedDistances","copyTransforms","indexesToSort","precomputedDistances","modelViewProj","sortStartTime","exports","sortIndexes","sortMessage","sortDone","sortedIndexes","sortEndTime","CENTERS_BYTES_PER_ENTRY","sorterWasmBytes","matrixSize","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForModelViewProjectionMatrix","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","memoryRequiredforTransformIndexes","memoryRequiredforTransforms","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","transformsBuffer","WebXRMode","VR","AR","VRButton","createButton","sessionInit","disableButton","cursor","onmouseenter","onmouseleave","onclick","stylizeElement","padding","border","borderRadius","background","font","textAlign","outline","xr","isSessionSupported","supported","currentSession","onSessionStarted","session","onSessionEnded","setSession","textContent","sessionOptions","optionalFeatures","requestSession","offerSession","err","showEnterVR","xrSessionIsGranted","exception","isSecureContext","location","replace","textDecoration","registerSessionGrantedListener","test","ARButton","domOverlay","overlay","svg","createElementNS","root","setReferenceSpaceType","showStartAR","RenderMode","Always","OnChange","Never","Viewer","initialCameraPosition","initialCameraLookAt","dropInMode","selfDrivenMode","selfDrivenUpdateFunc","selfDrivenUpdate","useBuiltInControls","rootElement","ignoreDevicePixelRatio","gpuAcceleratedSort","sharedMemoryForWorkers","dynamicScene","webXRMode","webXRActive","webXRSessionInit","renderMode","enableSIMDInSort","inMemoryCompressionLevel","semver","splatSortDistanceMapPrecision","DefaultSplatSortDistanceMapPrecision","onSplatMeshChangedCallback","createSplatMesh","controls","perspectiveControls","orthographicControls","perspectiveCamera","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","lastSplatSortCount","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","sortWorkerTransforms","preSortMessages","runAfterNextSort","selfDrivenModeRunning","splatRenderReady","raycaster","startInOrthographicMode","consecutiveRenderFrames","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","resizeObserver","mouseMoveListener","mouseDownListener","mouseUpListener","keyDownListener","sortPromise","sortPromiseResolver","splatSceneDownloadPromises","splatSceneDownloadAndBuildPromise","splatSceneRemovalPromise","loadingSpinner","loadingProgressBar","usingExternalCamera","usingExternalRenderer","initialized","disposing","disposePromise","frustumCulled","setupCamera","setupRenderer","setupWebXR","setupControls","setupEventHandlers","Scene","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","setPixelRatio","autoClear","setClearColor","setSize","ResizeObserver","forceRenderNextFrame","observe","onMouseUp","removeEventHandlers","setRenderMode","setActiveSphericalHarmonicsDegrees","activeSphericalHarmonicsDegrees","onSplatMeshChanged","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","setOrthographicMode","offsetX","offsetY","clickOffset","onMouseClick","checkForFocalPointChange","toNewFocalPoint","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","fromCamera","resetControls","fromControls","toControls","setCameraZoomFromPosition","setCameraPositionFromZoom","tempVector","positionCamera","zoomedCamera","toLookAtDistance","negate","zoomCamera","positionZamera","updateSplatMesh","focalLengthX","projectionMatrix","focalLengthY","focalMultiplier","adjustForWebXRStereo","xrCameraProj00","getCamera","cameraProj00","isLoadingOrUnloading","Object","isDisposingOrDisposed","addSplatSceneDownloadPromise","removeSplatSceneDownloadPromise","setSplatSceneDownloadAndBuildPromise","clearSplatSceneDownloadAndBuildPromise","addSplatScene","progressiveLoad","isProgressivelyLoadable","showLoadingUI","loadingUITaskId","onProgressUIUpdate","percentCompleteLabel","loaderStatus","suffix","downloadDone","downloadedPercentage","splatBuffersAddedUIUpdate","firstBuild","downloadAndBuildSingleSplatSceneProgressiveLoad","downloadAndBuildSingleSplatSceneStandardLoad","addSplatBufferOptions","orientation","addSplatBuffers","buildFunc","onException","downloadPromise","downloadSplatSceneToSplatBuffer","downloadAndBuildPromise","onDownloadProgress","onDownloadException","progressiveLoadedSectionBuildCount","progressiveLoadedSectionBuilding","queuedProgressiveLoadSectionBuilds","checkAndBuildProgressiveLoadSections","queuedBuild","shift","progressiveLoadFirstSectionBuildPromise","splatSceneDownloadPromise","addSplatScenes","fileCount","onLoadProgress","fileIndex","totalPercent","baseDownloadPromises","nativeDownloadPromises","baseDownloadPromise","all","finally","progressiveBuild","splatBufferOptions","showLoadingUIForSplatTreeBuild","replaceExisting","enableRenderBeforeFirstSort","splatProcessingTaskId","removeSplatProcessingTask","buildResults","addSplatBuffersToMesh","disposeSortWorker","setupSortWorker","runSplatSort","splatOptimizingTaskId","allSplatBuffers","allSplatBufferOptions","finished","DistancesArrayType","worker","sourceWasm","iOSSemVer","sorterWasmBinaryString","atob","charCodeAt","createSortWorker","sortCanceled","removeSplatScene","indexToRemove","removeSplatScenes","indexesToRemove","revmovalTaskId","checkAndHideLoadingUI","onDone","savedSplatBuffers","savedSceneOptions","savedSceneTransformComponents","shouldRemove","setAnimationLoop","requestFrameId","requestAnimationFrame","stop","cancelAnimationFrame","waitPromises","promisesToAbort","promiseKey","downloadPromiseToAbort","unobserve","toAbort","shouldRender","render","renderNextFrame","lastCameraPosition","lastCameraOrientation","changeEpsilon","cameraChanged","cp","co","savedAuoClear","hasRenderables","updateForDropInMode","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfoPanel","updateControlPlane","lastCalcTime","frameCount","lastRendererSize","currentRendererSize","lastCameraOrthographic","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","mvpMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedSorts","partialSorts","angleThreshold","sortFractions","force","forceSortAll","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","shouldSortAll","gatherSceneNodesForSort","mvpCamera","gpuAcceleratedSortPromise","partialSort","sortFraction","nodeRenderList","allSplatsSortBuffer","tempVectorYZ","tempVectorXZ","modelView","baseModelView","tempMax","nodeSize","gatherAllNodes","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","getSplatMesh","getSplatScene","isMobile","DropInViewer","Group","viewer","callbackMesh","createCallbackMesh","onBeforeRender","colorWrite","mesh"],"mappings":"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"}